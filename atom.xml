<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-06-09T22:37:47+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Procrastination]]></title>
    <link href="http://coolbrain.github.com/blog/2013/06/09/procrastination/"/>
    <updated>2013-06-09T20:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/06/09/procrastination</id>
    <content type="html"><![CDATA[<blockquote><p><p>按照百度百科的解释，单纯地做事拖拉或是懒得去做，只能定义为“拖延”，也仅是一种坏习惯，改正它并不难。当“拖延”已经影响到情绪，如出现强烈自责情绪，强烈负罪感，不断的自我否定、自我贬低，伴生出焦虑症、抑郁症等心理疾病时，才能称之为“拖延症”。</p>
<!-- more -->
<p>拖延的基础，实际上是对自身很高甚至不切实际的期望，如果说完成任务是走过一块一人宽、十米长的厚木板，那么当它放在地面上时，几乎人人都可以轻松地走过，但对结果的高期望则像是将这块木板架到了两座高楼间十层楼高的地方，于是我们会害怕掉下来，即害怕失败或害怕成功，甚至不敢向前迈上一步，而deadline则是身后的一团火，当它离我们足够近时，害怕被烧着的恐惧感战胜了对掉下去的恐惧感，于是我们一下子冲了过去，在deadline前赶完了任务，尽管质量难说。 </p>
<p>更可怕的是，很多拖延的人甚至很享受那种deadline过后突然一下放松的感觉，而且拖延的结果有时反而挺好。这种时候，会在心里表扬自己很有“效率”。同时，长期这样下去，尽管不愿承认，但潜意识里确实觉得自己如果花了很多时间成绩却平平，会是一件非常丢脸的事情。于是这一切的一切，都再次强化的拖延。</p>
<p>拖延症之歌</p>
<p>See I have to write this essay </p>
<p>that the teacher gave last week </p>
<p>and it&#8217;s due tomorrow morning </p>
<p>twenty pages all in Greek </p>
<p>Nah but first I check my Tumblur</p>
<p>Facebook,Twitter, call my Mom </p>
<p>Then just one more, one more page</p>
<p>oh I waste so much time dot com </p>
<p>I&#8217;m procrastinating</p>
<p>All day I sit here waiting</p>
<p>for just the perfect moment to begin</p>
<p>we&#8217;re procrastinating</p>
<p>Why work, we could be gaming</p>
<p>Agreed! Procrastinating FTM!</p>
<p>I have to start this diet</p>
<p>cause my prom&#8217;s a week away</p>
<p>So I&#8217;m only eating veggies</p>
<p>and I&#8217;m starting that today</p>
<p>But I&#8217;m getting really hungry</p>
<p>and those cookies look sublime</p>
<p>Fine,I&#8217;ll have just one, or two, or ten</p>
<p>Why not?It&#8217;s not crime!<p>
<p>We&#8217;re procrasinating</p>
<p>No better way than eating</p>
<p>cause nothing else could possibly compare</p>
<p>I&#8217;m procrastinating</p>
<p>It&#8217;s really fascinating</p>
<p>I know there&#8217;s work to do but I don&#8217;t care</p>
<p>I should probably do my laundry</p>
<p>I should probably feed my cat</p>
<p>But right now we&#8217;re playing Halo</p>
<p>YOLO! Headshot! Take that!</p>
<p>You should probably call the doctor</p>
<p>Never mind it&#8217;s just a scratch</p>
<p>But your arm&#8217;s gone</p>
<p>It&#8217;s a flesh wound</p>
<p>Now come on let&#8217;s play some catch!</p>
<p>I have organized my desktop</p>
<p>Now I&#8217;m all set up to work</p>
<p>Wait that picture&#8217;s kinda crooked</p>
<p>and it&#8217;s driving me berserk</p>
<p>Now I might as well just color code</p>
<p>my pencils one by one</p>
<p>and my papers and my files</p>
<p>I can&#8217;t work until it&#8217;s done!</p>
<p>We&#8217;re procrastinating</p>
<p>All day I sit here waiting</p>
<p>for just the perfect moment to begin</p>
<p>We&#8217;re procrastinating</p>
<p>Wait!</p>
<p>You&#8217;re procratinating right now</p>
<p>You&#8217;re procratinating</p>
<p>Why are you still here watching?</p>
<p>I&#8217;m sure that you&#8217;ve got things due long ago</p>
<p>You&#8217;re procratinating</p>
<p>Please leave a thumbs up rating</p>
<p>Go do your work</p>
<p>Tomorrow!</p>
<p>大学最后论文阶段，我患上了严重的拖延症，导致焦虑，自我否定，最终论文质量大打折扣。因为心情不好，遇到挫折后，就不断拖延，直至弄出个大头佛。大学不但失败，而且被别人冷朝热讽，人啊，要有所兼顾，但要做最重要的事情，不要本末倒置，不然适得其反；戒骄戒躁，坚持前行;不要轻信人言，要懂得分析；不要感情用事，用行动改变现状！</p>
<p><strong>与其沉沉闷闷地抱怨人生,不如轰轰烈烈地扭转乾坤</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goal-Setting Process]]></title>
    <link href="http://coolbrain.github.com/blog/2013/05/23/goal-setting-process/"/>
    <updated>2013-05-23T22:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/05/23/goal-setting-process</id>
    <content type="html"><![CDATA[<blockquote><p><p>This passage is talking about Goal-Setting Process.</p>
<p>1.<strong>Decide exactly what you want in every key area of your life.</strong> Start off by idealing.</p>
<p>2.<strong>write it down.</strong> They must be clear, specific, detailed and measurable.</p>
<!-- more -->
<p>3.<strong>set a deadline.</strong> Your subsconscious mind uses deadlines as &#8220;forcing systems &#8221; to drive you, consciously and unconsciously toward achieving your goal on scheduler.</p>
<p>4.<strong>Identity the obstacles that you will have to overcome to achieve your goal.</strong> Only 20% of the reasons you are not achieving your goal are on the outside. Always start with yourself.The 80/20 Rule applied to constraints.</p>
<p>5.<strong>Identity the knowledge, information and skills you will need to achieve your goal.</strong> Especially, identify the skills that you will have to develop to be in the top 10% of your field. </p>
<p>6.<strong>Identity the people whose help and cooperation you will acquire to achieve your goal.</strong> One key person at a certain time and place in your life will make all the difference. </p>
<p>7.<strong>Make a list of everything you will have to do to achieve your goal.</strong> &#8221; A journey of  a thousand miles begin with a single step&#8221;. You can build the biggest wall in the world one brick at a time. </p>
<p>8.<strong>Organize your list into a plan.</strong> You organize this list by arranging the steps that you have identified by sequence and priority. The 80/20 Rule says that 80% of your result will come from 20% of your activities.</p>
<p>9.<strong>Make a plan.</strong> Organize your list into a series of steps from the beginning all the way through to the completion of your goal. </p>
<p>10.<strong>Select your number one, most important task for each day.</strong>Set priorities on your list using the 80/20 rule.</p>
<p>11.<strong>Develop the habit of self-discipline.</strong> Once you have decide on your most important task. Resolve to concentrate singled-mindedly on that one task until it is 100% completed.</p>
<p>12.<strong>Practise visualization on your goals.</strong> Create clear, vivid, exciting, emotional picture of your goals as if they were already a reality.<p>
<p><strong>Motto: No man&#8217;s education is ever finished. A man&#8217;s reading program should be as carefully planned as his daily diet, for that too is food, without which he cannot mentally develop.</strong> </p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interprocess Communications]]></title>
    <link href="http://coolbrain.github.com/blog/2013/05/08/interprocess-communications/"/>
    <updated>2013-05-08T21:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/05/08/interprocess-communications</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux系统下每个进程都有自己独立的内存空间，但实际应用却需要它们互相的通信去完成某项复杂的任务，这与面向对象程序的设计思想：高内聚，低耦合的思想一脉相承。linux下进程通信的方式：1.管道 2.有名管道（FIFO) 3.消息队列 4.共享内存 5.UNIX套接字。管道主要用于父子进程中，而有名管道是用于无亲缘关系的进程中。管道在linux命令很常见，如 who | sort | lp ，who的进程的输出是sort进程的输入，sort进程的输出又是lp进程的输入。共享内存是最快的一种通信方式。</p>
<!-- more -->
<p><strong>1.管道(pipe)</strong></p></p></blockquote>

<figure class='code'><figcaption><span>父子进程通过双向管道通信  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#define MAXFIFOSIZE  1024</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*通用ips通信结构体*/</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">stIPSMsg</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>   <span class="n">cFrameType</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">long</span>   <span class="n">lDataLength</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span>   <span class="n">acData</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="n">ST_IPS_MSG</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">WriteTask</span><span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">iWriteFd</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">args</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">acPipeBuff</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">iWriteLen</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sprintf</span><span class="p">(</span><span class="n">acPipeBuff</span><span class="p">,</span> <span class="s">&quot;ok, client  seems work ! Continue to relax.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">acPipeBuff</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="n">stIPSMsg</span> <span class="o">=</span> <span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="p">)</span> <span class="n">malloc</span><span class="p">(</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">));</span>
</span><span class='line'>  <span class="c1">//stIPSMsg-&gt;acData = (char *) malloc(len);</span>
</span><span class='line'>  <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">cFrameType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">lDataLength</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">acData</span><span class="p">,</span> <span class="n">acPipeBuff</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">iWriteLen</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span> <span class="n">iWriteFd</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">stIPSMsg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">)</span><span class="o">+</span><span class="n">len</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//free(stIPSMsg-&gt;acData);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">stIPSMsg</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pipe_one</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">pipe_two</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iRecvLen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">acPipeBuff</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pid_t</span>    <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_t</span>      <span class="n">WritePthreadId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">pipe</span><span class="p">(</span><span class="n">pipe_one</span><span class="p">);</span>
</span><span class='line'>   <span class="n">pipe</span><span class="p">(</span><span class="n">pipe_two</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">()</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fork LNSIP Process Error . </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span> 
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">pid</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>             <span class="n">close</span><span class="p">(</span><span class="n">pipe_one</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>         <span class="n">close</span><span class="p">(</span><span class="n">pipe_two</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">acReadFd</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">acWriteFd</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>      <span class="n">sprintf</span><span class="p">(</span><span class="n">acReadFd</span><span class="p">,</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">pipe_one</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">sprintf</span><span class="p">(</span><span class="n">acWriteFd</span><span class="p">,</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">pipe_two</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">execl</span><span class="p">(</span><span class="s">&quot;./pipeclient&quot;</span><span class="p">,</span> <span class="s">&quot;pipeclient&quot;</span><span class="p">,</span><span class="n">acReadFd</span><span class="p">,</span> <span class="n">acWriteFd</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">close</span><span class="p">(</span><span class="n">pipe_one</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">pipe_two</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_attr_t</span> <span class="n">stAttr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_init</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setdetachstate</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setstacksize</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="mi">500</span><span class="o">*</span><span class="mi">1024</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bPthreadCreateWrong</span> <span class="o">=</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">WritePthreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stAttr</span>
</span><span class='line'>        <span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span> <span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">)</span><span class="n">WriteTask</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">pipe_one</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">bPthreadCreateWrong</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span>  <span class="s">&quot;Call Init write task failed.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">iRecvLen</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">pipe_two</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">acPipeBuff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">)</span><span class="o">+</span><span class="n">MAXFIFOSIZE</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>             <span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="n">stIPSMsg</span> <span class="o">=</span> <span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="p">)</span><span class="n">acPipeBuff</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Server Recive Content : %s Length: %d </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">acData</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">lDataLength</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>管道两个文件描述符通过参数传给子程序</p></p></blockquote>

<figure class='code'><figcaption><span>子进程程序实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">iWriteFd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iRecvLen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">acPipeBuff</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="n">pthread_t</span>      <span class="n">WritePthreadId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">iReadFd</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>   <span class="n">iWriteFd</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_attr_t</span> <span class="n">stAttr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_init</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setdetachstate</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setstacksize</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="mi">500</span><span class="o">*</span><span class="mi">1024</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">bPthreadCreateWrong</span> <span class="o">=</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">WritePthreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stAttr</span>
</span><span class='line'>        <span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span> <span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">)</span><span class="n">WriteTask</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">iWriteFd</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">bPthreadCreateWrong</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Call Init write task failed.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">iRecvLen</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">acPipeBuff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">)</span><span class="o">+</span><span class="n">MAXFIFOSIZE</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="n">stIPSMsg</span> <span class="o">=</span> <span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="p">)</span><span class="n">acPipeBuff</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Client Recive Content : %s Length: %d </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">acData</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">lDataLength</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>2.有名管道（FIFO）</strong></p></p></blockquote>

<figure class='code'><figcaption><span>父子进程通过有名管道FIFO通信  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define FIFO_ONE &quot;/tmp/fifo_one&quot;</span>
</span><span class='line'><span class="cp">#define FIFO_TWO &quot;/tmp/fifo_two&quot;</span>
</span><span class='line'><span class="cp">#define FILE_MODE        (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span>
</span><span class='line'><span class="cp">#define MAXFIFOSIZE  1024</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Catch signal Terminate the father process signal: %d .</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">iWriteFd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iRecvLen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">acFifoBuff</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pid_t</span>    <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_t</span>      <span class="n">WritePthreadId</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">handler</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Error: FATAL: unable to create signal handlers</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">mkfifo</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">,</span> <span class="n">FILE_MODE</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">EEXIST</span><span class="p">))</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span> <span class="s">&quot; Can&#39;t Create FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIFO_ONE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">mkfifo</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">,</span> <span class="n">FILE_MODE</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">errno</span> <span class="o">!=</span> <span class="n">EEXIST</span><span class="p">))</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span> <span class="s">&quot; Can&#39;t Create FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">FIFO_TWO</span><span class="p">);</span>  
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">()</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Fork LNSIP Process Error . </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span> 
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">pid</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">execl</span><span class="p">(</span><span class="s">&quot;./fifoclient&quot;</span><span class="p">,</span> <span class="s">&quot;fifoclient&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">((</span> <span class="n">iWriteFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Can&#39;t Open FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIFO_ONE</span><span class="p">);</span>    
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">iReadFd</span>  <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span><span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Can&#39;t Open FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIFO_TWO</span><span class="p">);</span>    
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_attr_t</span> <span class="n">stAttr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_init</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setdetachstate</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setstacksize</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="mi">500</span><span class="o">*</span><span class="mi">1024</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bPthreadCreateWrong</span> <span class="o">=</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">WritePthreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stAttr</span>
</span><span class='line'>        <span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span> <span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">)</span><span class="n">WriteTask</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">iWriteFd</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">bPthreadCreateWrong</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span>  <span class="s">&quot;Call Init write task failed.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">iRecvLen</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">acFifoBuff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">)</span><span class="o">+</span><span class="n">MAXFIFOSIZE</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>             <span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="n">stIPSMsg</span> <span class="o">=</span> <span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="p">)</span><span class="n">acFifoBuff</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Server Recive Content : %s Length: %d </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">acData</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">lDataLength</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>     <span class="n">close</span><span class="p">(</span><span class="n">iReadFd</span><span class="p">);</span>
</span><span class='line'>     <span class="n">close</span><span class="p">(</span><span class="n">iWriteFd</span><span class="p">);</span>
</span><span class='line'>     <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">);</span>
</span><span class='line'>     <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>子进程只要打开同样的FIFO文件，得到其文件描述符，就可以与父进程通信</p></p></blockquote>

<figure class='code'><figcaption><span>子进程程序实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">iWriteFd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iRecvLen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">acFifoBuff</span><span class="p">[</span><span class="n">MAXFIFOSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pthread_t</span>      <span class="n">WritePthreadId</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span> <span class="n">iReadFd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot; Can&#39;t Open FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIFO_ONE</span><span class="p">);</span> 
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">iWriteFd</span>  <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; Can&#39;t Open FIFO %s.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIFO_TWO</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_attr_t</span> <span class="n">stAttr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_init</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setdetachstate</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">(</span> <span class="kt">void</span> <span class="p">)</span><span class="n">pthread_attr_setstacksize</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">stAttr</span> <span class="p">,</span> <span class="mi">500</span><span class="o">*</span><span class="mi">1024</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">bPthreadCreateWrong</span> <span class="o">=</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">WritePthreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stAttr</span>
</span><span class='line'>        <span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span> <span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">)</span><span class="n">WriteTask</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">iWriteFd</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">bPthreadCreateWrong</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;Call Init write task failed.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">iRecvLen</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">iReadFd</span><span class="p">,</span> <span class="n">acFifoBuff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="p">)</span><span class="o">+</span><span class="n">MAXFIFOSIZE</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="n">stIPSMsg</span> <span class="o">=</span> <span class="p">(</span><span class="n">ST_IPS_MSG</span> <span class="o">*</span> <span class="p">)</span><span class="n">acFifoBuff</span><span class="p">;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Client Recive Content : %s Length: %d </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">acData</span><span class="p">,</span> <span class="n">stIPSMsg</span><span class="o">-&gt;</span><span class="n">lDataLength</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>     <span class="n">close</span><span class="p">(</span><span class="n">iReadFd</span><span class="p">);</span>
</span><span class='line'>     <span class="n">close</span><span class="p">(</span><span class="n">iWriteFd</span><span class="p">);</span>
</span><span class='line'>     <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_ONE</span><span class="p">);</span>
</span><span class='line'>     <span class="n">unlink</span><span class="p">(</span><span class="n">FIFO_TWO</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>3.共享内存（mmap）</strong></p></p></blockquote>

<figure class='code'><figcaption><span>父子进程通过共享内存mmap通信  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/sem.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;semaphore.h&gt;</span>
</span><span class='line'><span class="cp">#define MAXFIFOSIZE  1024</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXLOOP        1024</span>
</span><span class='line'><span class="cp">#define FileName         &quot;/tmp/tempmap&quot;</span>
</span><span class='line'><span class="cp">#define FILE_MODE        (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)</span>
</span><span class='line'>
</span><span class='line'> <span class="k">struct</span> <span class="n">st_Shared</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">sem_t</span> <span class="n">mutex</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">st_Shared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">st_Shared</span> <span class="o">*</span><span class="n">pShared</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">FileName</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span><span class="p">,</span> <span class="n">FILE_MODE</span><span class="p">);</span>
</span><span class='line'>    <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st_Shared</span><span class="p">,</span>  <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">st_Shared</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">pShared</span> <span class="o">=</span><span class="p">(</span><span class="k">struct</span> <span class="n">st_Shared</span><span class="o">*</span><span class="p">)</span><span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">st_Shared</span><span class="p">),</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pShared</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">MAXLOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pShared</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child process count: %d .</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pShared</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>          <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pShared</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAXLOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>         <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pShared</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>     <span class="n">printf</span><span class="p">(</span><span class="s">&quot;father process count: %d .</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pShared</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>     <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>     <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pShared</span><span class="o">-&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Places of Historical Interest]]></title>
    <link href="http://coolbrain.github.com/blog/2013/05/06/places-of-historical-interest/"/>
    <updated>2013-05-06T20:14:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/05/06/places-of-historical-interest</id>
    <content type="html"><![CDATA[<blockquote><p><p>If I have a dream, I should keep and protect it. Don&#8217;t let myself down. The outside world is beatiful, wonderful and unbelievable. Could I always keep hope in my heart? It&#8217;s easy to give up, to walk away; but it&#8217;s hard to stay, live and make things better. Don&#8217;t think about myself. Think about my parents, the people around me. Am I worthy? </p>
<!-- more -->
<p>I want to show some photos to inspire myself. Many great places are waiting me to see.</p>
U.S Congress, the symbol of American democracy
<img src="http://coolbrain.github.com/assets/images/place/U.S_Congress.jpg"  alt="U.S_Congress"/>
Washington Monument
<img src="http://coolbrain.github.com/assets/images/place/Washington_Monument.jpg"  alt="Washington_Monument"/>
Lincoln Memorial. Lincoln is the most respectable president in America. History witnesses this great man. One hundred year later, Martin Luther King gave a great speech 《 I have a dream 》 at this place, 28 August 1963.
<img src="http://coolbrain.github.com/assets/images/place/Lincoln_Memorial.jpg"  alt="Lincoln_Memorial"/>
Golden Gate Brige
<img src="http://coolbrain.github.com/assets/images/place/Golden_Gate_Bridge.jpg"  alt="Golden_Gate_Bridge"/>
Canyonlands Utah. Natural scenary
<img src="http://coolbrain.github.com/assets/images/place/Canyonlands.jpg"  alt="Canyonlands"/>
Maine Coast
<img src="http://coolbrain.github.com/assets/images/place/Maine_coast.jpg"  alt="Maine_coast"/>
River Thames, London
<img src="http://coolbrain.github.com/assets/images/place/River_Thames.jpg"  alt="River_Thames"/>
Millennium Bridge
<img src="http://coolbrain.github.com/assets/images/place/Millennium_Bridge.jpg"  alt="Millennium_Bridge"/>
Buckingham Palace
<img src="http://coolbrain.github.com/assets/images/place/Buckingham_Palace.jpg"  alt="Buckingham_Palace"/>
Standing gaurd, Ancient Egypt
<img src="http://coolbrain.github.com/assets/images/place/Standing_gaurd.jpg"  alt="Standing_gaurd"/>
Temple of Horus
<img src="http://coolbrain.github.com/assets/images/place/Temple_of_Horus.jpg"  alt="Temple_of_Horus"/>
Architectural marvel
<img src="http://coolbrain.github.com/assets/images/place/Architectural_marvel.jpg"  alt="Architectural_marvel"/>
Christ the Redeemer, Brazil
<img src="http://coolbrain.github.com/assets/images/place/Christ_the_Redeemer.jpg"  alt="Christ_the_Redeemer"/>
<p>人生有几多个十年？最紧要要过得痛快。其实很多的话都是meaningless，不会produce any effect，但好像我这样的人，就当作宝了。一个人不meditate，reflect，其实就不算人了，与动物无异。在历史面前，谦卑，景仰和沉思。</p>
<p>希望听起这首背景曲调时，会想起某些事，某些人，谁有能理解谁呢？时代已变，以前想都不敢想的观念，现在已经深入人心，但这个时代也有这时代的局限，让人觉得透不过起来，是啊，假如人不能适应现时代，那就&#8211;闷闷不乐，郁郁寡欢。<a href="http://dabaoku.com/dabaoku/uploads/soft/yinxiao/beijing/166.mp3">金枝欲攀叹调.</a></p>
<p><a href="http://www.nbcnews.com/id/6981409/ns/travel-travel_photos/">Reference Source:traval_photos</a></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Proccessing]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/28/sql-proccessing/"/>
    <updated>2013-04-28T23:45:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/28/sql-proccessing</id>
    <content type="html"><![CDATA[<blockquote><p><p>查询处理步骤：1.语法分析与翻译 2.优化  3.执行 如图：</p>
<p>用于执行一个查询的原语的操作序列称为<strong>查询执行计划</strong>（query-excution plan）或查询计算计划（query-evaluation plan）。查询执行计划引擎（query-execution engine）接受一个查询执行计划，。执行该计划并把结果返回给查询。</p>
<!-- more -->
<img src="http://coolbrain.github.com/assets/images/sqlprocess.jpg" alt="&quot;sqlprocess&quot;" />
<p><strong>SQL运算处理的实现方法：</strong></p>
<p><strong>1.选择运算</strong>（select operation）：<p>
<p>A1（线性搜索） A2（二分搜索） A3（主索引，码属性等值比较） </p>
<p><strong>2.连接运算</strong>(join operation):</p>
<p>1.嵌套循环连接 2.块嵌套循环连接（若连接的结果大小几乎与两个关系的笛卡尔积相当） 3.<strong>索引嵌套循环连接</strong>（若存在索引） 4.<strong>归并连接</strong>（若关系已排序，则归并连接比较可取） 5.<strong>散列连接</strong>（把关系划分多个部分，是每个部分都能被内存所容纳。划分过程是通过连接属性的散列函数来进行，这样，相应的划分对可以独立地进行连接）如图：</p>
<img src="http://coolbrain.github.com/assets/images/hashjoin.jpg" alt="&quot;hashjoin&quot;" />
<p><strong>3.去除重复：</strong>1.归并排序完，将相邻相同的去除，只保留一个 2.建立内存散列索引，只有不在索引的元组才插入；否则，元组被抛弃。</p>
<p><strong>4.集合运算：</strong>(union，intersection，except）</p>
<p>r∪s: 1. 对Hri建立内存散列索引  2.把Hsi中的元组加入散列索引中，条件是该元组不再散列索引中 3.把散列索引中的元组加入结果中</p>
<p>r∩s:  1. 对Hri建立内存散列索引  2.对Hsi的每个元组，检查散列索引，仅当它出现在散列索引中时将元组写到结果中。</p>
<p>r-s:  1. 对Hri建立内存散列索引  2.对Hsi的每个元组，检查散列索引，若它出现在散列索引中则将之从散列索引中删除。 3. 把散列索引中剩余的元组加入结果中 </p>
<p><strong>5.聚集运算:</strong>（min，max，count,avg,group by） 如去除重复，可以用排序和散列的方法。  </p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB VS PostgreSQL]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/28/monetdb-vs-postgresql/"/>
    <updated>2013-04-28T19:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/28/monetdb-vs-postgresql</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB与PostgreSQL数据库的架构比较，虽然它们存储结构有本质的区别，一个以列存储，一个以行存储；一个没有索引，一个有多种类型的索引，B+树索引，Hash索引，GiST索引等。但它们也有很多的类似之处。</p>
<!-- more -->
<p><strong>PostgreSQL的进程结构：</strong></p>
<p>PostgreSQL系统的主要功能都集中于Postgres程序，其入口是Main模块中的main函数，在初始化数据集簇，启动数据库服务器时，都将从这里开始。Main模块主要的工作是确定当前的操作系统平台，并据此做一些平台相关的环境变量设置和初始化。然后通过对命令行参数的判断，将控制转到相应的模块中去。图是PostgreSQL系统主函数main的流程.</p>
<img src="http://coolbrain.github.com/assets/images/PostgresqlProcess.jpg" alt="&quot;postgresqlProcess&quot;" />
<p>PostgreSQL使用一种专用服务器进程体系结构，其中，最主要的两个进程就是守护进程Postmaster和服务进程Postgres。从本质上来说，Postmaster和Postgres都是通过装入Postgres程序而形成的进程，只是在运行时所处的分支不同而已。守护进程Postmaster负责整个系统的启动和关闭。它监听并接受客户端的连接请求，为其分配服务进程Postgres.服务进程Postgres接受并执行客户端发送的命令。它在底层模块（如存储，事务管理，索引等）之上调用各个主要的功能模块（如编译器，优化器，执行器等）(如下图所示），完成客户端的各种数据库操作，并返回执行结果。</p>
<img src="http://coolbrain.github.com/assets/images/postgresql.jpg" alt="&quot;postgresql&quot;" />
<p>PostgreSQL守护进程Postmaster（单用户模式的Postgres进程）除为用户连接请求分配后台Postgres服务进程外，还将启动相关的后台辅助进程。守护进程Postmaster在完成基本环境初始化，创建接受用户请求的监听端口后，顺序启动如下系统辅助进程：SysLogger（系统日志进程）、PsStat（统计数据收集进程）、AutoVacuum（系统自动清理进程）。在守护进程Postmaster进入到循环监听中启动如下进程：BgWriter（后台写进程）、WalWriter（预写式日志写进程），PgArch（预写式日志归档进程）。</p>
<p><strong>守护进程PostMaster：</strong></p>
<p>Postmaster就像一个处理客户端请求的调度中心。当客户端程序需要对数据库进行操作时，首先会发出一个起始消息给Postmaster进行请求。Postmaster将根据这个起始消息中的信息对客户端进行验证，如果身份验证通过，Postmaster就为该客户端新建一个服务进程Postgres。随后Postmaster将与客户端的交互工作转交给Postgres服务进程，由Postgres来完成客户端所需要的数据库操作。</p>
<p>PostgreSQL请求&#8211;响应模型</p>
<img src="http://coolbrain.github.com/assets/images/postmaster.jpg" alt="&quot;postmaster&quot;" />
<p>Postmaster也负责管理整个系统范围的操作，例如中断等操作，Postmaster本身不进行这些操作，它只是指派一个子进程在适当的时间去处理它们。同时它要在数据库崩溃的时候重启系统。Postmaster进程在起始时会建立共享内存和信号库，<strong>Postmaster及其子进程的通信就通过共享内存和信号</strong>来实现。这种多进程设计使得整个系统的稳定性更好，即使某个后台进程崩溃也不会影响系统中其他进程的工作，Postmaster只需要重置共享内存即可从单个后台进程的崩溃中恢复。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memo-based Query Execution]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/26/memo-based-query-execution/"/>
    <updated>2013-04-26T22:57:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/26/memo-based-query-execution</id>
    <content type="html"><![CDATA[<blockquote><p><p>现代以代价为基础的查询优化器使用备忘录结构为一个有效的查询运行计划组织搜索空间。例如，考虑一个oid连接路径‘A.B.C.D’.我们可以在这条路径任何点启动计算。它的备忘录结构可以用一个（大）MAL程序来表示。备忘录的水平用choice运算封装。第二个参数指示哪些指令去被考虑代价计算。</p>
<!-- more --></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">T2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T5:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T2</span><span class="p">);</span>
</span><span class='line'><span class="nl">T6:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T7:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T8:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T4</span><span class="p">,</span><span class="n">T5</span><span class="p">,</span><span class="n">T6</span><span class="p">,</span><span class="n">T7</span><span class="p">,</span><span class="n">T8</span><span class="p">);</span>
</span><span class='line'><span class="nl">T9:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T10:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T5</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T11:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T6</span><span class="p">);</span>
</span><span class='line'><span class="nl">T12:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T7</span><span class="p">);</span>
</span><span class='line'><span class="nl">T13:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="n">T8</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T9</span><span class="p">,</span><span class="n">T10</span><span class="p">,</span><span class="n">T11</span><span class="p">,</span><span class="n">T12</span><span class="p">,</span><span class="n">T13</span><span class="p">);</span>
</span><span class='line'><span class="nl">answer:</span><span class="o">=</span> <span class="n">scheduler</span><span class="p">.</span><span class="n">pick</span><span class="p">(</span><span class="n">T9</span><span class="p">,</span> <span class="n">T10</span><span class="p">,</span> <span class="n">T11</span><span class="p">,</span> <span class="n">T12</span><span class="p">,</span> <span class="n">T13</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>scheduler.choice()操作为每个目标变量调用内置的getVolume且期待一个整数值代价。在这个事例里它返回总共参数使用的字节数。具有最低代价的目标变量被选择运行和剩余的变量被变成临时NOOP操作（你可能想重用备忘录）。它们会被解析器遗漏，同时在接下的调用中被调度器忽略。它减少了替换当我们在计划中处理时。一个内置朴素的代价函数会被使用。使用者可以提供一个私有的代价函数被定义为目标和a :lng结果带有多态参数的模式。它的实现可以使用完全的上下文信息去做决定。如，它可以跟踪在接下的语句中对目标变量的潜在使用去决定总代价当这一步被考虑到最后的结果。</p>
<p>在达到下个选择点前，一个完整计划很可能包含其他表达式去准备或使用目标变量。choice运算的任务是避免不必要的操作。MAL块应该被调用者私有拥有，这样确保了scheduler.isolation()。模式的细化也组成部分计划代价分析。然后你不再需要包含一个固定的代价函数。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Acost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span><span class='line'><span class="nl">Bcost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">Ccost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1cost:</span><span class="o">=</span> <span class="n">Acost</span><span class="o">+</span><span class="n">Bcost</span><span class="p">;</span>
</span><span class='line'><span class="nl">T2cost:</span><span class="o">=</span> <span class="n">Bcost</span><span class="o">+</span><span class="n">Ccost</span><span class="p">;</span>
</span><span class='line'><span class="nl">T3cost:</span><span class="o">=</span> <span class="n">Ccost</span><span class="o">+</span><span class="n">Dcost</span><span class="p">;</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">T1cost</span><span class="p">,</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2cost</span><span class="p">,</span><span class="n">T2</span><span class="p">,</span> <span class="n">T3cost</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">T2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB中RunChoice的实现代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*THe choice operator first searches the next one to identify</span>
</span><span class='line'><span class="cm">  the fragment to be optimized and to gain access to the variables</span>
</span><span class='line'><span class="cm">  without the need to declare them upfront.*/</span>
</span><span class='line'><span class="n">str</span>  <span class="nf">RUNchoice</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'>  <span class="n">lng</span> <span class="n">cost</span><span class="p">,</span> <span class="n">mincost</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">nme</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pc</span> <span class="o">=</span> <span class="n">getPC</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'>  <span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_int</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* choice pairs */</span>
</span><span class='line'>      <span class="n">mincost</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">cost</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&lt;</span> <span class="n">mincost</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">mincost</span> <span class="o">=</span> <span class="n">cost</span><span class="p">;</span>
</span><span class='line'>              <span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">nme</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">str</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/* should be generalized to allow an arbitrary user defined function */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">nme</span><span class="p">,</span> <span class="s">&quot;getVolume&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">throw</span><span class="p">(</span><span class="n">MAL</span><span class="p">,</span> <span class="s">&quot;scheduler.choice&quot;</span><span class="p">,</span> <span class="n">ILLEGAL_ARGUMENT</span> <span class="s">&quot;Illegal cost function&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mincost</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)))</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">InstrPtr</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">cost</span> <span class="o">=</span> <span class="n">getVolume</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&lt;</span> <span class="n">mincost</span> <span class="o">||</span> <span class="n">mincost</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                          <span class="n">mincost</span> <span class="o">=</span> <span class="n">cost</span><span class="p">;</span>
</span><span class='line'>                          <span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_RUN_MEMORUN</span>
</span><span class='line'>  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#function target %s cost %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">target</span><span class="p">),</span> <span class="n">mincost</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="cm">/* remove non-qualifying variables */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">setVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>          <span class="n">setVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">propagateNonTarget</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_RUN_MEMORUN</span>
</span><span class='line'>  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#cost choice selected %s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">target</span><span class="p">),</span> <span class="n">mincost</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printFunction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>1.合并表优化：</strong></p>
<p>一个合并相关表（MAT）描述符定义了一个可兼容BAT的有序的类型集合，它的并代表一个单一（虚）BAT。MAL可能代表一个分区的BAT（看BPM），也可以是一个在一个程序块中临时BATs的任意集合。MAL的定义存在于一个单代码块的范围。MAT优化简单地扩展计划去基于指令的基础上处理它的模块。只有当遇上一个blocking操作时，相关的BAT才会被实例化。当没有被实例化，MAL对象不能作为参数传入到任何函数。简单地说，因为MAL不被类型系统所知道和没有底层的操作意识到它的存在。</p>
<p>在MAL优化器的第一种方法中，我们假设在MAT序列中第一个BAT被使用累加器。进一步，没有语义知识被使用去减少可能无用的连接。然而，我们限制对一个简单参数的扩展。这在后阶段被改变当一个以代价为基础的计算被用于区分不同的。为了说明，考虑：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">m0:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">m1:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">m2:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="n">c0</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">j</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>选择和聚集操作可以使用MAT简单地重写：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">_33</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">_34</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">_35</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">_33</span><span class="p">,</span><span class="n">_34</span><span class="p">,</span><span class="n">_35</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="o">:</span><span class="kt">int</span><span class="p">;</span>
</span><span class='line'><span class="n">_36</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">_33</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">_36</span><span class="p">);</span>
</span><span class='line'><span class="n">_37</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">_34</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">_37</span><span class="p">);</span>
</span><span class='line'><span class="n">_38</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">_35</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">_38</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>print操作还没有MAT语义。它需要一个在调用时不会产生头的函数。然而，在输出前，我们可以打包元素：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">_33</span><span class="p">,</span><span class="n">_34</span><span class="p">,</span><span class="n">_35</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>对于连接，在不知道人和关于组件属性的情况下，我们必须生成所有可能的组合。当前的启发是限制扩展一个简单的参数。这导致：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">_39</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c0</span><span class="p">);</span>
</span><span class='line'><span class="n">_40</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">j</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">_39</span><span class="p">,</span><span class="n">_40</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这模式的不足是在MAL语句中隐藏爆炸。优化器的挑战从对MAT元素的属性的监测中找出最小的。如，在处理前，它可能尝试去部分地打包元素。这是一个运行调度的决定。相反的，在更复杂的程序分析中毕竟系统可以使用MAT迭代器去避免打包.</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">ji:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="n">b</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="n">c</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">ji</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">ji</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="n">c</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="n">b</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">exit</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">exit</span> <span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB合并表优化实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTmergetableImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mat_t</span> <span class="o">*</span><span class="n">mat</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">oldtop</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mtop</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">error</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* the number of MATs is limited to the variable stack*/</span>
</span><span class='line'>  <span class="n">mat</span> <span class="o">=</span> <span class="p">(</span><span class="n">mat_t</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mat_t</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">mat</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">oldtop</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">*</span> <span class="mf">1.2</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span><span class="o">?</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="o">:</span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">*</span> <span class="mf">1.2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">size</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">oldtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">o</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">matRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">packRef</span><span class="p">)){</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat_none</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batcalcRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mark_grpRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">dense_rank_grpRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* Mergetable cannot handle </span>
</span><span class='line'><span class="cm">            order related batcalc operations */</span>
</span><span class='line'>          <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * If the instruction does not contain MAT references it can simply be added.</span>
</span><span class='line'><span class="cm">      * Otherwise we have to decide on either packing them or replacement.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">match</span> <span class="o">=</span> <span class="n">MATcount</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span><span class="o">||</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">propagateMarkProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oid_nil</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="o">||</span>
</span><span class='line'>                     <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="o">||</span>
</span><span class='line'>                         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">propagateBinProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">propagateProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Here we handle horizontal aligned mats. This information is passed using</span>
</span><span class='line'><span class="cm">      * the properties hlb &lt;= x &lt; hub.</span>
</span><span class='line'><span class="cm">      * So if this is available, we can simplify</span>
</span><span class='line'><span class="cm">      * batcalc operations and for fetch joins we can use this information to do</span>
</span><span class='line'><span class="cm">      * per part joins only.</span>
</span><span class='line'><span class="cm">      *</span>
</span><span class='line'><span class="cm">      * Also we should translate the mirror().join() (a groupby attribute) into</span>
</span><span class='line'><span class="cm">      * UNION(mirror().join()).</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* only handle simple joins, ie not range/band joins */</span>
</span><span class='line'>      <span class="cm">/* For range/band joins (argc == 4), the propagation of oids</span>
</span><span class='line'><span class="cm">        is different, ie result-head equals head-1st arg,    </span>
</span><span class='line'><span class="cm">                 result-tail equals head-2nd/3rd arg */</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/* TODO:</span>
</span><span class='line'><span class="cm">        If a value join with mats on both sides fails (ie unknown</span>
</span><span class='line'><span class="cm">        how to handle) we should bail out, ie stop any further</span>
</span><span class='line'><span class="cm">        processing of any mats. This is needed because the needed </span>
</span><span class='line'><span class="cm">        mas-crossproduct handling of projections fails. </span>
</span><span class='line'><span class="cm">                 */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">match</span> <span class="o">&lt;=</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isMatJoinOp</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetajoinRef</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">om</span><span class="p">,</span> <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_none</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>          <span class="n">om</span> <span class="o">=</span> <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">om</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* range join with parts on the right */</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">isProjection</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">m</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">))</span>
</span><span class='line'>              <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_tpn</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">isProjection</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">m</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">))</span>
</span><span class='line'>              <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_rdr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="n">m</span> <span class="o">=</span> <span class="n">mat_join</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>          <span class="cm">/* after topn projection we should merge */</span>
</span><span class='line'>          <span class="cm">/* slice marks the end of a sequence of topn&#39;s */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_tpn</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">sliceRef</span> <span class="o">||</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_slc</span><span class="p">))</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_tpn</span> <span class="o">&amp;&amp;</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_topn_project</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* after sort projection we should mat.merge */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_rdr</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_rdr</span> <span class="o">&amp;&amp;</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort_project</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/* all map operations assume aligned bats */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">all_mats_and_aligned</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">isMapOp</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_map</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="n">n</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_union</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="o">&amp;&amp;</span> <span class="n">match</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kdifferenceRef</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">+=</span> <span class="n">mat_setop</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Now we handle group, derive and aggregation statements.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">groupRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">doneRef</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mi1</span> <span class="o">||</span> <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/* group on finished group is fine */</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="cm">/* two phase group.new on group result */</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_group_new</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">groupRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deriveRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">doneRef</span> <span class="p">)</span>
</span><span class='line'><span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">o</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      
</span><span class='line'>          <span class="cm">/* Found a derive after an aggr statement (distinct). */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_group_derive</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">aggrRef</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">countRef</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">count_no_nilRef</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">prodRef</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">o</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mat_group_aggr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">)){</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/* median */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">aggrRef</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Aggregate handling is a prime target for optimization.</span>
</span><span class='line'><span class="cm">      * The simple cases are dealt with first.</span>
</span><span class='line'><span class="cm">      * Handle the rewrite v:=aggr.count(b) and sum()</span>
</span><span class='line'><span class="cm">      * And the min/max is as easy</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">aggrRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">countRef</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">count_no_nilRef</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">prodRef</span><span class="p">))</span> <span class="o">||</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">tuniqueRef</span><span class="p">))</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mat_aggr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">isTopn</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">isSlice</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">isTopn</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">n</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/* TODO: grp before sorting, isn&#39;t handled */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span><span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_grp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">assert</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">);</span> <span class="cm">/* should be packed */</span>
</span><span class='line'>          <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="cm">/*mat_is_orderby(mat[n].type) &amp;&amp;*/</span>
</span><span class='line'>          <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_sort2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">resultSetRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * The slice operation can also be piggy backed onto the mat.pack using it</span>
</span><span class='line'><span class="cm">      * as a property of the MAT. Pushing it through</span>
</span><span class='line'><span class="cm">      * would be feasible as well, provided the start of the slice is a constant 0.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sliceRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="p">(</span><span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/* inject new mat.pack() operation */</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="n">MATpackAll</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/* rename mat.pack() to mat.slice() */</span>
</span><span class='line'>          <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">sliceRef</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/* insert bounds from algebra.slice() into mat.slice() */</span>
</span><span class='line'>          <span class="cm">/* (setArgument() seems to shift the remaining arguments,</span>
</span><span class='line'><span class="cm">          *  i.e., insert a new argument, not overwrite an existing one) */</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="n">setArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>          <span class="n">q</span> <span class="o">=</span> <span class="n">setArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>          <span class="cm">/* reuse result variable of algebra.slice() for mat.slice() */</span>
</span><span class='line'>          <span class="cm">/* (we do not explicitly keep, and thus drop, the original algebra.slice()) */</span>
</span><span class='line'>          <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * The mark operators are a special case of apply on parts as we need to</span>
</span><span class='line'><span class="cm">      * correct the mark base oid&#39;s</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">InstrPtr</span> <span class="n">mark</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>          <span class="n">mark</span> <span class="o">=</span> <span class="n">mat_mark</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>          <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">mark</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">useMatType</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Pack MAT arguments, except one, to limit plan explosion.</span>
</span><span class='line'><span class="cm">      * The preferred partitioned one is the first argment as it</span>
</span><span class='line'><span class="cm">      * often reflects a base table.</span>
</span><span class='line'><span class="cm">      * Look at the depth of the MAT definition to limit the explosion.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">fm</span><span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">fm</span><span class="o">&gt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="p">;</span> <span class="n">fm</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Not all instructions can be replaced by the sequence. We have to</span>
</span><span class='line'><span class="cm">      * group them and check for them individually.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">isDiffOp</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">fm</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">InstrPtr</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">=</span> <span class="n">mat_apply1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat_none</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">mat_update</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">isFragmentGroup</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">pack_mirror</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">InstrPtr</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;# %s.%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mirrorRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_grp</span><span class="cm">/* &amp;&amp; mat[m].mm */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">assert</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>              <span class="n">pack_mirror</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">group_broken</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">,</span> <span class="n">pack_mirror</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">=</span> <span class="n">mat_apply1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>              <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">useMatType</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* packed group should include the mirror statement */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">pack_mirror</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mv1</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>  <span class="p">{</span>
</span><span class='line'>                  <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">mat</span><span class="p">[</span><span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">type</span> <span class="o">=</span> <span class="n">mat_grp</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                  <span class="n">mat</span><span class="p">[</span><span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">type</span> <span class="o">=</span> <span class="n">mat_ext</span><span class="p">;</span>
</span><span class='line'>              <span class="n">mat_pack_group</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * All other instructions should be checked for remaining MAT dependencies.</span>
</span><span class='line'><span class="cm">      * It requires MAT materialization.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;# %s.%s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">match</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">MATpackAll2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mtop</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>          <span class="n">propagateProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * @-</span>
</span><span class='line'><span class="cm">  * As a final optimization, we could remove the mal.new definitions,</span>
</span><span class='line'><span class="cm">  * because they are not needed for the execution.</span>
</span><span class='line'><span class="cm">  * For the time being, they are no-ops.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="n">chkTypes</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">nspace</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">OPTDEBUGmergetable</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span><span class="s">&quot;#Result of multi table optimizer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">optimizerCheck</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span><span class="s">&quot;merge test&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printFunction</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nl">fail:</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">error</span> <span class="o">||</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span><span class="p">){</span>
</span><span class='line'>      <span class="n">actions</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">OPTDEBUGmergetable</span>
</span><span class='line'>          <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;## %s.%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">oldtop</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">InstrPtr</span> <span class="n">p</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">matRef</span> <span class="o">&amp;&amp;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span><span class="p">){</span>
</span><span class='line'>              <span class="cm">/* simply drop this function, for the base binding is available */</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">=</span> <span class="n">NOOPsymbol</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span><span class="s">&quot;Result of multi table optimizer FAILED</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_mergetable: %d merge actions</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pushed</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span> <span class="o">&amp;&amp;</span> <span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span> <span class="o">&amp;&amp;</span> <span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">mat</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>2.多道编译优化：</strong></p>
<p>MonetDB 操作多道概念是中轴的简单运用任何标量的函数的元素在一个容器里。任何操作CMD和它的多道转变【CMD】一起出现。给出CMD(T1，..,Tn)的标记：TR，它可以被使用同时【CMD】(bat[:any 1,:T1],&#8230;,bat[any 1,Tn]) :bat[any 1,Tr]。多道的语义在所有Bat值参数执行定位连接和对匹配的元组的每个组合执行CMD。所有的结果被收集在一个结果的BAT。所有但除一个参数外可能会被一个标量值替换。对多道操作通用的解决方案是把它们翻译成MAL循环。一个片段关于其行为：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span><span class="o">:=</span> <span class="n">mal</span><span class="p">.</span><span class="n">multiplex</span><span class="p">(</span><span class="s">&quot;calc.+&quot;</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">multiplex</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><P>当前的实现需要目标类型要被清晰地被提到。由优化器产生的结果：<p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">_8</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="p">(</span><span class="n">_11</span><span class="p">,</span><span class="n">_12</span><span class="p">,</span><span class="n">_13</span><span class="p">)</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="n">_15</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">_13</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">_8</span><span class="p">,</span><span class="n">_12</span><span class="p">,</span><span class="n">_15</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="p">(</span><span class="n">_11</span><span class="p">,</span><span class="n">_12</span><span class="p">,</span><span class="n">_13</span><span class="p">)</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">hasMoreElements</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="n">exit</span> <span class="p">(</span><span class="n">_11</span><span class="p">,</span><span class="n">_12</span><span class="p">,</span><span class="n">_13</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="n">_8</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB多道优化的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTmultiplexImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">msg</span><span class="o">=</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">msg</span> <span class="o">==</span> <span class="n">MAL_SUCCEED</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">malRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">multiplexRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">msg</span> <span class="o">=</span> <span class="n">OPTexpandMultiplex</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">msg</span><span class="o">==</span> <span class="n">MAL_SUCCEED</span><span class="p">){</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_multiplex: %d expansions</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#mal program: %d MAL instr %d vars (&quot;</span> <span class="n">SZFMT</span> <span class="s">&quot; K)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">,</span>
</span><span class='line'>      <span class="p">((</span><span class="k">sizeof</span><span class="p">(</span> <span class="n">MalBlkRecord</span><span class="p">)</span> <span class="o">+</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrRecord</span><span class="p">)</span><span class="o">+</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">VarRecord</span><span class="p">)</span> <span class="o">+</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vsize</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">VarPtr</span><span class="p">)</span><span class="o">+</span><span class="mi">1023</span><span class="p">)</span><span class="o">/</span><span class="mi">1024</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span><span class="p">){</span>
</span><span class='line'>      <span class="cm">/* rollback */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span><span class="o">?</span> <span class="mi">0</span><span class="o">:</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>3.BAT分区优化</strong></p>
<p>在老的PC地址空间受限和分布的存储的需要使BATs理想地被看重作为更小的BATs的并集，在给定有限的内存中处理。带有支持性的bat分区库bmp的PARTITION()优化器用可适配的数据库分段算法解决这问题。它被递增地设计带有一个中心是支持SQL front-end。特别是，被考虑的操作被限制为MAL的子集。一个在这集合外面的操作的出现终止优化器的活动。OPTIMIZER.PARTITIONS()操作寻找SQL列BAT的绑定和为了使用分区版本而准备代码。</p>
<p>我们使用两种是吸纳。第一种尝试寻找线性依赖数据的片段和在其构造一个迭代器。这种方法有些棘手，因为你必须对特殊的情况进行关照。特别是，在顺序构建操作的语义造成一些问题。navie（）方法简单地看自个儿的操作和用迭代器围绕它们。一个别名的表被保留用来重用和探测已经分区的操作符。不足之处一个分区的BAT潜伏要读几次【这取决于变量可计算的重使用】和中间的读写。实验应该指明一个优化的一个。</p>
<p><strong>4.窥孔优化</strong></p>
<p>递归下降查询器很容易对产生更好的代码错失机会，因为有限的上下文被保留或向前看可用。窥孔优化器在这样递归的模式下建立和对优化器的‘错误’补救。窥孔模式的集合随着时间增长和front-end详细的变化应该可以预见。SQL frontend 严重依赖于一个中轴的生成oid序列的表。不幸的是，这是不能被看见和模式’$i := calc.oid(0@0); $j:= algebra.markT($k,$i);经常发生。这可以被’$j:= algebra.markT($k)’替换。另一个产生2-way指令序列例子是’$j:= algebra.markT($k); $l:= bat.reverse($j);’,这都可以用’$l:= algebra.markH($k);’替换。</p>
<p>reverse-reverse 操作也落入这个目录。相反的pairs 可能起因于front-end编译器的处理模式或者其它优化器步骤的副影响。这样的相反对应该越快去除越好，这样可以减小找到另外优化机会的复杂度。因所有的情况下我们应该保证被丢掉的中间结果不会被用于其他用途。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">r:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">o:</span><span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="mi">0</span><span class="err">@</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nl">z:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markT</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'><span class="nl">rr:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="n">t</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">peephole</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这被窥孔优化器转化为：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">r:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">rr</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>5.查询执行计划</strong></p>
<p>一个普遍使用的数据结构去表示和操作一个查询是树(或图）。它的节点表示操作符和叶子表示操作数。这样的视图随手拈来当你要重组整块代码或者去建立一个从底到上建立优化计划，如使用备忘录结构。MAL优化器工具箱提供函数用树（图）结构覆盖任何的MAL块和线性化回MAL块。线性化顺序被一个递归调用的从支撑点遍历树的决定。为了说明，考虑下列代码块：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//T1:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T2:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T3:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T4:= bat.new(:int,:int);</span>
</span><span class='line'><span class="nl">a:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">d:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">e:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">f:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="nl">h:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">dumpQEP</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这产生一个目的查询计划的结构</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">h</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="n">e</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="n">T1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="n">T3</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>      <span class="n">b</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="n">T2</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>      <span class="n">d</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>          <span class="n">T4</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>任何有效的MAL任务都可以被基于流依赖的树或图结构的视图覆盖，但不是所有的MAL程序都可以从一棵简单的树继承。如，上面的程序块片段被解释为线性的序列不能被表示除非执行指令自身成为操作符节点。然而，因为我们没有增加或者改变根源的MAL程序，qep.progagate任务产生原有的先行次序有优先级的程序。如果，然而，我们进入树的新的指令，它们会被放置到邻近的其它树的节点。对块的流控制给予特殊的关照，因为产生一个查询计划块不是很容易就能环绕。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB dumpQEP的实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* The core of the work is focused on building the tree using a flow analysis. </span>
</span><span class='line'><span class="cm"> * Building the tree means that we should not allow the same variable can not be used twice.*/</span>
</span><span class='line'><span class="cp">#define LEAFNODE 2</span>
</span><span class='line'><span class="cp">#define TOPNODE 3</span>
</span><span class='line'><span class="k">static</span> <span class="n">QEP</span>
</span><span class='line'><span class="nf">QEPbuilt</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">){</span>
</span><span class='line'>  <span class="n">QEP</span> <span class="n">qroot</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">vq</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="o">*</span><span class="n">status</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">vq</span><span class="o">=</span> <span class="p">(</span><span class="n">QEP</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">QEP</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">vq</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">status</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">vq</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">status</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">vq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">q</span><span class="o">=</span> <span class="n">QEPnewNode</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span> <span class="n">LEAFNODE</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">QEPappend</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span>   <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>          <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span> <span class="n">TOPNODE</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cm">/* We may end up with multiple variables not yet bound to a QEP. */</span>
</span><span class='line'>  <span class="n">qroot</span><span class="o">=</span> <span class="n">QEPnew</span><span class="p">(</span><span class="n">MAXPARENT</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="p">){</span>
</span><span class='line'>          <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">QEPnewNode</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">==</span> <span class="n">TOPNODE</span><span class="p">){</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)];</span>
</span><span class='line'>          <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>          <span class="n">QEPappend</span><span class="p">(</span><span class="n">qroot</span><span class="p">,</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">vq</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">qroot</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* It may be handy to dump the graph for inspection</span>
</span><span class='line'><span class="cm"> * or to prepare for the dot program.*/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">QEPdump</span><span class="p">(</span><span class="n">stream</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="n">QEP</span> <span class="n">qep</span><span class="p">,</span> <span class="kt">int</span> <span class="n">indent</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">inc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">qep</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">indent</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">s</span><span class="o">=</span> <span class="n">instruction2str</span><span class="p">(</span><span class="n">qep</span><span class="o">-&gt;</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="n">qep</span><span class="o">-&gt;</span><span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_STMT</span> <span class="o">|</span> <span class="n">LIST_MAPI</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>      <span class="n">inc</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">qep</span><span class="o">-&gt;</span><span class="n">climit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">qep</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>      <span class="n">QEPdump</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">qep</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">indent</span><span class="o">+</span> <span class="n">inc</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">OPTdumpQEPImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">){</span>
</span><span class='line'>  <span class="n">QEP</span> <span class="n">qep</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">qep</span><span class="o">=</span> <span class="n">QEPbuilt</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="n">QEPdump</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="n">qep</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>6.范围传播 </strong></p>
<p>几乎所有的查询对表中的几个段有兴趣。如果用视图表示，查询计划经常含有对同一个列的选择。它们可能也修补了从碎片标准来的参数。 PUSHRANGES优化器的目的是最小化对表的范围的扫描。除非指令被移出计划。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">s1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nl">s2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">95</span><span class="p">);</span>
</span><span class='line'><span class="nl">s3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="n">nil</span><span class="p">);</span>
</span><span class='line'><span class="nl">s4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s3</span><span class="p">,</span><span class="n">nil</span><span class="p">,</span><span class="mi">75</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">pushranges</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这么长的序列可以被压缩成一条：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">s1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>从同一源码对两个范围的选择的并集可能是一个目标：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">t1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nl">t2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">t3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="k">union</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>会变为：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">t3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB范围传播的优化代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTpushrangesImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span><span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">range</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">range</span><span class="o">=</span> <span class="p">(</span><span class="n">Range</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RangeRec</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">range</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">OPTDEBUGpushranges</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#Range select optimizer started</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* In phase I we collect information about constants*/</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span> <span class="cm">/* end of optimizer */</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">used</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastrange</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastrange</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">uselectRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * The operation X:= algebra.select(Y,L,H,Li,Hi) is analysed.</span>
</span><span class='line'><span class="cm">          * First, we attempt to propagate the range known for Y onto the</span>
</span><span class='line'><span class="cm">          * requested range of X. This may lead to smaller range of</span>
</span><span class='line'><span class="cm">          * even the conclusion that X is necessarily empty.</span>
</span><span class='line'><span class="cm">          * Of course, only under the condition that Y has not been changed by a</span>
</span><span class='line'><span class="cm">          * side-effect since it was bound to X.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span> <span class="o">&amp;&amp;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>              <span class="cm">/* merge lowerbound */</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span><span class="p">)),</span>
</span><span class='line'>                      <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">z</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                      <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastupdate</span> <span class="o">==</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastrange</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>              <span class="cm">/* merge higherbound */</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span><span class="p">)),</span>
</span><span class='line'>                      <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>                  <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)),</span>
</span><span class='line'>                       <span class="n">ATOMnilptr</span><span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">z</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastupdate</span> <span class="o">==</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastrange</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * The second step is to assign the result of this exercise to the</span>
</span><span class='line'><span class="cm">          * result variable.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastrange</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>              <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastrange</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * If both range bounds are constant, we can also detect empty results.</span>
</span><span class='line'><span class="cm">          * It is empty if L&gt; H or when L=H and the bounds are !(true,true).</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>          <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>  <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>  <span class="p">){</span>
</span><span class='line'>              <span class="n">z</span> <span class="o">=</span><span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">x</span><span class="p">)),</span>
</span><span class='line'>                        <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)));</span>
</span><span class='line'>              <span class="n">x</span><span class="o">=</span>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>              <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>              <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>              <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">btval</span><span class="p">;</span>
</span><span class='line'>              <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">btval</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">z</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">z</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">&gt;</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">wrd</span> <span class="n">zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">ValRecord</span> <span class="n">v</span><span class="p">,</span> <span class="o">*</span><span class="n">vp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">vp</span> <span class="o">=</span> <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="n">TYPE_wrd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">zero</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">varSetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">rowsProp</span><span class="p">,</span> <span class="n">op_eq</span><span class="p">,</span> <span class="n">vp</span><span class="p">);</span>
</span><span class='line'>                  <span class="cm">/* create an empty replacement */</span>
</span><span class='line'>                  <span class="n">x</span> <span class="o">=</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span> <span class="n">batRef</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span> <span class="n">newRef</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
</span><span class='line'>                  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">OPTDEBUGpushranges</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">used</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">printRange</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Phase II, if we succeeded in pushing constants around and</span>
</span><span class='line'><span class="cm">  * changing instructions, we might as well try once more to perform</span>
</span><span class='line'><span class="cm">  * aliasRemoval, constantExpression, and pushranges.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">range</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>7.循环再生器</strong></p>
<p>在现有的数据库系统中查询优化和处理经常仍集中在各自的查询。查询分开地被分析和和内核赛跑不管并行或之前的调用提供的机遇。这种方法远离最优和两个方向被发现可以改善：物理化视图和（部分）结果集重使用。物理化视图从查询日志中继承。它们代表公共的子查询，其物理化改善接下来查询时间。重用部分结果被用于放大或导航应用处于危急关头的情况。循环再生优化器和模块扩展这with a middle out approach.它们利用MonetDB的materialize-all-intermediate方法来决定保留它们只要被认为有利。</p>
<p>采用的方法是在MAL程序中使用recycler优化器调用标记指令，以至它们的结果被保留在一个全局的再生寄宿于MAL解析器的缓冲。指令受Recycler管制如果至少它其中一个参数是BAT和其他不是常数或者变量，且在Recycler已知。在运行的时候，在没有代价下，Recycler被MAL解析器最里层的循环调用去检查一个更新的会被保留的结果。否则，它计算指令和调用policy functions去决定是否这值得保留。</p>
<p>Recycler有几个policy控制操作在具体的设置下实验它的效果。retain policy控制什么时候保留结果，reuse policy照看具体复制的指令或者使用语义知识在MAL指令去探测潜在的使用（例如，重用select 结果）。最后，cache policy照管中间结果pool的存储空间。具体的细节在重用模块描述：</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB Recycler代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/** The variables are all checked for being eligible as a variable</span>
</span><span class='line'><span class="cm"> * subject to recycling control. A variable may only be assigned</span>
</span><span class='line'><span class="cm"> * a value once. The target function is a sql.bind(-,-,-,0) or all arguments</span>
</span><span class='line'><span class="cm"> * are already recycle enabled or constant.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The arguments of a function call cannot be recycled.</span>
</span><span class='line'><span class="cm"> * They change with each call. This does not mean</span>
</span><span class='line'><span class="cm"> * that the instructions using them can not be a</span>
</span><span class='line'><span class="cm"> * target of recycling.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Just looking at a target result kept is not good enough.</span>
</span><span class='line'><span class="cm"> * You have to sure that the arguments are also the same.</span>
</span><span class='line'><span class="cm"> * This rules out function arguments.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The recycler is targeted towards a read-only database.</span>
</span><span class='line'><span class="cm"> * The best effect is obtained for a single-user mode (sql_debug=32 )</span>
</span><span class='line'><span class="cm"> * when the delta-bats are not processed which allows longer instruction</span>
</span><span class='line'><span class="cm"> * chains to be recycled.</span>
</span><span class='line'><span class="cm"> * Update statements are not recycled. They trigger cleaning of</span>
</span><span class='line'><span class="cm"> * the recycle cache at the end of the query. Only intermediates</span>
</span><span class='line'><span class="cm"> * derived from the updated columns are invalidated.</span>
</span><span class='line'><span class="cm"> * Separate update instructions in queries, such as bat.append implementing &#39;OR&#39;,</span>
</span><span class='line'><span class="cm"> * are monitored and also trigger cleaning the cache.*/</span>
</span><span class='line'><span class="cp">#include &quot;monetdb_config.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opt_recycler.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;mal_instruction.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">lng</span> <span class="n">recycleSeq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="cm">/* should become part of MAL block basics */</span>
</span><span class='line'><span class="k">static</span> <span class="n">bte</span> <span class="n">baseTableMode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="cm">/* only recycle base tables */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">OPTrecyclerImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">marks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">delta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">updstmt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">recycled</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">app_sc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ValRecord</span> <span class="n">cst</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">affectedRowsRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">exportOperationRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">updateRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deleteRef</span><span class="p">))</span>
</span><span class='line'>          <span class="n">updstmt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* watch out, newly created instructions may introduce new variables */</span>
</span><span class='line'>  <span class="n">recycled</span> <span class="o">=</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">recycled</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">recycled</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">recid</span> <span class="o">=</span> <span class="n">recycleSeq</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* create a handle for recycler */</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;prelude&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">in</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">recycleRef</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*don&#39;t inline recycle instr. */</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/*  update instructions are not recycled but monitored*/</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_bat</span>
</span><span class='line'>                   <span class="o">||</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(</span><span class="n">app_sc</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">else</span>
</span><span class='line'>                          <span class="n">app_sc</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cst</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">delta</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">c</span> <span class="o">=</span> <span class="n">defConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">updateRef</span><span class="p">)</span>
</span><span class='line'>                      <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/* take care of SQL catalog update instructions */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">catalogRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">tp</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getVarValue</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">tp</span> <span class="o">==</span> <span class="mi">22</span> <span class="o">||</span> <span class="n">tp</span> <span class="o">==</span> <span class="mi">25</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">delta</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cst</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">delta</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">c</span> <span class="o">=</span> <span class="n">defConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">tp</span> <span class="o">==</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'>                      <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">             if (updstmt &amp;&amp; app_sc &gt;= 0) {</span>
</span><span class='line'><span class="cm">                 q = newFcnCall(mb, &quot;recycle&quot;, &quot;reset&quot;);</span>
</span><span class='line'><span class="cm">                 pushArgument(mb, q, app_sc);</span>
</span><span class='line'><span class="cm">                 pushArgument(mb, q, app_tbl);</span>
</span><span class='line'><span class="cm">             }</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;epilogue&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">CMDcall</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* never save a barrier unless it is a command and side-effect free */</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* don&#39;t change instructions in update statements */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">updstmt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* skip simple assignments */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">octopusRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">bindidxRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>          <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/* During base table recycling skip marking instructions other than octopus.bind */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">baseTableMode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* general rule: all arguments are constants or recycled,</span>
</span><span class='line'><span class="cm">        ignore C pointer arguments from mvc */</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)]</span> <span class="o">||</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
</span><span class='line'>                  <span class="o">||</span> <span class="n">ignoreVar</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)))</span>
</span><span class='line'>              <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">-</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">OPTDEBUGrecycle</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#recycle instruction</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span> <span class="cm">/* this instruction is to be monitored */</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * The expected gain is largest if we can re-use selections</span>
</span><span class='line'><span class="cm">      * on the base tables in SQL. These, however, are marked as</span>
</span><span class='line'><span class="cm">      * uselect() calls, which only produce the oid head.</span>
</span><span class='line'><span class="cm">      * For cheap types we preselect using select() and re-map uselect() back</span>
</span><span class='line'><span class="cm">      * over this temporary.</span>
</span><span class='line'><span class="cm">      * For the time being for all possible selects encountered</span>
</span><span class='line'><span class="cm">      * are marked for re-use.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="cm">/* take care of semantic driven recyling */</span>
</span><span class='line'>      <span class="cm">/* for selections check the bat argument only</span>
</span><span class='line'><span class="cm">        the range is often template parameter*/</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">antiuselectRef</span> <span class="o">||</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeselectRef</span> <span class="o">||</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeRef</span> <span class="o">||</span>
</span><span class='line'>                  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetaselectRef</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>          <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetauselectRef</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&amp;&amp;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ATOMvarsized</span><span class="p">(</span><span class="n">getGDKType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">q</span> <span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_any</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">selectRef</span><span class="p">);</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                  <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">thetaselectRef</span><span class="p">);</span>
</span><span class='line'>              <span class="n">q</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>              <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>              <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">projectRef</span><span class="p">);</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>          <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">pcreRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">&amp;&amp;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">)])</span> <span class="o">||</span>
</span><span class='line'>              <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">&amp;&amp;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>              <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeuselectRef</span> <span class="o">&amp;&amp;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">q</span> <span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_any</span><span class="p">);</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">likeselectRef</span><span class="p">);</span>
</span><span class='line'>              <span class="n">q</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>              <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>              <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">projectRef</span><span class="p">);</span>
</span><span class='line'>              <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">algebraRef</span><span class="p">);</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>              <span class="n">marks</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * The sql.bind instructions should be handled carefully</span>
</span><span class='line'><span class="cm">      * The delete and update BATs should not be recycled,</span>
</span><span class='line'><span class="cm">      * because they may lead to view dependencies that later interferes</span>
</span><span class='line'><span class="cm">      * with the transaction commits.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="cm">/* enable recycling of delta-bats</span>
</span><span class='line'><span class="cm">     if (getModuleId(p) == sqlRef &amp;&amp;</span>
</span><span class='line'><span class="cm">             (((getFunctionId(p) == bindRef || getFunctionId(p) == putName(&quot;bind_idxbat&quot;, 11)) &amp;&amp;</span>
</span><span class='line'><span class="cm">               getVarConstant(mb, getArg(p, 5)).val.ival != 0) ||</span>
</span><span class='line'><span class="cm">              getFunctionId(p) == binddbatRef)) {</span>
</span><span class='line'><span class="cm">         recycled[getArg(p, 0)] = 0;</span>
</span><span class='line'><span class="cm">         p-&gt;recycle = REC_NO_INTEREST;</span>
</span><span class='line'><span class="cm">     }</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The sql.bind instructions should be handled carefully</span>
</span><span class='line'><span class="cm"> * The delete and update BATs should not be recycled,</span>
</span><span class='line'><span class="cm"> * because they may lead to view dependencies that later interferes</span>
</span><span class='line'><span class="cm"> * with the transaction commits.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/* enable recycling of delta-bats</span>
</span><span class='line'><span class="cm">     if (getModuleId(p)== sqlRef &amp;&amp; </span>
</span><span class='line'><span class="cm">         (((getFunctionId(p)==bindRef || getFunctionId(p) == putName(&quot;bind_idxbat&quot;,11)) &amp;&amp; </span>
</span><span class='line'><span class="cm">             getVarConstant(mb, getArg(p,5)).val.ival != 0) ||</span>
</span><span class='line'><span class="cm">             getFunctionId(p)== binddbatRef) ) {</span>
</span><span class='line'><span class="cm">             recycled[getArg(p,0)]=0;</span>
</span><span class='line'><span class="cm">             p-&gt;recycle = REC_NO_INTEREST; </span>
</span><span class='line'><span class="cm">         }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">recycled</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">marks</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span> <span class="o">+</span> <span class="n">marks</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Reference]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/26/sql-reference/"/>
    <updated>2013-04-26T21:46:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/26/sql-reference</id>
    <content type="html"><![CDATA[<blockquote><p><p>如果编译原理学得不错的话，根据sql的文法就可以写个程序来解析了,最简单的莫过于自顶向下递归解析。</p>
<p>sql数据定义:表定义，更改语句，删除语句和模式定义</p>
<!-- more --></p></blockquote>

<figure class='code'><figcaption><span>sql创建语句  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">create_statement</span><span class="p">:</span>
</span><span class='line'> <span class="k">create</span> <span class="err">{</span><span class="n">role_def</span> <span class="o">|</span> <span class="n">table_def</span> <span class="o">|</span> <span class="n">view_def</span> <span class="o">|</span> <span class="n">type_def</span> <span class="o">|</span> <span class="n">func_def</span> <span class="o">|</span> <span class="n">index_def</span> <span class="o">|</span> <span class="n">trigger_def</span> <span class="o">|</span> <span class="n">sequence_def</span><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表定义的文法  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">table_def</span><span class="p">:</span>
</span><span class='line'>  <span class="k">CREATE</span> <span class="p">[</span> <span class="k">TEMPORARY</span> <span class="o">|</span> <span class="k">LOCAL</span> <span class="k">TEMPORARY</span> <span class="o">|</span> <span class="k">GLOBAL</span> <span class="k">TEMPORARY</span> <span class="p">]</span> <span class="k">TABLE</span> <span class="k">table_name</span><span class="s1">&#39;(&#39;</span> <span class="n">table_content_source</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="p">[</span> <span class="k">ON</span> <span class="k">COMMIT</span> <span class="k">DELETE</span> <span class="k">ROWS</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">COMMIT</span> <span class="k">PRESERVE</span> <span class="k">ROWS</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">COMMIT</span> <span class="k">DROP</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_content_source</span><span class="p">:</span>
</span><span class='line'>   <span class="n">table_element</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="o">|</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="k">AS</span> <span class="n">select_query</span> <span class="p">[</span><span class="k">WITH</span> <span class="k">NO</span> <span class="k">DATA</span> <span class="o">|</span> <span class="k">WITH</span> <span class="k">DATA</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_element</span><span class="p">:</span>
</span><span class='line'>    <span class="k">column_name</span> <span class="n">data_type</span> <span class="p">[</span><span class="n">column_option</span> <span class="p">...]</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">CONSTRAINT</span> <span class="k">constraint_name</span> <span class="n">table_constraint_type</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">column_name</span> <span class="k">WITH</span> <span class="k">OPTIONS</span> <span class="s1">&#39;(&#39;</span> <span class="n">column_option</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">LIKE</span> <span class="k">table_name</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">column_name</span> <span class="nb">SERIAL</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">column_name</span> <span class="n">BIGSERIAL</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_constraint_type</span><span class="p">:</span>
</span><span class='line'>    <span class="k">UNIQUE</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="k">REFERENCES</span> <span class="k">table_name</span> <span class="p">[</span><span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span><span class="p">]</span> <span class="p">[</span> <span class="n">match_options</span> <span class="p">]</span> <span class="p">[</span> <span class="n">ref_actions</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">column_option</span><span class="p">:</span>
</span><span class='line'>    <span class="k">DEFAULT</span> <span class="n">default_value</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span> <span class="k">constraint_name</span> <span class="p">]</span> <span class="n">column_constraint_type</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">GENERATED</span> <span class="n">ALWAYS</span> <span class="k">AS</span> <span class="k">IDENTITY</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="n">serial_parameters</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">AUTO_INCREMENT</span>
</span><span class='line'>
</span><span class='line'><span class="n">column_constraint_type</span><span class="p">:</span>
</span><span class='line'>    <span class="k">NOT</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">UNIQUE</span> <span class="o">|</span> <span class="k">PRIMARY</span> <span class="k">KEY</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">REFERENCES</span> <span class="k">table_name</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span> <span class="p">[</span> <span class="n">match_options</span> <span class="p">]</span> <span class="p">[</span> <span class="n">ref_actions</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">serial_parameters</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span><span class="k">START</span> <span class="k">WITH</span> <span class="n">nonzero</span><span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="k">RESTART</span> <span class="o">|</span> <span class="k">RESTART</span> <span class="k">WITH</span> <span class="n">subquery</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">RESTART</span> <span class="k">WITH</span> <span class="n">nonzero</span><span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="k">INCREMENT</span> <span class="k">BY</span> <span class="n">nonzero</span><span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="k">MINVALUE</span> <span class="n">nonzero</span> <span class="o">|</span> <span class="n">NOMINVALUE</span><span class="p">]</span> <span class="o">|</span> <span class="p">[</span><span class="k">MAXVALUE</span> <span class="n">nonzero</span> <span class="o">|</span> <span class="n">NOMAXVALUE</span> <span class="p">]</span> <span class="o">|</span> <span class="p">[</span><span class="k">CACHE</span> <span class="n">nonzero</span> <span class="p">]</span> <span class="o">|</span> <span class="p">[</span><span class="k">CYCLE</span> <span class="o">|</span> <span class="n">NONCYCLE</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">match_options</span><span class="p">:</span>
</span><span class='line'>    <span class="k">MATCH</span> <span class="err">{</span> <span class="k">FULL</span> <span class="o">|</span> <span class="k">PARTIAL</span> <span class="o">|</span> <span class="k">SIMPLE</span> <span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ref_actions</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ON</span> <span class="k">UPDATE</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="err">{</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="err">}</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="err">{</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="err">}</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表的标识列  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="k">table_name</span> <span class="n">table_content_source</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_content_source</span><span class="p">:</span>
</span><span class='line'>    <span class="s1">&#39;(&#39;</span> <span class="n">table_element</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span><span class="p">]</span> <span class="k">AS</span> <span class="n">select_query</span> <span class="p">[</span><span class="k">WITH</span> <span class="k">NO</span> <span class="k">DATA</span> <span class="o">|</span> <span class="k">WITH</span> <span class="k">DATA</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_element</span><span class="p">:</span>
</span><span class='line'>     <span class="k">column_name</span> <span class="n">data_type</span> <span class="p">[</span> <span class="n">column_option</span> <span class="p">...]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">column_name</span> <span class="k">WITH</span> <span class="k">OPTIONS</span> <span class="s1">&#39;(&#39;</span> <span class="n">column_option</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">column_option</span><span class="p">:</span>
</span><span class='line'>     <span class="k">DEFAULT</span> <span class="n">default_value</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">GENERATED</span> <span class="n">ALWAYS</span> <span class="k">AS</span> <span class="k">IDENTITY</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="n">serial_parameters</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">AUTO_INCREMENT</span>
</span><span class='line'>
</span><span class='line'><span class="n">serial_parameters</span><span class="p">:</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">START</span> <span class="k">WITH</span> <span class="n">nonzero</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span> <span class="k">RESTART</span> <span class="o">|</span> <span class="k">RESTART</span> <span class="k">WITH</span> <span class="n">subquery</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">RESTART</span> <span class="k">WITH</span> <span class="n">nonzero</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span><span class="k">INCREMENT</span> <span class="k">BY</span> <span class="n">nonzero</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span><span class="k">MINVALUE</span> <span class="n">nonzero</span> <span class="o">|</span> <span class="n">NOMINVALUE</span><span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span><span class="k">MAXVALUE</span> <span class="n">nonzero</span> <span class="o">|</span> <span class="n">NOMAXVALUE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span><span class="k">CACHE</span> <span class="n">nonzero</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="p">[</span><span class="k">CYCLE</span> <span class="o">|</span> <span class="n">NONCYCLE</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表的限制  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="k">table_name</span> <span class="n">table_content_source</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_content_source</span><span class="p">:</span>
</span><span class='line'>   <span class="s1">&#39;(&#39;</span>  <span class="n">table_element</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span>  <span class="s1">&#39;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_element</span><span class="p">:</span>
</span><span class='line'>     <span class="k">column_name</span> <span class="n">data_type</span> <span class="p">[</span> <span class="n">column_option</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">CONSTRAINT</span> <span class="k">constraint_name</span> <span class="n">table_constraint_type</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">column_name</span> <span class="k">WITH</span> <span class="k">OPTIONS</span> <span class="p">(</span> <span class="n">column_option</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">table_constraint_type</span><span class="p">:</span>
</span><span class='line'>     <span class="k">UNIQUE</span> <span class="p">(</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...)</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span>  <span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span>  <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="k">REFERENCES</span> <span class="k">table_name</span>
</span><span class='line'>   <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span><span class="p">]</span> <span class="p">[</span> <span class="n">match_options</span> <span class="p">]</span> <span class="p">[</span> <span class="n">ref_actions</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">column_option</span><span class="p">:</span>
</span><span class='line'>   <span class="p">[</span> <span class="k">constraint_name</span> <span class="p">]</span> <span class="n">column_constraint_type</span>
</span><span class='line'>
</span><span class='line'><span class="n">column_constraint_type</span><span class="p">:</span>
</span><span class='line'>     <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">UNIQUE</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">PRIMARY</span> <span class="k">KEY</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">REFERENCES</span> <span class="k">table_name</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span> <span class="p">]</span> <span class="p">[</span><span class="n">match_options</span><span class="p">]</span> <span class="p">[</span> <span class="n">ref_actions</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">match_options</span><span class="p">:</span>
</span><span class='line'>     <span class="k">MATCH</span> <span class="err">{</span> <span class="k">FULL</span> <span class="o">|</span> <span class="k">PARTIAL</span> <span class="o">|</span> <span class="k">SIMPLE</span> <span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ref_actions</span><span class="p">:</span>
</span><span class='line'>     <span class="k">ON</span> <span class="k">UPDATE</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>   <span class="o">|</span> <span class="err">{</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="err">}</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span><span class='line'>   <span class="o">|</span> <span class="err">{</span> <span class="k">ON</span> <span class="k">UPDATE</span> <span class="o">|</span> <span class="k">ON</span> <span class="k">DELETE</span> <span class="err">}</span> <span class="err">{</span> <span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="n">CASCASDE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql创建表索引  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">index_def</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">UNIQUE</span> <span class="o">|</span> <span class="n">CLUSTERED</span> <span class="p">]</span> <span class="k">INDEX</span> <span class="n">ident</span> <span class="k">ON</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="n">ident</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">CLUSTER</span> <span class="n">ident</span> <span class="k">ON</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="n">ident</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="err">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql创建表的视图  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">view_def</span><span class="p">:</span> <span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">view_name</span> <span class="p">[</span><span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span><span class="p">]</span> <span class="k">AS</span> <span class="n">select_query</span> <span class="p">[</span><span class="k">WITH</span> <span class="k">CHECK</span> <span class="k">OPTION</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql更改语句  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">alter_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">qname</span> <span class="k">ADD</span> <span class="p">[</span> <span class="k">COLUMN</span> <span class="p">]</span> <span class="n">add_table_element</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">qname</span> <span class="k">ALTER</span> <span class="n">alter_table_element</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">qname</span> <span class="k">DROP</span> <span class="n">drop_table_element</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">qname</span> <span class="k">SET</span> <span class="k">READ</span> <span class="k">ONLY</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="n">ident</span> <span class="n">passwd_schema</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="n">ident</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="k">SET</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">ENCRYPTED</span> <span class="o">|</span> <span class="k">UNENCRYPTED</span> <span class="p">]</span> <span class="n">PASSWORD</span> <span class="n">string</span> <span class="k">USING</span> <span class="k">OLD</span> <span class="n">PASSWORD</span> <span class="n">string</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="n">SEQUENCE</span> <span class="n">name</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">RESTART</span> <span class="p">[</span> <span class="k">WITH</span> <span class="p">[</span> <span class="n">poslng</span> <span class="o">|</span> <span class="n">subqeury</span> <span class="p">]</span> <span class="p">]</span> <span class="p">]</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">INCREMENT</span> <span class="k">BY</span> <span class="n">nonzerolng</span> <span class="p">]</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">MINVALUE</span> <span class="n">nonzerolng</span> <span class="o">|</span> <span class="k">NO</span> <span class="k">MINVALUE</span> <span class="p">]</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">MAXVALUE</span> <span class="n">nonzerolng</span> <span class="o">|</span> <span class="k">NO</span> <span class="k">MAXVALUE</span> <span class="p">]</span>
</span><span class='line'>     <span class="p">[</span> <span class="k">CACHE</span> <span class="n">nonzerolng</span> <span class="p">]</span>
</span><span class='line'>     <span class="p">[</span> <span class="p">[</span> <span class="k">NO</span> <span class="p">]</span> <span class="k">CYCLE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ALTER</span> <span class="n">SEQUENCE</span> <span class="n">qname</span> <span class="n">opt_alt_seq_params</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">alter_table_element</span><span class="p">:</span> <span class="p">[</span> <span class="k">COLUMN</span> <span class="p">]</span> <span class="n">ident</span> <span class="k">SET</span> <span class="p">[</span> <span class="k">NOT</span> <span class="p">]</span> <span class="k">NULL</span> <span class="o">|</span> <span class="p">[</span> <span class="k">COLUMN</span> <span class="p">]</span> <span class="n">ident</span> <span class="k">SET</span> <span class="k">DEFAULT</span> <span class="p">[</span> <span class="n">default_value</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">drop_table_element</span><span class="p">:</span> <span class="p">[</span> <span class="k">COLUMN</span> <span class="p">]</span> <span class="n">ident</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span> <span class="o">|</span> <span class="k">CONSTRAINT</span> <span class="n">ident</span> <span class="n">drop_action</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">constraint_type</span><span class="p">:</span>
</span><span class='line'>     <span class="k">UNIQUE</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span><span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span><span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">FOREIGN</span> <span class="k">KEY</span> <span class="s1">&#39;(&#39;</span><span class="k">column_name</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span><span class="s1">&#39;)&#39;</span> <span class="n">PEFERENCES</span> <span class="k">table_name</span> <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="k">column_name</span><span class="s1">&#39;,&#39;</span><span class="p">...</span><span class="s1">&#39;)&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">[</span><span class="k">MATCH</span> <span class="p">[</span> <span class="k">FULL</span> <span class="o">|</span> <span class="k">PARTIAL</span> <span class="o">|</span> <span class="k">SIMPLE</span> <span class="p">]</span> <span class="p">]</span> <span class="p">[</span> <span class="n">ref_action</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">CHECK</span> <span class="s1">&#39;(&#39;</span> <span class="n">search_condition</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ref_action</span><span class="p">:</span> <span class="k">ON</span> <span class="err">{</span><span class="k">DELETE</span> <span class="o">|</span> <span class="k">UPDATE</span><span class="err">}</span> <span class="err">{</span><span class="k">NO</span> <span class="n">ACTION</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="o">|</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">SET</span> <span class="k">DEFAULT</span><span class="err">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">passwd_schema</span><span class="p">:</span> <span class="k">SET</span> <span class="k">SCHEMA</span> <span class="n">ident</span> <span class="o">|</span> <span class="k">WITH</span> <span class="p">[</span> <span class="k">ENCRYPTED</span> <span class="o">|</span> <span class="k">UNENCRYPTED</span> <span class="p">]</span> <span class="n">PASSWORD</span> <span class="n">string</span> <span class="p">[</span> <span class="k">SET</span> <span class="k">SCHEMA</span> <span class="n">ident</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql删除语句  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">drop_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">qname</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">FUNCTION</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">data_type</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">PROCEDURE</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">data_type</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">ALL</span> <span class="k">FUNCTION</span> <span class="n">qname</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">ALL</span> <span class="k">PROCEDURE</span> <span class="n">qname</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">VIEW</span> <span class="n">qname</span> <span class="p">[</span> <span class="k">RESTRICT</span> <span class="o">|</span> <span class="k">CASCADE</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">ROLE</span> <span class="n">qname</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">USER</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">INDEX</span> <span class="n">qname</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">CLUSTER</span> <span class="n">qname</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="k">TRIGGER</span> <span class="n">qname</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DROP</span> <span class="n">SEQUENCE</span> <span class="n">qname</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql创建模式  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">schema</span><span class="p">:</span>
</span><span class='line'>   <span class="k">CREATE</span> <span class="k">SCHEMA</span> <span class="n">schema_name_clause</span>
</span><span class='line'>  <span class="p">[</span> <span class="k">DEFAULT</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">ident</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">PATH</span> <span class="k">schema_name</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">schema_element</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'><span class="o">|</span> <span class="k">DROP</span> <span class="k">SCHEMA</span> <span class="n">qname</span> <span class="n">drop_action</span>
</span><span class='line'>
</span><span class='line'><span class="n">schema_name_clause</span><span class="p">:</span> <span class="n">ident</span> <span class="o">|</span> <span class="p">[</span> <span class="n">ident</span> <span class="p">]</span> <span class="k">AUTHORIZATION</span>
</span><span class='line'>
</span><span class='line'><span class="n">ident</span> <span class="n">schema_element</span><span class="p">:</span> <span class="k">grant</span> <span class="o">|</span> <span class="k">revoke</span> <span class="o">|</span> <span class="n">create_statement</span> <span class="o">|</span> <span class="n">drop_statement</span> <span class="o">|</span> <span class="n">alter_statement</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql用户验证  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">user_stmt</span><span class="p">:</span>
</span><span class='line'>    <span class="k">CREATE</span> <span class="k">USER</span> <span class="ss">&quot;user_name&quot;</span> <span class="k">WITH</span> <span class="n">PASSWORD</span> <span class="s1">&#39;user_password&#39;</span> <span class="n">NAME</span> <span class="s1">&#39;name&#39;</span> <span class="k">SCHEMA</span> <span class="ss">&quot;schema_name&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="ss">&quot;user_name&quot;</span> <span class="p">[</span> <span class="k">WITH</span> <span class="p">[</span> <span class="k">ENCRYPTED</span> <span class="o">|</span> <span class="n">UNENCRYPYED</span> <span class="p">]</span> <span class="n">PASSWORD</span> <span class="s1">&#39;user_password&#39;</span> <span class="p">]</span>  <span class="p">[</span> <span class="k">SET</span> <span class="k">SCHEMA</span> <span class="ss">&quot;new_schema_name&quot;</span> <span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="k">SET</span> <span class="p">[</span> <span class="k">ENCRYPTED</span> <span class="o">|</span> <span class="n">UNENCRYPYED</span> <span class="p">]</span> <span class="n">PASSWORD</span> <span class="s1">&#39;new_password&#39;</span> <span class="k">USING</span> <span class="k">OLD</span> <span class="n">PASSWORD</span> <span class="s1">&#39;cur_password&#39;</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">DROP</span> <span class="k">USER</span> <span class="ss">&quot;user_name&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="ss">&quot;user_name&quot;</span> <span class="k">RENAME</span> <span class="k">TO</span> <span class="ss">&quot;new_user_name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql角色  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">role_def</span><span class="p">:</span>
</span><span class='line'>    <span class="k">ROLE</span> <span class="n">qname</span> <span class="p">[</span> <span class="k">WITH</span> <span class="k">ADMIN</span> <span class="n">grantor</span> <span class="p">]</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">USER</span> <span class="n">ident</span> <span class="k">WITH</span> <span class="p">[</span> <span class="k">ENCRYPTED</span> <span class="o">|</span> <span class="k">UNENCRYPTED</span> <span class="p">]</span> <span class="n">PASSWORD</span> <span class="n">string</span> <span class="n">NAME</span> <span class="n">string</span> <span class="k">SCHEMA</span> <span class="n">ident</span>
</span><span class='line'>
</span><span class='line'><span class="n">grantor</span><span class="p">:</span> <span class="k">CURRENT_USER</span> <span class="o">|</span> <span class="k">CURRENT_ROLE</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql授权  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">grant</span><span class="p">:</span>
</span><span class='line'>    <span class="k">GRANT</span> <span class="k">privileges</span> <span class="k">TO</span> <span class="n">grantees</span> <span class="p">[</span> <span class="k">WITH</span> <span class="k">GRANT</span> <span class="k">OPTION</span> <span class="p">]</span> <span class="p">[</span> <span class="k">WITH</span> <span class="k">ADMIN</span> <span class="n">grantor</span> <span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">GRANT</span> <span class="n">authid_list</span> <span class="k">TO</span> <span class="n">grantees</span> <span class="p">[</span> <span class="k">WITH</span> <span class="k">ADMIN</span> <span class="k">OPTION</span> <span class="p">]</span> <span class="p">[</span> <span class="k">WITH</span> <span class="k">ADMIN</span> <span class="n">grantor</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">revoke</span><span class="p">:</span>
</span><span class='line'>    <span class="k">REVOKE</span> <span class="p">[</span> <span class="k">GRANT</span> <span class="k">OPTION</span> <span class="k">FOR</span> <span class="p">]</span> <span class="k">privileges</span> <span class="k">FROM</span> <span class="n">grantees</span> <span class="p">[</span> <span class="k">FROM</span> <span class="n">grantor</span> <span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">REVOKE</span> <span class="p">[</span> <span class="k">ADMIN</span> <span class="k">OPTION</span> <span class="k">FOR</span> <span class="p">]</span> <span class="n">authid</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="k">FROM</span> <span class="n">grantees</span> <span class="p">[</span> <span class="k">FROM</span> <span class="n">grantor</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">grantor</span><span class="p">:</span> <span class="k">CURRENT_USER</span> <span class="o">|</span> <span class="k">CURRENT_ROLE</span>
</span><span class='line'>
</span><span class='line'><span class="k">privileges</span><span class="p">:</span> <span class="n">object_privileges</span> <span class="k">ON</span> <span class="k">TABLE</span> <span class="p">[</span> <span class="n">ident</span> <span class="o">|</span> <span class="n">ident</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">object_privileges</span><span class="p">:</span> <span class="k">ALL</span> <span class="p">[</span> <span class="k">PRIVILEGES</span> <span class="p">]</span> <span class="o">|</span> <span class="k">operation</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">operation</span><span class="p">:</span> <span class="k">INSERT</span> <span class="o">|</span> <span class="k">DELETE</span> <span class="o">|</span> <span class="p">[</span> <span class="k">UPDATE</span> <span class="o">|</span> <span class="k">SELECT</span> <span class="o">|</span> <span class="k">REFERENCES</span> <span class="p">]</span> <span class="n">opt_column_list</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">EXECUTE</span> <span class="n">grantees</span><span class="p">:</span> <span class="p">[</span> <span class="k">PUBLIC</span> <span class="o">|</span> <span class="n">authid</span> <span class="p">]</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>数据操作：1.表更新 2.表操作 3.批量输入输出</p></p></blockquote>

<figure class='code'><figcaption><span>sql表更新  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span> <span class="p">[</span> <span class="k">VALUES</span> <span class="s1">&#39;(&#39;</span><span class="n">value_expression</span><span class="s1">&#39;,&#39;</span><span class="p">...</span><span class="s1">&#39;)&#39;</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="o">|</span> <span class="n">select_query</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">UPDATE</span> <span class="k">table_name</span> <span class="k">SET</span> <span class="k">assignment</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">[</span><span class="k">WHERE</span> <span class="n">search_condition</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">assignment</span> <span class="p">:</span> <span class="k">column_name</span> <span class="s1">&#39;=&#39;</span>  <span class="p">(</span> <span class="n">scalar_exp</span>  <span class="o">|</span> <span class="n">search_condition</span> <span class="o">|</span> <span class="k">NULL</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="k">table_name</span> <span class="p">[</span><span class="k">WHERE</span> <span class="n">search_condition</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表join操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">table_reference</span><span class="p">:</span> <span class="n">simple_table</span>
</span><span class='line'>    <span class="o">|</span> <span class="s1">&#39;(&#39;</span> <span class="n">select_query</span> <span class="s1">&#39;)&#39;</span> <span class="p">[</span><span class="k">AS</span><span class="p">]</span> <span class="k">table_name</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="s1">&#39;(&#39;</span> <span class="n">select_query</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">joined_table</span> <span class="o">|</span> <span class="s1">&#39;(&#39;</span> <span class="n">joined_table</span> <span class="s1">&#39;)&#39;</span> <span class="p">[</span><span class="k">AS</span><span class="p">]</span> <span class="k">table_name</span> <span class="p">[</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">joined_table</span><span class="p">:</span> <span class="s1">&#39;(&#39;</span> <span class="n">joined_table</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">table_reference</span> <span class="err">{</span> <span class="k">CROSS</span> <span class="o">|</span> <span class="k">NATURAL</span> <span class="err">}</span> <span class="k">JOIN</span> <span class="n">table_reference</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">table_reference</span> <span class="err">{</span> <span class="k">JOIN</span> <span class="o">|</span> <span class="n">UNIONJOIN</span><span class="err">}</span> <span class="n">table_reference</span> <span class="n">join_spec</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">table_reference</span> <span class="n">join_type</span> <span class="k">JOIN</span> <span class="n">table_reference</span> <span class="n">join_spec</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">table_reference</span> <span class="k">NATURAL</span> <span class="n">join_type</span> <span class="k">JOIN</span> <span class="n">table_reference</span>
</span><span class='line'>
</span><span class='line'><span class="n">join_spec</span> <span class="p">:</span> <span class="k">ON</span> <span class="n">search_condition</span> <span class="o">|</span> <span class="k">USING</span> <span class="s1">&#39;(colunm_name &#39;</span><span class="p">,</span><span class="s1">&#39; ...&#39;</span> <span class="p">)</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">join_type</span><span class="p">:</span> <span class="k">INNER</span> <span class="o">|</span> <span class="err">{</span> <span class="k">LEFT</span> <span class="o">|</span> <span class="k">RIGHT</span> <span class="o">|</span> <span class="k">FULL</span> <span class="err">}</span> <span class="p">[</span><span class="k">OUTER</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表select操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">select_query</span><span class="p">:</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="p">[</span> <span class="k">ALL</span> <span class="o">|</span> <span class="k">DISTINCT</span> <span class="p">]</span>  <span class="p">(</span> <span class="s1">&#39;*&#39;</span> <span class="o">|</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">)</span> <span class="p">[</span> <span class="k">INTO</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">FROM</span> <span class="k">table_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">WHERE</span> <span class="n">search_condition</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">HAVING</span> <span class="n">search_condition</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ordering_spec</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">[</span> <span class="k">LIMIT</span> <span class="n">posint</span> <span class="p">]</span> <span class="p">[</span> <span class="k">OFFSET</span> <span class="n">posint</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表with操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">with_clause</span> <span class="p">:</span>  <span class="k">WITH</span> <span class="n">with_element</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="n">select_query</span>
</span><span class='line'>
</span><span class='line'><span class="n">with_element</span><span class="p">:</span> <span class="k">table_name</span> <span class="s1">&#39;(&#39;</span> <span class="k">column_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="k">AS</span> <span class="s1">&#39;(&#39;</span> <span class="n">select_query</span> <span class="s1">&#39;)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表各种其他类型的操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">predicate</span><span class="p">:</span>
</span><span class='line'>    <span class="n">comparison_predicate</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">between_predicate</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">like_predicate</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">test_for_null</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">in_predicate</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">all_or_any_predicate</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">existence_test</span>
</span><span class='line'>    <span class="o">|</span> <span class="s1">&#39;(&#39;</span> <span class="n">predicate</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">comparison_predicate</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pred_expr</span> <span class="n">COMPARISON</span> <span class="n">pred_expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">pred_expr</span> <span class="o">=</span> <span class="n">pred_exp</span> <span class="n">between_predicate</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pred_expr</span> <span class="p">[</span><span class="k">NOT</span><span class="p">]</span> <span class="k">BETWEEN</span> <span class="p">[</span><span class="k">SYMMETRIC</span> <span class="o">|</span> <span class="k">ASYMMETRIC</span><span class="p">]</span> <span class="n">pred_expr</span> <span class="k">AND</span> <span class="n">pred_expr</span> <span class="n">like_predicate</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pred_expr</span> <span class="p">[</span><span class="k">NOT</span><span class="p">]</span> <span class="k">LIKE</span> <span class="n">atom_expr</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_for_null</span><span class="p">:</span>
</span><span class='line'>    <span class="k">column_name</span> <span class="k">IS</span> <span class="p">[</span><span class="k">NOT</span><span class="p">]</span> <span class="k">NULL</span>
</span><span class='line'>
</span><span class='line'><span class="n">in_predicate</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pred_expr</span> <span class="p">[</span><span class="k">NOT</span><span class="p">]</span> <span class="k">IN</span> <span class="s1">&#39;(&#39;</span> <span class="n">element_name</span> <span class="s1">&#39;,&#39;</span> <span class="p">...</span> <span class="s1">&#39;)&#39;</span> <span class="n">all_or_any_predicate</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">pred_expr</span> <span class="n">COMPARISON</span> <span class="err">{</span> <span class="k">ANY</span> <span class="o">|</span> <span class="k">ALL</span> <span class="o">|</span> <span class="k">SOME</span> <span class="err">}</span> <span class="n">subquery</span>
</span><span class='line'>
</span><span class='line'><span class="n">existence_test</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span><span class="k">NOT</span><span class="p">]</span> <span class="k">EXISTS</span> <span class="n">subquery</span> <span class="n">pred_expr</span><span class="p">:</span>
</span><span class='line'>    <span class="n">scalar_expr</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">predicate</span>
</span><span class='line'>
</span><span class='line'><span class="n">atom_expr</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="p">]</span> <span class="n">atom</span> <span class="p">[</span><span class="s1">&#39;)&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="p">]</span> <span class="n">atom</span> <span class="p">[</span><span class="s1">&#39;)&#39;</span><span class="p">]</span> <span class="k">ESCAPE</span> <span class="n">string</span>
</span><span class='line'>    <span class="o">|</span> <span class="s1">&#39;?&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql表string类型的操作  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">string_funcs</span><span class="p">:</span>
</span><span class='line'>      <span class="k">SUBSTRING</span> <span class="p">(</span> <span class="n">scalar_expr</span> <span class="k">FROM</span> <span class="n">scalar_expr</span> <span class="k">FOR</span> <span class="n">scalar_expr</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">SUBSTRING</span> <span class="s1">&#39;(&#39;</span> <span class="n">scalar_expr</span> <span class="s1">&#39;,&#39;</span> <span class="n">scalar_expr</span> <span class="s1">&#39;,&#39;</span> <span class="n">scalar_expr</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">SUBSTRING</span> <span class="s1">&#39;(&#39;</span> <span class="n">scalar_exprFROM</span> <span class="n">scalar_expr</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">SUBSTRING</span> <span class="s1">&#39;(&#39;</span> <span class="n">scalar_expr</span> <span class="s1">&#39;,&#39;</span> <span class="n">scalar_expr</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">SUBSTRING</span> <span class="s1">&#39;(&#39;</span> <span class="n">scalar_expr</span> <span class="n">int_value</span> <span class="n">scalar_expr</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">scalar_expr</span> <span class="s1">&#39;||&#39;</span> <span class="n">scalar_expr</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql过程定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">func_def</span><span class="p">:</span>
</span><span class='line'>     <span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">paramlist</span><span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="k">EXTERNAL</span> <span class="n">NAME</span> <span class="n">external_function_name</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">CREATE</span> <span class="k">PROCEDURE</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">paramlist</span><span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="n">routine_body</span>
</span><span class='line'><span class="n">routine_body</span><span class="p">:</span>
</span><span class='line'>      <span class="n">procedure_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">BEGIN</span> <span class="n">procedure_statement_list</span> <span class="k">END</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">BEGIN</span> <span class="k">ATOMIC</span> <span class="n">procedure_statement_list</span> <span class="k">END</span>
</span><span class='line'>
</span><span class='line'><span class="n">procedure_statement</span><span class="p">:</span>
</span><span class='line'>       <span class="n">transaction_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">update_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">schema</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">grant</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">revoke</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">create_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">drop_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">alter_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">declare_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">set_statement</span>
</span><span class='line'>     <span class="o">|</span> <span class="n">control_statement</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>sql程序模块定义：1.过程定义 2.函数定义 3.触发器定义 4.变量定义 5.控制流</p></p></blockquote>

<figure class='code'><figcaption><span>sql函数定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">unc_def</span><span class="p">:</span>
</span><span class='line'>     <span class="k">FUNCTION</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">paramlist</span><span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="k">RETURNS</span> <span class="n">func_data_type</span> <span class="k">EXTERNAL</span> <span class="n">NAME</span> <span class="n">external_function_name</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">FUNCTION</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">paramlist</span> <span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="k">RETURNS</span> <span class="n">func_data_type</span> <span class="n">routine_body</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">AGGREGATE</span> <span class="n">qname</span> <span class="s1">&#39;(&#39;</span> <span class="p">[</span> <span class="n">paramlist</span> <span class="p">]</span> <span class="s1">&#39;)&#39;</span> <span class="k">RETURNS</span> <span class="n">func_data_type</span> <span class="k">EXTERNAL</span> <span class="n">NAME</span> <span class="n">external_function_name</span>
</span><span class='line'>
</span><span class='line'><span class="n">func_data_type</span><span class="p">:</span>
</span><span class='line'>      <span class="k">TABLE</span> <span class="s1">&#39;(&#39;</span> <span class="k">column</span> <span class="n">data_type</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">data_type</span> <span class="n">type_def</span><span class="p">:</span> <span class="k">TYPE</span> <span class="n">qname</span> <span class="k">EXTERNAL</span> <span class="n">NAME</span> <span class="n">ident</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql触发器定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">trigger_def</span><span class="p">:</span> <span class="k">TRIGGER</span> <span class="n">qname</span> <span class="n">trigger_action_time</span> <span class="n">trigger_event</span> <span class="k">ON</span> <span class="n">ident</span> <span class="n">opt_referencing_list</span> <span class="n">triggered_action</span>
</span><span class='line'>
</span><span class='line'><span class="n">trigger_action_time</span><span class="p">:</span> <span class="k">BEFORE</span> <span class="o">|</span> <span class="k">AFTER</span>
</span><span class='line'>
</span><span class='line'><span class="n">trigger_event</span><span class="p">:</span> <span class="k">INSERT</span> <span class="o">|</span> <span class="k">DELETE</span> <span class="o">|</span> <span class="k">UPDATE</span> <span class="o">|</span> <span class="k">UPDATE</span> <span class="k">OF</span> <span class="n">ident</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">opt_referencing_list</span><span class="p">:</span> <span class="p">[</span> <span class="k">REFERENCING</span> <span class="n">old_or_new_values_alias</span> <span class="p">...</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">old_or_new_values_alias</span><span class="p">:</span>
</span><span class='line'>      <span class="k">OLD</span> <span class="p">[</span> <span class="k">ROW</span> <span class="p">]</span> <span class="p">[</span> <span class="k">AS</span> <span class="p">]</span> <span class="n">ident</span> <span class="o">|</span> <span class="k">NEW</span> <span class="p">[</span> <span class="k">ROW</span> <span class="p">]</span> <span class="p">[</span> <span class="k">AS</span> <span class="p">]</span> <span class="n">ident</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">OLD</span> <span class="k">TABLE</span> <span class="p">[</span> <span class="k">AS</span> <span class="p">]</span> <span class="n">ident</span> <span class="o">|</span> <span class="k">NEW</span> <span class="k">TABLE</span> <span class="p">[</span> <span class="k">AS</span> <span class="p">]</span> <span class="n">ident</span>
</span><span class='line'>
</span><span class='line'><span class="n">triggered_action</span><span class="p">:</span> <span class="n">opt_for_each</span>  <span class="p">[</span> <span class="k">WHEN</span> <span class="n">search_condition</span> <span class="p">]</span> <span class="n">triggered_statement</span>
</span><span class='line'>
</span><span class='line'><span class="n">opt_for_each</span><span class="p">:</span> <span class="cm">/*default for each statement*/</span> <span class="o">|</span> <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span> <span class="o">|</span> <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">STATEMENT</span>
</span><span class='line'>
</span><span class='line'><span class="n">triggered_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="n">trigger_procedure_statement</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">BEGIN</span> <span class="k">ATOMIC</span> <span class="n">trigger_procedure_statement_list</span> <span class="k">END</span>
</span><span class='line'>
</span><span class='line'><span class="n">trigger_procedure_statement</span><span class="p">:</span> <span class="n">transaction_statement</span> <span class="o">|</span> <span class="n">update_statement</span> <span class="o">|</span> <span class="k">grant</span> <span class="o">|</span> <span class="k">revoke</span> <span class="o">|</span> <span class="n">declare_statement</span> <span class="o">|</span> <span class="n">set_statement</span> <span class="o">|</span> <span class="n">control_statement</span> <span class="o">|</span> <span class="n">select_statement_single_row</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql变量定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">declare_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="k">DECLARE</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">DECLARE</span> <span class="n">table_def</span>
</span><span class='line'>
</span><span class='line'><span class="n">variable_list</span><span class="p">:</span>
</span><span class='line'>     <span class="n">ident</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="n">data_type</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">variable_list</span> <span class="s1">&#39;,&#39;</span> <span class="n">ident</span> <span class="s1">&#39;,&#39;</span><span class="p">...</span> <span class="n">data_type</span>
</span><span class='line'>
</span><span class='line'><span class="n">set_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="k">SET</span> <span class="n">ident</span> <span class="s1">&#39;=&#39;</span> <span class="n">simple_atom</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="k">SESSION</span> <span class="k">AUTHORIZATION</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="k">SCHEMA</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="k">user</span> <span class="s1">&#39;=&#39;</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="k">ROLE</span> <span class="n">ident</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="n">TIME</span> <span class="k">ZONE</span> <span class="k">LOCAL</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">SET</span> <span class="n">TIME</span> <span class="k">ZONE</span> <span class="n">interval_expression</span>
</span><span class='line'>
</span><span class='line'><span class="k">user</span><span class="p">:</span> <span class="p">[</span> <span class="k">USER</span> <span class="o">|</span> <span class="k">SESSION_USER</span> <span class="o">|</span> <span class="k">CURRENT_USER</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>sql控制流  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">control_statement</span><span class="p">:</span>
</span><span class='line'>     <span class="k">CALL</span> <span class="n">func_ref</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">CALL</span> <span class="k">routine_name</span> <span class="s1">&#39;(&#39;</span> <span class="n">argument_list</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">while_statement</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">if_statement</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">case_statement</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">RETURN</span> <span class="n">return_value</span>
</span><span class='line'>
</span><span class='line'><span class="n">case_statement</span><span class="p">:</span>
</span><span class='line'>    <span class="k">CASE</span> <span class="n">scalar_exp</span> <span class="n">when_statement</span><span class="p">...</span> <span class="p">[</span> <span class="k">ELSE</span> <span class="n">procedure_statement_list</span> <span class="p">]</span> <span class="k">END</span> <span class="k">CASE</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">CASE</span> <span class="n">when_search_statement</span><span class="p">...</span> <span class="p">[</span> <span class="k">ELSE</span> <span class="n">procedure_statement_list</span> <span class="p">]</span> <span class="k">END</span> <span class="k">CASE</span>
</span><span class='line'>
</span><span class='line'><span class="n">when_statement</span><span class="p">:</span> <span class="k">WHEN</span> <span class="n">scalar_exp</span> <span class="k">THEN</span> <span class="n">procedure_statement_list</span>
</span><span class='line'>
</span><span class='line'><span class="n">when_search_statement</span><span class="p">:</span> <span class="k">WHEN</span> <span class="n">search_condition</span> <span class="k">THEN</span> <span class="n">procedure_statement_list</span>
</span><span class='line'>
</span><span class='line'><span class="n">if_statement</span><span class="p">:</span> <span class="n">IF</span> <span class="n">search_condition</span> <span class="k">THEN</span> <span class="n">procedure_statement_list</span> <span class="n">if_opt_else</span> <span class="k">END</span> <span class="n">IF</span>
</span><span class='line'>
</span><span class='line'><span class="n">if_opt_else</span><span class="p">:</span>
</span><span class='line'>      <span class="cm">/* empty */</span>
</span><span class='line'>   <span class="o">|</span> <span class="k">ELSE</span> <span class="n">procedure_statement_list</span>
</span><span class='line'>   <span class="o">|</span> <span class="n">ELSEIF</span> <span class="n">search_condition</span> <span class="k">THEN</span> <span class="n">procedure_statement_list</span> <span class="n">if_opt_else</span>
</span><span class='line'>
</span><span class='line'><span class="n">while_statement</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span> <span class="n">ident</span> <span class="s1">&#39;:&#39;</span> <span class="p">]</span> <span class="n">WHILE</span> <span class="n">search_condition</span> <span class="k">DO</span> <span class="n">procedure_statement_list</span> <span class="k">END</span> <span class="n">WHILE</span> <span class="p">[</span> <span class="n">ident</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">return_statement</span><span class="p">:</span> <span class="k">RETURN</span> <span class="n">return_value</span>
</span><span class='line'>
</span><span class='line'><span class="n">return_value</span><span class="p">:</span>
</span><span class='line'>      <span class="n">select_no_parens_orderby</span>
</span><span class='line'>    <span class="o">|</span> <span class="n">search_condition</span>
</span><span class='line'>    <span class="o">|</span> <span class="k">TABLE</span> <span class="s1">&#39;(&#39;</span> <span class="n">select_no_parens_orderby</span> <span class="s1">&#39;)&#39;</span> <span class="o">|</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>SQL标准定义了三种弱一致性级别以及一致性的可串行化级别。违反可串行性的三种现象：不可重复读、读脏数据和读幻想。定义如下：</p>
<p><strong>不可重复读</strong>（nonrepeatable read)。一个事务在执行过程中对同一对象读两次。第二次得到不同的值，尽管在此期间该事务并没有改变其值。</p>
<p><strong>读脏数据</strong>（dirty read）。事务读由另一个尚未提交的事务所写的值。</p>
<p><strong>读幻象</strong>（phantom read）。事务重新执行返回结果为满足某搜索条件的行集合的查询，发现满足条件的行集合已经改变，这是因为令一个事务最近提交了。<p>
<p>四种标准SQL隔离级别的定义:</p>
<table border="1">
<tr><th>隔离级别        |</th><th>读脏数据      |</th><th>不可重复读       |</th><th>幻象        </th></tr>
<tr><td>读未提交        |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>读已提交        |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>重复读       |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>可串行化        |</td><td>不可能 </td><td>不可能  </td><td>不可能  </td></tr>
</table></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Depression]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/26/depression/"/>
    <updated>2013-04-26T17:59:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/26/depression</id>
    <content type="html"><![CDATA[<blockquote><p><p>The famous song BOAST of Eason origin from Depression which was written the night of April 1st,2003 by C.Y.Kong who was one of best friends of Leslie committed suicide that day. C.Y.Kong could&#8217;t understand leslie&#8217;s decision and wrote a song with ghostly synth to ask him or in memory of him. Eason liked the key change and the style of the song. He wrote some words for the song and Wyman helped him finish off what he wrote.This is how BOAST produced.Please appreciate<a href="http://www.cykong.com/Projects/Audio/Depression(DemoMelody).mp3">The orginal demo</a>  C.Y.Kong&#8217;s Note: To me, this demo will always be dedicated to leslie.</p>
<!-- more -->
<p>浮夸歌词，because I am addicted to this song and willing to translate to English.</p>
有人问我我就会讲 但是无人来
<p>if someone ask me, I will talk, but no one come</p>
我期待 到无奈 有话要讲 得不到装载
<p>I expect unitl feel helpless. even with words, no chance to express</p>
我的心情犹豫像樽盖 等被揭开
<p>the mood is like bottle to be opened</p>
咀巴却在养青苔
<p>but the mouth is growing moss and mushroom</p>
人潮内愈文静 愈变得不受理睬
<p>the more silent in crowd, the fewer people care of you</p>
自己要搞出意外
<p>make accidents by myself</p>
像突然 地高歌
<p>like singing loudly and suddenly</p>
任何地方也像开四面台
<p>anywhere is like having performace in all directions</p>
着最闪的衫 扮十分感慨
<p>wear colorful clothes, diguise as being filled with one thousand regrets</p>
有人来拍照要记住插袋
<p>put hands into pockets when someone is coming to take photos</p>
你当我是浮夸吧 夸张只因我很怕
<p>you treat me as boast, boast as I am deadly fear</p>
似木头 似石头的话 得到注意吗
<p>if like wood or stone, am I get caution </p>
其实怕被忘记 至放大来演吧
<p>actually I perform exaggerately as afraid to be forgotten</p>
很不安 怎去优雅
<p>deadly upset, how can I be elegant</p>
世上还赞颂沉默吗
<p>does the world still praise silence</p>
不够爆炸 怎麽有话题
<p>not explosive enough, are there any topic</p>
让我夸做大娱乐家
<p>let me boast to be big entertainer</p>
那年十八 母校舞会 站着如喽罗
<p>stand as monkey when eighteen in old school&#8217;s ball</p>
那时候 我含泪发誓各位 必须看到我
<p>in that time, refrain from tears and swear everyone must see me in the future </p>
在世间 平凡又普通的路太多
<p>there are too many plain and ordinary roads in this world</p>
屋村你住哪一座
<p>which road do you live in </p>
情爱中 工作中 受过的忽视太多
<p>suffer too much ignorance in love and work</p>
自尊已饱经跌堕 重视能治肚饿
<p>there is almost no respect in heart, paying much attention can cure hunger of stomach</p>
末曾获得过便知我为何 大动作很多
<p>not ever been gotten, you know me why I have so many big movements</p>
犯下这些错 搏人们看看我 算病态麽
<p>make these mistakes, let people judge me whether ill</p>
幸运儿并不多 若然未当过就知我为何
<p>there is not many lucky dog, if have not ever been, you know me why</p>
用十倍苦心 做突出一个
<p>to be prominent by ten times pains</p>
正常人够我富议论性么
<p>normal people is more controversive than me</p>
你叫我做浮夸吧 加几声嘘声也不怕
<p>you call me BOAST, don&#8217;t be afraid to add some shushing </p>
我在场 有闷场的话
<p>if I am present and you feel bored</p>
表演你看吗 够歇斯底里 吗
<p>can I perform for you, and am I hysterical enough </p>
以眼泪淋花吧 一心只想你惊讶
<p>water flower with tears, wholeheartly just want you be suprised</p>
我旧时似未存在吗
<p>was I  existing as air in old times</p>
加重注码 青筋 也现形
<p>add note yards, blue veins also appear</p>
话我知 现在存在吗
<p>please tell me whether I am existing now</p>
凝视我 别再只看天花
<p>don&#8217;t just only see smallpox when glazing at me</p>
我非你杯茶 也可尽情地喝吧
<p>I am not a cup of tea of yours, but you can drink it with abandon</p>
别遗忘有人在 为你 声沙
<p>don&#8217;t forget someone hoarse for you</p>
<p>只因为听了《浮夸》,full of curiosity,search on the internet and know the detail of the song. 张国荣被港人尊称为“哥哥”。我觉得哥哥唱《the moon represent my heart》时，富含感情。哥哥拍的电影《霸王别姬》，简直就是曲高和众。不知道里面的虞姬是否是哥哥现实中的写照呢？哥哥从一而终，对京剧国粹的痴迷，执着，在清朝末代，北洋时期，国民党统治时期，抗日战争，内战，新中国，文革时期，依然没有糟蹋戏。假霸王，真虞姬。</p>
<p>电影中经典的台词：
<p>1.人得自个儿成全自个儿 </p>
<p>2.要想人前现贵，必先人后受罪 </p>
<p>3.我是假霸王，你是真虞姬 </p>
<p>4.不疯魔不成活 </p>
<p>5.自古人生在世，需有一技之能；我辈既务斯业，便当专心用功；以后名扬四海，根据即在年轻。</p>
<p>6.从一而终</p>
<p>哥哥在电影中扮演的虞姬，此一回眸&#8230;</p>
<img src="http://coolbrain.github.com/assets/images/lesie.gif" alt="&quot;brother&quot;" /></p>

<p><p>PS：The Moon Represent my Heart歌词：</p>
你问我爱你有多深
<p>how deep I loved you </p>
我爱你有几分
<p>how strong emotion within myself</p>
<p>you are wondering </p>
我的情不移
<p>my feeling is true</p>
我的爱不变
<p>my love is never new</p>
月亮代表我的心
<p>the moon represents my heart</p>
你问我爱你有多深
<p>how deep I loved you</p>
我爱你有几分
<p>how strong emotion within myself</p>
<p>you want to know</p>
我的情不移
<p>my passion for you is real</p>
我的爱不变
<p>my devotion to you is a belief</p>
月亮代表我的心
<p>the moon represent my heart</p>
轻轻的一个吻
<p>a tender kiss</p>
已经打动我的心
<p>moved me to the heaven</p>
深深的一段情
<p>a loved story between you</p>
叫我思念到如今
<p>it&#8217;s alive until today</p>
would you think so
<p>would you trust me</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB Optimizers]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/24/monetdb-optimizers/"/>
    <updated>2013-04-24T20:02:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/24/monetdb-optimizers</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>MonetDB 汇编语言优化器</strong></p>
<p>设计MonetDB中间语言的首要理由是能对数据库查询有一个高层次的描述，且这种语言容易被front-end编译器产生，容易编码，优化和解析。</p>
<!-- more -->
<p>一个有效的优化器需要几种机制保证。它可以执行对代码碎片的标志性评估和收集结果来帮助进一步的抉择。原型情况就是一个优化器估计选择操作结果的大小。另外主要的问题是可以产生和发掘替代评估计划的空间。这种发掘可以发生在前端，也可以在运行的时候对查询碎片。</p>
<p><strong>优化器的基础</strong></p>
<p>1.生命周期的分析</p>
<p>优化器为了做一个抉择可能对代码块的特性可能有兴趣。在代码块中变量都有生命周期，用属性beginLifespan，endLifespan来表示。beginLifespan表示指令在哪里得到其第一个值，endLifespan表示最后指令在哪里被使用作为操作数或目标。如果然而，最后的使用在BARRIER块里，我们不能确定它的生命状态的结束，因为代码块redo可能模糊地使用它。对于这些情况我们关联endLifespan到跳出代码块。</p>
<p>在许多的情况，我们需要决定是否生命周期干扰了一个预先准备好的优化决定。在优化器的开始序列中，生命周期被计算一次。它会被维持去反映最准确的情况当优化基础代码时。特别是，这意味着任何的 move/remove/addition MAL指令调用不是为了重现计算就是为了进一步的传播。不清楚什么会是最好的策略。暂时我们只是重新计算。</p>
<p>在点pc指令中提到里所有的参数都会在指令qc见到且不会同时更新。把变量可能在代码块内声明都考虑进来。这可能使用BARRIER/CATCH 和 EXIT对计算。对于每一个MAL函数安全的属性相对容易决定。这种调用是为了访问MAL函数块和监视签名的参数。</p>
<p>任何的指令可能阻碍公共子表达式的识别。他充分地阻碍一个其参数列表与目标指令有非空的交集的不安全的函数。为了说明，考虑序列：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">L1</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">G1</span> <span class="o">:=</span> <span class="n">g</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">l2</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">L2</span> <span class="o">:=</span> <span class="n">h</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>指令G1：=g(D, E, F) 阻塞如过G1 是｛A,B，C｝的别名。换言之，函数g()可能不安全和｛D，E，F｝和｛A,B，C｝有非空的交集。一个别名在以后的使用只能是只读。</p>
<p>MonetDB的执行优化前，设定生命周期的代码。</p></p></blockquote>

<figure class='code'><figcaption><span>设置变量的生命周期setLifespan  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Lifespan</span> <span class="nf">setLifespan</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pc</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">prop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">blk</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="o">=</span> <span class="n">newLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">span</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">LifespanRecord</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="n">prop</span> <span class="o">=</span> <span class="n">PropertyIndex</span><span class="p">(</span><span class="s">&quot;transparent&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">blk</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">pc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pc</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">pc</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">pc</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">prop</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>          <span class="n">depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">beginLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">beginLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>              <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">lastUpdate</span><span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="n">depth</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&gt;=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="o">&amp;&amp;</span> <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">depth</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>   <span class="cm">/* declared in outer scope*/</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * At a block exit we can finalize all variables defined within that block.</span>
</span><span class='line'><span class="cm">      * This does not hold for dataflow blocks. They merely direct the execution</span>
</span><span class='line'><span class="cm">      * thread, not the syntactic scope.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">blk</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">depth</span><span class="p">)</span>
</span><span class='line'>              <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">prop</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">depth</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="cm">/* generate them before the end */</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">blk</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>2.流分析 </p>
<p>在许多优化规则里，语句间的数据流依赖尤其重要。MAL语言编码一个多源，多节点的数据流网络。优化器特别提取部分的工作流和使用语言的属性去枚举语义相等的解决方案，在给定的代价模型这出现导致更好的性能。流图在许多优化步骤里面扮演着重要的角色。什么是原始的和什么存储结构是最足够的是不清楚的。暂时我们引入必要的操作和对程序直接的评估。</p>
<p>对于每个变量我们应该确定他稳定的范围。在流图中的终点描述为不会产生永久数据的dead-code。当你知道这没有影响时，可以把它去掉。Side-effect自由评估应该在前端被知的属性。暂时，我们假设对于系统所有操作都是已知的。属性“不安全”是保留去识别这靠不住的情况。特别的是，一个bun-insert操作是不安全的，因为它改变了其中一个参数。</p>
<p><strong>MonetDB优化器详解：</strong></p>
<p>1.累加器评估:</p>
<p>批量的算术运算相当昂贵，因为对于每个表达式new BATs被创建。这内存饥饿被减少通过探测累加处理的机会，如，一个（临时）的变量被重写。如</p></p></blockquote>

<figure class='code'><figcaption><span>考虑下列程序片段：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="nl">t3:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">.</span><span class="o">*</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'> <span class="nl">t4:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">,</span><span class="o">+</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class='line'> <span class="n">optimizer</span><span class="p">.</span><span class="n">accumulators</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>如果变量t2是临时变量且不会在以后的程序块用到，我们可以重用它的存储空间和在剩余的代码中传播其别名。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">batcalc</span><span class="p">.</span><span class="o">*</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'> <span class="nl">t4:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这实现是直接的。它刚刚只是处理了在BATCALC可用的算术操作。这集合会慢慢地扩展的。关键的决定是去决定是否我们可以重写其中一个参数。在编译的时候，这是很难去检测的，如参数可能是绑定操作或代表一个通过永久BAT表示的视图的结果。因此，编译器注入调用ALGEBRA.REUSE()通过拷贝避免重写永久的BATs。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB 累加器优化器代码：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTaccumulatorsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span><span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Module</span> <span class="n">scope</span> <span class="o">=</span> <span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">nspace</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>  <span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">!=</span> <span class="n">batcalcRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">OPTDEBUGaccumulators</span>
</span><span class='line'>          <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* unary operation, avoid clash with binary */</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="n">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* only consider the last update to this variable */</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span>  <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">b1</span> <span class="o">=</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&lt;=</span><span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">b2</span> <span class="o">=</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span><span class="o">&lt;=</span><span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">b1</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">b2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/* binary/unary operation, check arguments for being candidates */</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">b1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">b2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">typeChecker</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">typechk</span> <span class="o">==</span> <span class="n">TYPE_UNKNOWN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">OPTDEBUGaccumulators</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;# Failed typecheck&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="cm">/* reset instruction error buffer */</span>
</span><span class='line'>              <span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">errbuf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">mb</span><span class="o">-&gt;</span><span class="n">errors</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="n">p</span><span class="o">=</span><span class="n">q</span><span class="p">;</span> <span class="cm">/* restore */</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span>  <span class="p">{</span>
</span><span class='line'>              <span class="n">OPTDEBUGaccumulators</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#Found accumulation candidate &quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;%d: %d(%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>              <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">OPTDEBUGaccumulators</span>
</span><span class='line'>              <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_accumulators:%d accumulations</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>2.别名的去除：</p>
<p>任务 OPTIMIZER.ALIASREMOVAL()浏览程序寻找简单赋值语句，如，V:=W，它用W替代了所有的接下来的V，条件是V只是被赋值一次和W在剩下的代码中不会改变。特殊的例子在迭代的代码块中，如下所示：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>         <span class="nl">i:</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>         <span class="nl">b:</span><span class="o">=</span><span class="s">&quot;done&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">barrier</span>  <span class="n">go</span><span class="o">:=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>         <span class="nl">c:</span><span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>         <span class="nl">d:</span><span class="o">=</span><span class="s">&quot;step&quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="nl">v:</span><span class="o">=</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>         <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>         <span class="nl">i:</span><span class="o">=</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="n">redo</span> <span class="n">go</span><span class="o">:=</span><span class="n">i</span> <span class="n">lower</span> <span class="n">than</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit</span> <span class="n">go</span><span class="p">;</span>
</span><span class='line'>         <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>         <span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>字符常量被传入到PRINT()任务，当初始的赋值i：= 0 需要保留。代码块变成：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>         <span class="nl">i:</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">barrier</span>  <span class="n">go</span><span class="o">:=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>         <span class="nl">c:</span><span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>         <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">step</span><span class="s">&quot;);</span>
</span><span class='line'>         <span class="nl">i:</span><span class="o">=</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="n">redo</span> <span class="n">go</span><span class="o">:=</span><span class="n">i</span> <span class="n">lower</span> <span class="n">than</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit</span> <span class="n">go</span><span class="p">;</span>
</span><span class='line'>         <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span><span class='line'>         <span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>下面是MonetDB别名去除优化的代码：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTaliasesImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">span</span><span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">OPTisAlias</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span>  <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span>  <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span><span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>              <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="n">k</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">OPTaliasRemap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>          <span class="n">OPTaliasRemap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * @-</span>
</span><span class='line'><span class="cm">  * The second phase is constant alias replacement should be implemented.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_aliases: %d removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>3.代码工厂化 ：</p>
<p>在大部分真正的情况，查询在它们的参数有稍微的差别被重复地调用。这种情况通过保持近期查询计划的缓存可以被查询优化器捕捉。在MonetDB上下文这样的查询被表示为参数化的MAL程序。进一步优化缓存函数将查询计划分成两块可能你有帮助。一个区域有不依赖于给定参数的操作和另一区域包含查询的核心使用所有的信息。这样的程序可以被MAL工厂表示，是一个可重入的查询计划。一个工厂化改变代码的例子如下：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">function</span> <span class="n">test</span><span class="p">(</span><span class="n">s</span><span class="o">:</span><span class="n">str</span><span class="p">)</span><span class="o">:</span><span class="n">lng</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">z:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">i:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">end</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">factorize</span><span class="p">(</span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>转变为下面的代码</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">factory</span> <span class="n">user</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">s</span><span class="o">:</span><span class="n">str</span><span class="p">)</span><span class="o">:</span><span class="n">lng</span><span class="p">;</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="n">always</span> <span class="o">:=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">z</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'>  <span class="n">yield</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">redo</span> <span class="n">always</span><span class="p">;</span>
</span><span class='line'><span class="n">exit</span> <span class="n">always</span><span class="p">;</span>
</span><span class='line'><span class="n">end</span> <span class="n">test</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>包含的工厂生成器是MAL工厂化的原型实现。被采用的方法是将程序分成两块和把其包装为MAL工厂。优化假设数据库表在工厂的生命时间中只访问一次不会改变。这样的变化应该被外面检测和接着是重启的工厂。一个重定义用户可以识别‘冻僵’的参数的模式会留给将来。因为查询会映射到人和可用的工厂去处理请求。暂时我们简单地重组计划的所有参数。工厂化的操作干扰OPTIMIZER.EXPRESSIONACCUMULATION() 因为这可能会重写参数。暂时，这在本地任务会被捕捉。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB工厂化优化代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTfactorizeImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span>  <span class="n">v</span><span class="p">,</span> <span class="n">noop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">se</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">mbnew</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">blk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">varused</span><span class="p">,</span> <span class="n">returnseen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">retvar</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">varused</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">varused</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">varused</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* add parameters to use list */</span>
</span><span class='line'>  <span class="n">sig</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sig</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">varused</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">first</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">second</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">second</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">first</span><span class="p">[</span><span class="n">fk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>  <span class="cm">/* to become a factory */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">se</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">varused</span><span class="p">[</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]])</span>
</span><span class='line'>              <span class="n">se</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* detect blocks they are moved to the second part */</span>
</span><span class='line'>      <span class="cm">/* a more clever scheme can be designed though */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">BARRIERsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">CATCHsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">blkstart</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">blkstart</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>              <span class="n">blk</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">EXITsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">blk</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">blk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* beware, none of the target variables may live</span>
</span><span class='line'><span class="cm">        before the cut point.  */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">])</span><span class="o">&lt;</span> <span class="n">i</span> <span class="o">||</span> <span class="o">!</span><span class="n">OPTallowed</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class='line'>              <span class="n">se</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">se</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">YIELDsymbol</span><span class="p">;</span>
</span><span class='line'>          <span class="n">returnseen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">retvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">se</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">blk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">first</span><span class="p">[</span><span class="n">fk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">blkstart</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/* copy old block stuff */</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">blkstart</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>              <span class="n">fk</span> <span class="o">=</span> <span class="n">blkstart</span><span class="p">;</span>
</span><span class='line'>              <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="n">varused</span><span class="p">[</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* detect need for factorization, assume so */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">noop</span> <span class="o">||</span> <span class="n">sk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/* remove the FToptimizer request */</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">first</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">=</span> <span class="n">FACTORYsymbol</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mbnew</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">((</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">mbnew</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">mbnew</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fk</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* added control block */</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">newVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">GDKstrdup</span><span class="p">(</span><span class="s">&quot;always&quot;</span><span class="p">),</span> <span class="n">TYPE_bit</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">ASSIGNsymbol</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>  <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">second</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* finalize the factory */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">returnseen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">ASSIGNsymbol</span><span class="p">);</span>
</span><span class='line'>      <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">YIELDsymbol</span><span class="p">;</span>
</span><span class='line'>      <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">REDOsymbol</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">=</span> <span class="n">pushReturn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">EXITsymbol</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span><span class="o">=</span> <span class="n">pushReturn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* return a nil value */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">retvar</span><span class="p">)</span> <span class="o">!=</span> <span class="n">TYPE_void</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">RETURNsymbol</span><span class="p">);</span>
</span><span class='line'>      <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">retvar</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/* add END statement */</span>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">second</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>4.删除强制转换：
<p>一个简单的优化器去除不需要的强制转换。它们可能来源于草率的代码生成器或函数调用决议决定。如 v:= calc.int(32);
成为一个简单地赋值，不需要函数调用。最主要的角色是一个编码一个优化算法的说明。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB删除强制转换的代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">coercionOptimizerStep</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">ATOMname</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">removeInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="cm">/* dead code */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span>  <span class="nf">OPTcoercionImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">calcRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;calc&quot;</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">calcRef</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">k</span><span class="o">=</span> <span class="n">coercionOptimizerStep</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span> <span class="o">+=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">k</span><span class="p">)</span> <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * This optimizer affects the flow, but not the type and declaration</span>
</span><span class='line'><span class="cm">  * structure. A cheaper optimizer is sufficient.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_coercion: %d coersions applied</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>5.消除公共子表达式: </p>
<p>消除公共子表达只涉及对程序块的扫描去检测重复出现的语句。最在说明最关键的问题是保证在重复指令里涉及到的参数都是不变的。对OPTIMIZER.COMMONTERMS()分析是相当简陋的。带有可能有side-effects的参数的所有函数应该被标志为‘不安全’。在MAL块中它们的使用跳出涉及所有对象的数据流图(BATs,所有的东西保存在盒子里）。消除子表达优化器位于相同指令的后面。只要发现相同的它就会停止。在我们用前面的变量代替表达式之前，我们假设我们还没有通过一个非空的代码块</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">c:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">d:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">e:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">k1:</span><span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">k2:</span><span class="o">=</span> <span class="mi">27</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">l:</span><span class="o">=</span> <span class="n">k1</span><span class="o">+</span><span class="n">k2</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">l2:</span><span class="o">=</span> <span class="n">k1</span><span class="o">+</span><span class="n">k2</span><span class="p">;</span>
</span><span class='line'>  <span class="nl">l3:</span><span class="o">=</span> <span class="n">l2</span><span class="o">+</span><span class="n">k1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">commonTerms</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>会被转换成代码块，开始的两个指令不是相同的，因为它们有side 影响</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span>
</span><span class='line'>  <span class="n">e</span> <span class="o">:=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="n">l</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">27</span><span class="p">);</span>
</span><span class='line'>  <span class="n">l3</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">24</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB 消除公共子表达式的代码段  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTcommonTermsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">prop</span><span class="p">,</span> <span class="n">candidate</span><span class="p">,</span> <span class="n">barrier</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span> 
</span><span class='line'>  <span class="cm">/* link all final constant expressions in a list */</span>
</span><span class='line'>  <span class="cm">/* it will help to find duplicate sql.bind calls */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cstlist</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">vars</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="n">alias</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vars</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">vars</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">alias</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">vars</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Link the statement to the previous use, based on the last argument.*/</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">candidate</span> <span class="o">=</span> <span class="n">vars</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>              <span class="cm">/* all instructions with constant tail are linked */</span>
</span><span class='line'>              <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cstlist</span><span class="p">;</span>
</span><span class='line'>              <span class="n">cstlist</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>              <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">vars</span><span class="p">[</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>          <span class="n">vars</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="n">candidate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">){</span>
</span><span class='line'>          <span class="cm">/* wrap up the remainder */</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Any non-empty barrier block signals the end of this optimizer,</span>
</span><span class='line'><span class="cm">      * the impact of the block can affect the common code.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">barrier</span> <span class="o">|=</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">==</span> <span class="n">BARRIERsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">==</span> <span class="n">CATCHsymbol</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">!=</span><span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * @-</span>
</span><span class='line'><span class="cm">      * Also block further optimization when you have seen an assert().</span>
</span><span class='line'><span class="cm">      * This works particularly for SQL, because it is not easy to track</span>
</span><span class='line'><span class="cm">      * the BAT identifier aliases to look for updates. The sql.assert</span>
</span><span class='line'><span class="cm">      * at least tells us that an update is planned.</span>
</span><span class='line'><span class="cm">      * Like all optimizer decisions, it is safe to stop.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">barrier</span> <span class="o">|=</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">assertRef</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">||</span> <span class="n">barrier</span> <span class="cm">/* || p-&gt;retc == p-&gt;argc */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON SKIPPED[%d] %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span> <span class="n">barrier</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* from here we have a candidate to look for a match */</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#CANDIDATE[%d] &quot;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="n">prop</span> <span class="o">=</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="n">j</span> <span class="o">=</span>   <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">?</span> <span class="n">cstlist</span><span class="o">:</span> <span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">/</span> <span class="mi">128</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="o">?</span> <span class="mi">32</span> <span class="o">:</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">/</span><span class="mi">128</span><span class="p">;</span>    <span class="cm">/* limit search depth */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">prop</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(;</span> <span class="n">cnt</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="p">;</span> <span class="n">cnt</span><span class="o">--</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="p">){</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>          <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#CANDIDATE %d, %d  %d %d &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span>
</span><span class='line'>              <span class="n">hasSameSignature</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">),</span>
</span><span class='line'>              <span class="n">hasSameArguments</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">));</span>
</span><span class='line'>              <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot; :%d %d %d=%d %d %d %d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">ASSIGNsymbol</span> <span class="p">,</span>
</span><span class='line'>                  <span class="n">list</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)],</span><span class="n">i</span><span class="p">,</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">hasCommonResults</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">),</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">),</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">),</span>
</span><span class='line'>                  <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">q</span><span class="p">),</span>
</span><span class='line'>                  <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * @-</span>
</span><span class='line'><span class="cm">              * Simple assignments are not replaced either. They should be</span>
</span><span class='line'><span class="cm">              * handled by the alias removal part. All arguments should</span>
</span><span class='line'><span class="cm">              * be assigned their value before instruction p.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span> <span class="n">hasSameArguments</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">hasSameSignature</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">hasCommonResults</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(</span><span class="n">safetyBarrier</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>                      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#safetybarrier reached</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>                      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;Found a common expression &quot;</span> <span class="s">&quot;%d &lt;-&gt; %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>                  <span class="n">clrFunction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>                  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON MODIFIED EXPRESSION %d -&gt; %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span> <span class="cm">/* end of search */</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON SKIPPED %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="p">,</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>              <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_commonTerms: %d statements catched</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_OPT_COMMONTERMS_MORE</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_commonTerms: %d statements catched</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>6.常量表达式评估：</p>
<p>由编译器产生只涉及常量的参数的表达式可以被评估一次。它特别是与经常被调用的函数相关。一次的查询不会从这额外的步骤得益。考虑下列的包含重复使用的常量参数的代码片段。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">a:</span><span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>   <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">b:</span><span class="o">=</span> <span class="mi">2</span><span class="p">;</span>        <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">c:</span><span class="o">=</span> <span class="mi">3</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">d:</span><span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="n">flt</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>   <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">e:</span><span class="o">=</span> <span class="n">mmath</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">evaluate</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>会被转换成代码块</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="o">-</span><span class="mf">0.279415488</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*同样的我们尝试基于常量捕捉barrier块*/</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB常量表达式优化  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTconstantsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fnd</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">,</span> <span class="o">*</span><span class="n">index</span><span class="p">;</span>
</span><span class='line'>  <span class="n">VarPtr</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span> <span class="o">*</span><span class="n">cst</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">OPTDEBUGconstants</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#OPT_CONSTANTS: MATCHING CONSTANTS ELEMENTS</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cst</span><span class="o">=</span> <span class="p">(</span><span class="n">VarPtr</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">VarPtr</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="n">index</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">cst</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">alias</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">cst</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">alias</span><span class="p">[</span> <span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>  <span class="o">&amp;&amp;</span> <span class="n">isVarFixed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="n">getVar</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="n">fnd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>              <span class="n">y</span><span class="o">=</span> <span class="n">cst</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                   <span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span> <span class="o">==</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">ATOMcmp</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">,</span> <span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">),</span> <span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">OPTDEBUGconstants</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_constants: matching elements %s %d %d &quot;</span><span class="p">,</span> <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">),</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">ATOMprint</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">,</span><span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">),</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="cm">/* re-use a constant */</span>
</span><span class='line'>                  <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">index</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">fnd</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">fnd</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">OPTDEBUGconstants</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;swith elements %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>              <span class="n">cst</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>              <span class="n">index</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>              <span class="n">n</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_constants: %d constant duplicates removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>7.代价模型方法:</p>
<p>代价模型是许多优化决定的基础。代价参数经常是（中间的）结果的大小和反应的时间。换言之，它们是运行聚集，如，从模拟运行中得到的最大的内存使用和总共的运行时间。当前的实现包含一个框架和对自身以代价为基础的例子。OPTIMIZER.COSTMODEL（）以自己的方式在MAL程序中运行寻找关系运算和估计它们结果的大小。估计的大小被置后作为属性ROWS。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">r</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">s</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">1000</span><span class="p">}</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">rs:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">rr:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">rs</span><span class="p">,</span><span class="n">rr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">costModel</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>该表指令的属性如下：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">r</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">s</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">1000</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rs</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">501</span><span class="p">}</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rr</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'>  <span class="n">j</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">rs</span><span class="p">,</span><span class="n">rr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>代价估计在真正的数据分布上未用任何的统计。它依赖于由front-end或其它优化器提供的ROWS属性。它只是使用了一些启发式代价估计器。然而，它保证空的结果会被ROWS=0标记，如果估计是精确的，否则它假设至少一个结果行。这个属性使安全传递代价估计的结果到减少代码的EMPTYSET优化器成为可能。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB代价估计实现代码   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="cm">/*The cost will be used in many places to make decisions.</span>
</span><span class='line'><span class="cm"> * Access should be fast.</span>
</span><span class='line'><span class="cm"> * The SQL front-end also makes the BAT index available as the</span>
</span><span class='line'><span class="cm"> * property bid. This can be used to access the BAT and involve</span>
</span><span class='line'><span class="cm"> * more properties into the decision procedure.</span>
</span><span class='line'><span class="cm"> * Also make sure you don&#39;t re-use variables, because then the</span>
</span><span class='line'><span class="cm"> * row count becomes non-deterministic.*/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">OPTcostModelImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">wrd</span> <span class="n">k</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">sortrevRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sortReverse&quot;</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">sortrevTailRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sortReverseTail&quot;</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">projectRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;project&quot;</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">algebraRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectNotNilRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortTailRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortrevRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortrevTailRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">projectRef</span>  <span class="p">){</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">unionRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span><span class="o">+</span><span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">kdifferenceRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="n">c2</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="n">c1</span><span class="o">:</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinPathRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/* assume 1-1 joins */</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span> <span class="o">&lt;</span> <span class="n">c2</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/* assume 1-1 semijoins */</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span> <span class="o">&lt;</span> <span class="n">c2</span><span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetaselectRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetauselectRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span><span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">crossRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,((</span><span class="n">log</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span> <span class="n">c1</span><span class="p">)</span> <span class="o">+</span> <span class="n">log</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span> <span class="n">c2</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">log</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">)</span> <span class="o">?</span> <span class="n">INT_MAX</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">*</span> <span class="n">c2</span> <span class="o">+</span><span class="mi">1</span><span class="p">)),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">tuniqueRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">&lt;</span> <span class="mi">50</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batcalcRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">ifthenelseRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batstrRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">reverseRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">setWriteModeRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">hashRef</span>  <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mirrorRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span> <span class="o">||</span>
</span><span class='line'>                 <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">insertRef</span> <span class="p">){</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * Updates are a little more complicated, because you have to</span>
</span><span class='line'><span class="cm">              * propagate changes in the expected size up the expression tree.</span>
</span><span class='line'><span class="cm">              * For example, the SQL snippet:</span>
</span><span class='line'><span class="cm">              *     _49:bat[:oid,:oid]{rows=0,bid=622}  := sql.bind_dbat(&quot;sys&quot;,&quot;example&quot;,3);</span>
</span><span class='line'><span class="cm">              *     _54 := bat.setWriteMode(_49);</span>
</span><span class='line'><span class="cm">              *     bat.append(_54,_47,true);</span>
</span><span class='line'><span class="cm">              * shows what is produced when it encounters a deletion. If a non-empty</span>
</span><span class='line'><span class="cm">              * append is not properly passed back to _49, the emptySet</span>
</span><span class='line'><span class="cm">              * optimizer might remove the complete deletion code.</span>
</span><span class='line'><span class="cm">              * The same holds for replacement operations, which add information to</span>
</span><span class='line'><span class="cm">              * an initially empty insertion BAT.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                  <span class="cm">/* insert BAT */</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">+</span> <span class="n">c2</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="cm">/* insert scalars */</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deleteRef</span><span class="p">){</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                  <span class="cm">/* delete BAT */</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span> <span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="o">-</span><span class="n">c2</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="cm">/* insert scalars */</span>
</span><span class='line'>                  <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">insertRef</span><span class="p">){</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span> <span class="cm">/* faked */</span>
</span><span class='line'>              <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">groupRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span><span class="n">newRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">aggrRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">avgRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span> <span class="n">c1</span><span class="o">?</span><span class="n">c1</span><span class="o">:</span><span class="n">c1</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span>    <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">countRef</span><span class="p">){</span>
</span><span class='line'>              <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>          <span class="cm">/* copy the rows property */</span>
</span><span class='line'>          <span class="n">c1</span> <span class="o">=</span> <span class="n">getVarRows</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">c1</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">ValRecord</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="n">varSetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">rowsProp</span><span class="p">,</span> <span class="n">op_eq</span><span class="p">,</span> <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="n">TYPE_wrd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c1</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_costModel: processed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>8.数据流优化器 ：</p>
<p>MAL程序很大程度上是执行计划的逻辑描述。至少它关注没有副影响的操作。对于这些子计划执行的顺序需要的不是一个固定的优先级而可能是数据流驱动的评估。甚至使用多核互不影响地工作在数据流图中。数据流优化器分析代码和为了数据流驱动执行用保护块包装健壮的代码。当然，这只是必要的如果你可以前端决定可能有多线程的运行。</p>
<p>对于运行，解析器根据可用处理器核的数量来初始化多线程。接下来，合格的指令被排序和被解析器线程解析。数据流块可能不是成堆的。因此，为内联代码产生的任何数据流块首先被去除。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB数据流优化器实现代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTdataflowImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">entries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">flowblock</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dumbcopy</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">init</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* don&#39;t use dataflow on single processor systems */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">GDKnr_threads</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* inlined functions will get their dataflow control later */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="p">),</span><span class="n">inlineProp</span><span class="p">)</span><span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">span</span><span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init</span><span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">init</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="o">+</span><span class="mi">20</span><span class="p">)</span> <span class="o">&lt;</span><span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">init</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">removeDataflow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">limit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* inject new dataflow barriers */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">FALSE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="n">blockCntrl</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">dumbcopy</span> <span class="o">&amp;&amp;</span> <span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">||</span> <span class="n">dflowAssignTest</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="cm">/* close old flow block */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                          <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                          <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                          <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                          <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                  <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">                    executed, either sequentially or in parallell */</span>
</span><span class='line'>                  <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>          <span class="n">dumbcopy</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">dumbcopy</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="cm">/* close old flow block */</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                          <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                          <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                              <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                              <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                              <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                              <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                      <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">                        executed, either sequentially or in parallell */</span>
</span><span class='line'>                      <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">assert</span><span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="n">dumbcopy</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">dumbcopy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">assert</span><span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">flowblock</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">TYPE_bit</span><span class="p">);</span>
</span><span class='line'>          <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="cm">/* check if the instruction can start a flow */</span>
</span><span class='line'>      <span class="cm">/* this should be a function call with multiple arguments */</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">||</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&amp;&amp;</span> <span class="n">dflowAssignTest</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>          <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&amp;&amp;</span> <span class="n">cnt</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">)</span>
</span><span class='line'>          <span class="n">entries</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/* close old flow block */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;</span> <span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                  <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>          <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>          <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">            executed, either sequentially or in parallell */</span>
</span><span class='line'>          <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>              <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;&amp;</span> <span class="n">entries</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>          <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/* take the remainder as is */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">init</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_dataflow: %d flow blocks created</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>9.去除无用代码</p>
<p>无用代码碎片通过赋值到不再使用的变量被识别。它可以被探测通过标记作为使用的参数作为相关的所有的变量。同时，我们建立应该在最后结果出现的一系列指令。新建的代码块在一次扫描中建立，去除无用的指令。指令对环境产生副影响，如，输出和更新BAT应该被考虑进来。这样（可能递归）函数应该被标记有一个（不安全）的属性。现在我们识别了几个重要的，否则，指令被标记为控制流指令应该被保留。一个说明性例子的MAL片段如下：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V10</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V19</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V22</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V23</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V22</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">deadCodeRemoval</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>去除无用的代码使程序缩小到一下的短小的代码块：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>对无用代码的提炼来源与使用停止存在的参数因为行为被优化器做了。如，在下面的代码片段PUSHRANGES优化器可能得出变量V31变为空的和简单地通过去掉赋值语句注入一个‘无用’变量。这同时使其他代码无用。</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">V30</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span> <span class="n">V7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V31</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">V30</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V32</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">V31</span><span class="p">);</span>
</span><span class='line'>  <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">V32</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB去除无用的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTdeadcodeImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">se</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">clrDeclarations</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="n">chkDeclarations</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">se</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">se</span><span class="p">){</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">isVarUsed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">se</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span><span class="p">){</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">assertRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">se</span> <span class="o">||</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">isProcedure</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>  <span class="o">||</span>
</span><span class='line'>              <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">varGetProp</span><span class="p">(</span> <span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">unsafeProp</span> <span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="cm">/* ==side-effect */</span><span class="p">)</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_deadcode: %d statements removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* we may have uncovered new use-less operations */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actions</span> <span class="o">+=</span> <span class="n">OPTdeadcodeImplementation</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="n">stk</span><span class="p">,</span> <span class="n">pci</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>10.去除空集：</p>
<p>在MAL优化期间其中最关键决定是估计产生和消耗的BAT的大小。两种情况对标志处理有兴趣。也就是，当一个BAT被知道没有包含元组和元组只有一个元素。这样的信息可能来自应用领域只是或者作为从标志评估另外的影响。这关联到作为属性被探测的程序。空集属性被呈现的消减算法使用。任何空集在程序中被传播到达一个更小和因此更快的评估。如，考虑接下来的MAL测试：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V10</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V11</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">V10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V12</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">kdifference</span><span class="p">(</span><span class="n">V7</span><span class="p">,</span><span class="n">V11</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">costModel</span><span class="p">();</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">emptySet</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>调用优化器用接下来的程序片段取代上面的程序</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V10</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V11</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V12</span> <span class="o">:=</span> <span class="n">V7</span><span class="p">;</span>
</span><span class='line'>  <span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这代码块可以使用别名传播和去除无用代码继续优化。最后的代码块如下：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>在空集传播时，新的候选者可能出现。如，与空集进行交运算还是得到空集。它成为中间优化的目标。当前的实现是保守的。一个有限的指令集合被考虑。任何添加到MonetDB指令集调用评估它们的影响。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB去除空集的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="nf">ESevaluate</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">existRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;exist&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">uniqueRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;unique&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">suniqueRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sunique&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">intersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;intersect&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">sintersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sintersect&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">kintersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;kintersect&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">fragmentRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;fragment&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">runonce</span><span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">,</span> <span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">,</span> <span class="n">ctop</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">,</span> <span class="o">*</span><span class="n">constraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* get query property */</span>
</span><span class='line'>  <span class="n">runonce</span> <span class="o">=</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">runonceProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">constraints</span><span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">)</span><span class="o">*</span><span class="n">slimit</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">constraints</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">alias</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">constraints</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Symbolic evaluation of the empty BAT variables */</span>
</span><span class='line'>  <span class="cm">/* by looking at empty BAT arguments */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">){</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)];</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * The bulk of the intelligence lies in inspecting calling</span>
</span><span class='line'><span class="cm">          * sequences to filter and replace calls with empty arguments.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">bindidxRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">binddbatRef</span><span class="p">)){</span>
</span><span class='line'>          <span class="n">InstrPtr</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * @-</span>
</span><span class='line'><span class="cm">          * The emptyset assertion is only needed once for relational insertions.</span>
</span><span class='line'><span class="cm">          * We assume here that string constants have been matched already.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">&amp;&amp;</span> <span class="n">runonce</span> <span class="o">==</span> <span class="n">FALSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">ctop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">=</span> <span class="n">constraints</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">2</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">,</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                      <span class="n">strcmp</span><span class="p">(</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">3</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">,</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                      <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span><span class="o">&lt;=</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="cm">/* no updates etc */</span>
</span><span class='line'>                      <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span> <span class="o">==</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span>
</span><span class='line'>                  <span class="p">)</span>
</span><span class='line'>                      <span class="cm">/* don&#39;t generate the assertion */</span>
</span><span class='line'>                      <span class="k">goto</span> <span class="n">ignoreConstraint</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">q</span> <span class="o">=</span> <span class="n">newStmt1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">constraintsRef</span><span class="p">,</span> <span class="s">&quot;emptySet&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>              <span class="n">constraints</span><span class="p">[</span><span class="n">ctop</span><span class="o">++</span><span class="p">]</span><span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="nl">ignoreConstraint:</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>              <span class="cm">/* decode operations */</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="n">existRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="cm">/* always false */</span>
</span><span class='line'>                      <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">=</span> <span class="n">ASSIGNsymbol</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">tuniqueRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">likeRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">sortRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">sortTailRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">sortHTRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">sortTHRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">uniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">suniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">kuniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">intersectRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">sintersectRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">kintersectRef</span>  <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">fragmentRef</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>                      <span class="cm">/* result is empty */</span>
</span><span class='line'>                      <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">differenceRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">kdifferenceRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">sunionRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">kunionRef</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">f</span> <span class="o">==</span> <span class="n">unionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="cm">/* copy non-empty argument */</span>
</span><span class='line'>                      <span class="k">if</span><span class="p">(</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                          <span class="n">propagate</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                          <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">batRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">reverseRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">mirrorRef</span> <span class="p">){</span>
</span><span class='line'>                      <span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * @-</span>
</span><span class='line'><span class="cm">              * If the target variable is empty and the function does not</span>
</span><span class='line'><span class="cm">              * have a side-effect, we can replace it with a construction</span>
</span><span class='line'><span class="cm">              * of the empty set. The dead-code optimizer will take care</span>
</span><span class='line'><span class="cm">              * of removal of superflous constructions.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="o">!</span><span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))){</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">tpe</span><span class="o">=</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">clrFunction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">batRef</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">newRef</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">tpe</span><span class="p">)));</span>
</span><span class='line'>                  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">tpe</span><span class="p">)));</span>
</span><span class='line'>                  <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_emptyset: %d empty sets statements removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>      <span class="n">clrAllTypes</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>     <span class="cm">/* force a complete resolve */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">constraints</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="cm">/*We first have to find all candidates for empty set removal.</span>
</span><span class='line'><span class="cm">  They are recognized by an estimated zero row count and they</span>
</span><span class='line'><span class="cm">  are not the target of an update.*/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">OPTemptySetImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">empty</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">empty</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">vsize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">empty</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">getVarRows</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">OPTDEBUGemptySet</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#START emptyset optimizer %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="n">empty</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">OPTDEBUGemptySet</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">i</span><span class="o">=</span> <span class="n">ESevaluate</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">empty</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">empty</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>11.垃圾回收：</p>
<p>对临时的变量的垃圾回收，如字符串和BATs，在返回函数调用的时候发生。特别对于BATs这可能保留可观的资源锁定长于严格必要的时间。尽管程序员可以影响它们的生命周期通过给它们赋值NIL，从而触发垃圾会后，依靠优化器去注入这样的语句更加恰当。因为它使程序更加短小和有一个更好的代码优化的目标。OPTIMIZER.GARBAGECOLLECTOR()操作去除所有结束生命周期的BAT为新的提供空间。这特别被调用为优化的最后一步。垃圾回收影响的一小段代码：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">t1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">132000</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t3</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t4</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t5</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t6</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t7</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">optimizer</span><span class="p">.</span><span class="n">garbageCollector</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>被转换为以下的代码块</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">t1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">132000</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t3</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t4</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t5</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t6</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t7</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t6</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>当前的算法是直接的。在每一条指令后，我们检查在未来其BAT参数是否需要。如果不需要，我们注入垃圾回收语句去释放她们呢，如果没有其它理由去保留它。这应该小心地去做，因为指令可能是循环的一部分。如果变量在循环里定义，那么我们可以安全地去掉它。</p></p></blockquote>

<figure class='code'><figcaption><span>MonetDB垃圾回收代码实现   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="cm">/*Keeping variables around beyond their end-of-life-span</span>
</span><span class='line'><span class="cm"> can be marked with the proper &#39;keep&#39;.*/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">OPTgarbageCollectorImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">vlimit</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vlimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">p</span><span class="o">-&gt;</span><span class="n">gc</span> <span class="o">&amp;=</span>  <span class="o">~</span><span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">){</span>
</span><span class='line'>          <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>              <span class="n">mb</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">-&gt;</span><span class="n">eolife</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>              <span class="n">p</span><span class="o">-&gt;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="cm">/* force garbage collection of all within upper block */</span>
</span><span class='line'>          <span class="n">depth</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">vlimit</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">==</span> <span class="n">i</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">isaBatType</span><span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">keepProp</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">setVarUDFtype</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">setVarFixed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">=</span> <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">-&gt;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">mb</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">eolife</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">);</span>
</span><span class='line'>  <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">OPTDEBUGgarbageCollector</span><span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#Garbage collected BAT variables </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">vlimit</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;%10s eolife %3d  begin %3d lastupd %3d end %3d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">var</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">eolife</span><span class="p">,</span>
</span><span class='line'>          <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;End of GCoptimizer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_garbagecollector: %d variables reset</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>13.连接路径：</p>
<p>任务OPTIMIZER.JOINPATH()浏览代码寻找连接操作和级联它们到多连接路径。为了说明，考虑：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">a:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">c:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">j1</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">j3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>优化器首先会通过它们连接的顺序替代所有的参数。下面的指令留给去除无用代码优化器优化</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">a:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>在原则上，连接路径可能包含改善性能的公共的子路径。SQL front-end 经常产生以下代码片段：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">t1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">z1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nl">t2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>连接路径合并成：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">z1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>由启发式寻找最先的两个参数控制和重用实质的连接</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">_13:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">z1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">_13</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">_13</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>一个替代是公共重新使用的路径重识别到连接路径主体继承的部分</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="nl">x3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">r3:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">x3</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j1:</span><span class="o">=</span> <span class="n">join</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">r3</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">rb:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">ra:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">rb</span><span class="p">,</span><span class="n">ra</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>MonetDB连接路径优化代码的实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTjoinPathImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">pc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">joinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;joinPath&quot;</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">leftjoinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;leftjoinPath&quot;</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">semijoinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;semijoinPath&quot;</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="n">q</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">varcnt</span><span class="p">;</span>       <span class="cm">/* use count */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">limit</span><span class="p">,</span><span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>  <span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'>  <span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&gt;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* beware, new variables and instructions are introduced */</span>
</span><span class='line'>  <span class="n">pc</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span> <span class="cm">/* to find last assignment */</span>
</span><span class='line'>  <span class="n">varcnt</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pc</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">varcnt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">pc</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">pc</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">varcnt</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">varcnt</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * @-</span>
</span><span class='line'><span class="cm">  * Count the variable use as arguments first.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">joinRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">)){</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * @-</span>
</span><span class='line'><span class="cm">          * Try to expand its argument list with what we have found so far.</span>
</span><span class='line'><span class="cm">          * This creates a series of join paths, many of which will be removed during deadcode elimination.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">q</span><span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>              <span class="n">r</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">pc</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]);</span>
</span><span class='line'>              <span class="cm">/*</span>
</span><span class='line'><span class="cm">              * @-</span>
</span><span class='line'><span class="cm">              * Don&#39;t inject a pattern when it is used more than once.</span>
</span><span class='line'><span class="cm">              */</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                  <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#double use %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]);</span>
</span><span class='line'>                      <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#expand list </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;&amp;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">joinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">joinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                          <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                      <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;&amp;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">leftjoinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">leftjoinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                          <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                      <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">){</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;&amp;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">semijoinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">semijoinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                      <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                          <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                      <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">chkTypes</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">nspace</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>              <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#new [left]joinPath instruction</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">&lt;=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">argc</span><span class="p">){</span>
</span><span class='line'>              <span class="cm">/* no change */</span>
</span><span class='line'>              <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>              <span class="k">goto</span> <span class="n">wrapup</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * @-</span>
</span><span class='line'><span class="cm">          * Final type check and hardwire the result type, because that  can not be inferred directly from the signature</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">!=</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="o">!</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_oid</span>  <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_void</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="o">!</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_void</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_oid</span><span class="p">)){</span>
</span><span class='line'>              <span class="cm">/* don&#39;t use it */</span>
</span><span class='line'>                  <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">goto</span> <span class="n">wrapup</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* fix the type */</span>
</span><span class='line'>          <span class="n">setVarUDFtype</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>          <span class="n">setVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">newBatType</span><span class="p">(</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">)),</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))));</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">3</span>  <span class="o">&amp;&amp;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="p">)</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">joinPathRef</span><span class="p">);</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">3</span>  <span class="o">&amp;&amp;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="p">)</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">leftjoinPathRef</span><span class="p">);</span>
</span><span class='line'>          <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span>  <span class="o">&amp;&amp;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">)</span>
</span><span class='line'>              <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">semijoinPathRef</span><span class="p">);</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span><span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>          <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="n">wrapup</span><span class="o">:</span>
</span><span class='line'>      <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">pc</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&gt;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>          <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="cm">/* perform the second phase, try out */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">actions</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">actions</span> <span class="o">+=</span> <span class="n">OPTjoinSubPath</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'>  <span class="n">GDKfree</span><span class="p">(</span><span class="n">pc</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">varcnt</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">varcnt</span><span class="p">);</span>
</span><span class='line'>  <span class="n">DEBUGoptimizers</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&gt;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_joinpath: %d statements glued</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/10/bugs/"/>
    <updated>2013-04-10T21:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/10/bugs</id>
    <content type="html"><![CDATA[<blockquote><p><p>写完程序，接下来测试，尽可能地去发现程序中的bugs。我负责一个解析终端协议模块，与同事的业务模块合并在一起。之前，我们就进行过不少的测试，出现最多的的是段错误，SIGSEGV信号，即无效的内存引用。</p>
<!-- more -->
<p>1.由于同事改了之前我定义数组的长度，导致程序中的数组越界，同时我也没有进行越界检测，程序被迫退出。</p>
<p>2.当只声明对象指针，却没有给予分配内存，引用对象指针内容或对其里面内容赋值时，也出现段错误。</p>
<p>3.由于自己编程习惯不是很好，调用close函数关闭socket文件描述符的时候，我在不同的地方调用了两次释放同样一个描述符，导致内部调用两次free()函数出错</p>
<p>4.客户端在传送数据时突然关闭，服务端就突然无故退出。后来用gdb调试，才发现SIGPIPE信号，因为在客户端关闭后，服务端还在给客户端在send（）数据，当管道已经破坏。当时解决是：忽略SIGPIPE信号，调用signal(SIGPIPE,SIG_IGN),且检测管道损坏后，不再往管道发送数据。</p>
<p>5.本来是浮点型，直接乘以1000，转换为长整型，数值失真。后来通过floor函数来解决</p>
对函数的使用不太熟悉，如recv函数</p></blockquote>

<figure class='code'><figcaption><span>recv函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="kt">ssize_t</span> <span class="nf">recv</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>6.recv的返回值有正数，0，-1，-2，每一种返回都有其含义，整数代表接收到数据的长度，0代表断开连接，-1代表超时，-2代表错误。对于每一种的返回有其相应的处理。因为当时有个线程没有退出，是因为少考虑了一种情况。其实这个函数有更多的返回。</p>
<p>7.网络上传输的数据不能用strlen函数来得出长度，而应该根据recv函数返回的长度.</p>
<p>8.使用inet_addr()函数是把IP地址转化为网络序，而不是主机序长整形。自己实现函数转换，熟悉位操作。</p>
<p>9.strcpy函数是已经对目标字符串加了&#8217;\0&#8217;,与字符相关的函数操作strlen，strcmp，strcpy都会用到&#8217;\0&#8217;判断字符的结束。同时memcpy函数是不加&#8217;\0&#8217;的，这个是通用的数据复制函数。不单单支持char类型。</p>
<p>10.使用osip库中的API的时候，当出现问题时，要懂得看源码，弄懂它的实现机制。如用两个线程绑定不同的IP的5060端口，在eXosip库是不可以的，因为它的实现里用到一个全局的结构体，后面的会覆盖前面的设置，只有一个IP的5060有效。可能需要两个进程解决，但同时又要解决两个进程的通信问题了。</p>
<p>11.eXosip_call_ack函数发送的ack总是收不到，用wireshark抓包也抓不到，仔细检查过代码后，还是觉得没问题，后来百度了一下，有人提到是网络不通，后来同事辛辛苦苦弄出来了，原来同事的虚拟机安装了virbird的服务，导致网络不通。具体的原因我现在还没清楚，可能同事也是看源码弄清楚,还是挺欣赏同事从库的源代码找思路解决问题的。</p>
<p>12.1 这两天我们的程序又出现破坏堆中内存分配的信息数据的信息：</p>
<p>    glibc detected * free(): invalid pointer: </p>
<p>    glibc detected * malloc(): memory corruption:</p>
<p>    glibc detected * double free or corruption (out): 0x005c18a0 <em>**</p>
<p>    glibc detected * corrupted double-linked list: 0x005ab150 </em></p>
<p>12.2 如果破坏了自己的其它对象的内存空间，就可能诱发coredump的错误。</p>
<p>12.3一般出现这些内存问题的原因：</p>
<p> a.使用未初始化的内存（using uninitialized memory.未初始化的内存的垃圾值可能会导致不可预测的错误）</p>
<p> b.内存泄漏，分配的内存忘了释放 ；内存重复释放，出现double free；（faulty heap memory management：内存泄漏，释放空指针或释放未分配的内存）</p>
<p> c.内存越界使用，使用了不该使用的内存（Using beyond allocated memory缓冲溢出，栈保护）</p>
<p> d.使用了无效的指针 （Using un-owned memory，null指针和悬挂或野指针。如多线程中某一动态分配的对象同时被两个线程使用。一个线程释放了该对象，而另一线程还对该对象进行操作）</p>
<p> e.空指针，对一个空指针进行操作 </p>
<p>12.4 排查的原则，首先保证能重现错误。根据错误估计可能的环节，逐步裁剪代码，缩小排查空间检查所有的内存操作函数，检查内存越界的可能性。常用的内存操作函数：</p>
<p>字符串输出：sprintf snprintf vsprintf vsnprintf </p>
<p>字符串操作：strcpy strncpy strcat </p>
<p>内存操作：memcpy memmove memset bcopy</p>
<p>12.5排查的工具：gdb（调试器），Purify，Valgrind，Insure++,AddressSanitizer</p>
<p>13.程序中出现：glibc detected * free(): invalid pointer，原来是sip库里函数实现有free，但却无知地传入个数组。应该动态申请内存。</p>
<p><a href="http://en.wikipedia.org/wiki/Memory_corruption">Reference wiki：memory corruption</a></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB's Mmap]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/29/monetdbs-memory/"/>
    <updated>2013-03-29T23:47:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/29/monetdbs-memory</id>
    <content type="html"><![CDATA[<blockquote><p><p>在学计算机组成原理时，了解到为了平衡CPU的高速与内存慢速，在CPU与内存之间增加了L1 cache，L2 cache，以加快CPU对内存数据的访问。但同时了解到进程可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区和访问大于可用物理内存地址的缓冲区（可与磁盘之间切换）。虚拟地址通过TLB转化为物理地址，若物理地址属于内存空间，即直接访问，若不在，即需要进行磁盘切换。层级的内存架构图：</p>
<!-- more -->
<img src="http://coolbrain.github.com/assets/images/memory.jpg" alt="&quot;memory&quot;" />
mmap将文件或者其它对象映射到内存。当从内存中读写时，就相当于读写文件中相应的字节。</p></blockquote>

<figure class='code'><figcaption><span>mmap函数声明  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">mman</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="o">*</span><span class="n">mmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">,</span><span class="kt">int</span> <span class="n">fileds</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">off</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>图示说明mmap：
<img src="http://coolbrain.github.com/assets/images/mmap.png" alt="&quot;mmap&quot;" />
MonetDB使用mmap实现大内存块的分配和大文件的内存映射,这样有利于数据的快速查找。因为数据不在内存，直接进行磁盘切换（虚拟地址->物理地址）。</p></blockquote>

<figure class='code'><figcaption><span>Linux大内存的分配  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="nf">MT_vmalloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">MMAP_OPEN_DEV_ZERO</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="o">*</span><span class="n">maxsize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_NORESERVE</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_FIXED</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">MMAP_CLOSE_DEV_ZERO</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="n">q</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">)</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>Windows大内存的分配  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="kt">void</span> <span class="o">*</span><span class="nf">MT_vmalloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">MT_SEGSIZE</span><span class="p">(</span><span class="o">*</span><span class="n">maxsize</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mode</span> <span class="o">=</span> <span class="n">MEM_TOP_DOWN</span><span class="p">;</span>    <span class="cm">/* help NT in keeping memory defragmented */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">MT_mmap_lock</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">VirtualAlloc</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">,</span> <span class="n">MEM_RESERVE</span> <span class="o">|</span> <span class="n">mode</span><span class="p">,</span> <span class="n">PAGE_NOACCESS</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">VirtualAlloc</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">MEM_COMMIT</span> <span class="o">|</span> <span class="n">mode</span><span class="p">,</span> <span class="n">PAGE_READWRITE</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">MT_mmap_lock</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKstdout</span><span class="p">,</span> <span class="s">&quot;#VirtualAlloc(&quot;</span> <span class="n">PTRFMT</span> <span class="s">&quot;,&quot;</span> <span class="n">SZFMT</span> <span class="s">&quot;,MEM_COMMIT,PAGE_READWRITE): failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">PTRFMTCAST</span> <span class="n">a</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>MonetDB直接使用系统的mmap，由它来进行内存与磁盘的交互。而在这基础上，在进行内存分配管理。譬如在MonetDB中有使用sql_allocator建立内存缓冲区，当缓冲区内存不够时，才向系统申请。这样能加快内存申请速度和方便管理。此种方式是使用指针数组的管理内存，而没有使用链表。这与C++STL库的空间分配器类似，对于MonetDB内部数据结构，如list，hashtable，都是使用sql_allocator来管理其申请的内存。</p></blockquote>

<figure class='code'><figcaption><span>sql_allocator结构体  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="k">typedef</span> <span class="k">struct</span> <span class="n">sql_allocator</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">nr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">**</span><span class="n">blks</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">used</span><span class="p">;</span>  <span class="cm">/* memory used in last block */</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">usedmem</span><span class="p">;</span>   <span class="cm">/* used memory */</span>
</span><span class='line'><span class="p">}</span> <span class="n">sql_allocator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>具体的分配分三种情况处理，一：大于sz > SA_BLOCK,直接调用系统的GDKmalloc来分配；二：剩下来的内存不够分配sz > (SA_BLOCK-sa->used) 三：内存足够，只需进行必要的处理。</p></blockquote>

<figure class='code'><figcaption><span>sa_alloc函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">define</span> <span class="n">round16</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span> <span class="p">((</span><span class="n">sz</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span><span class="o">&amp;~</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">sa_alloc</span><span class="p">(</span> <span class="n">sql_allocator</span> <span class="o">*</span><span class="n">sa</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">sz</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sz</span> <span class="o">=</span> <span class="n">round16</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sz</span> <span class="o">&gt;</span> <span class="n">SA_BLOCK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span> <span class="o">&gt;=</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>          <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span> <span class="o">=</span> <span class="n">RENEW_ARRAY</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">,</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">t</span> <span class="o">=</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sz</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">SA_BLOCK</span><span class="o">-</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">SA_BLOCK</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span> <span class="o">&gt;=</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>          <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span> <span class="o">=</span> <span class="n">RENEW_ARRAY</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">,</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">sa</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&gt;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">+=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="o">-&gt;</span><span class="n">usedmem</span> <span class="o">+=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catch Signal in MonetDB]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/28/catch-signal-in-monetdb/"/>
    <updated>2013-03-28T23:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/28/catch-signal-in-monetdb</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB运行在Unix系统上，就需要进行一些系统的捕捉和处理。下列是常见的几种信号：</p>
<!-- more -->
<table border="1">
<tr><td>SIGCHLD:</td><td>在一个进程终止或停止时，将SIGCHLD信号发送给父进程。信号捕捉函数中通常要调用一种wait函数取得子进程ID和其终止的状态。</td></tr>
<tr><td>SIGHUP:</td><td>通常此信号通知守护进程，以重新读取它们的配置文件。</td></tr>
<tr><td>SIGINT:</td><td>当用户按中断键(一般是DELETE或Ctrl+C)时，终端驱动程序产生此信号并送至前台进程组中的每一个进程。</td></tr>
<tr><td>SIGKILL:</td><td>这是不能被捕捉或忽略的信号之一。它向系统管理员提供了一种可以杀死任一进程的可靠方法。</td></tr>
<tr><td>SIGQUIT:</td><td>当用户在终端上按退出键（Ctrl+)时，产生此信号，并送至前台进程组中的所有进程。此信号不仅会终止前台进程组，同时还会产生一个core文件。</td></tr>
</table>
UNIX的处理信号集的操作：</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sigemptyset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">sigfillset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">sigaddset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">sigdelset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">sigismember</span><span class="p">(</span><span class="n">sonct</span> <span class="n">sigset_T</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span><span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>UNIX sigaction函数的功能是检查和修改与指定信号相关联的处理动作。</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sigaction</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sigaction</span><span class="o">*</span> <span class="kr">restrict</span> <span class="n">act</span><span class="p">,</span>
</span><span class='line'>                                  <span class="k">struct</span> <span class="n">sigaction</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">oact</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sigaction</span><span class="p">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">sa_handler</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>     <span class="cm">/*addr of signal handler*/</span>
</span><span class='line'>      <span class="n">sigset_t</span> <span class="n">sa_mask</span><span class="p">;</span>           <span class="cm">/*or SIG_IGN,or SIG_DFL*/</span>
</span><span class='line'>      <span class="kt">int</span>     <span class="n">sa_flags</span><span class="p">;</span>            <span class="cm">/*signal options*/</span>
</span><span class='line'>      <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">sa_sigaction</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="n">siginfo_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>   <span class="cm">/*alternate handler*/</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>下面是MonetDB捕捉SIGINT，SIGQUIT，SIGTERM信号的代码，处理的是handler函数</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">handler</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>          <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>          <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Handler for SIGINT, SIGTERM and SIGQUIT.  This starts a graceful</span>
</span><span class='line'><span class="cm"> * shutdown of merovingian.*/</span>
</span><span class='line'><span class="kt">void</span>  <span class="n">handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">signame</span> <span class="o">=</span> <span class="n">sigtostr</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">signame</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;caught signal %d, starting shutdown sequence</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;caught %s, starting shutdown sequence</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signame</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">_mero_keep_listening</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>捕捉SIGHUP信号，处理是huphandler函数，重新读取配置文件</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">huphandler</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGHUP</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Handler for SIGHUP, causes a re-read of the .merovingian_properties</span>
</span><span class='line'><span class="cm"> * file and the logfile to be reopened.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="n">huphandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">time_t</span> <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">tm</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">mytime</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">confkeyval</span> <span class="o">*</span><span class="n">kv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* re-read properties, we&#39;re in our dbfarm */</span>
</span><span class='line'>  <span class="n">readProps</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* check and trim the hash-algo from the passphrase for easy use</span>
</span><span class='line'><span class="cm">  * lateron */</span>
</span><span class='line'>  <span class="n">kv</span> <span class="o">=</span> <span class="n">findConfKey</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;passphrase&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">kv</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">h</span> <span class="o">=</span> <span class="n">kv</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">f</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="sc">&#39;}&#39;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">MONETDB5_PASSWDHASH</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="n">f</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* have to make sure the logger is not logging anything */</span>
</span><span class='line'>  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strftime</span><span class="p">(</span><span class="n">mytime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mytime</span><span class="p">),</span> <span class="s">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="p">,</span> <span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="n">getConfVal</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;logfile&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="cm">/* reopen (or open new) file */</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_APPEND</span> <span class="o">|</span> <span class="n">O_CREAT</span><span class="p">,</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;forced to ignore SIGHUP: unable to open &quot;</span>
</span><span class='line'>              <span class="s">&quot;&#39;%s&#39;: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">,</span> <span class="s">&quot;%s END merovingian[&quot;</span> <span class="n">LLFMT</span> <span class="s">&quot;]: &quot;</span>
</span><span class='line'>              <span class="s">&quot;caught SIGHUP, closing logfile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">mytime</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">_mero_topdp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fflush</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">);</span>
</span><span class='line'>      <span class="n">_mero_topdp</span><span class="o">-&gt;</span><span class="n">out</span> <span class="o">=</span> <span class="n">_mero_topdp</span><span class="o">-&gt;</span><span class="n">err</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_mero_logfile</span> <span class="o">=</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">,</span> <span class="s">&quot;%s BEG merovingian[&quot;</span> <span class="n">LLFMT</span> <span class="s">&quot;]: &quot;</span>
</span><span class='line'>              <span class="s">&quot;reopening logfile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">mytime</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">_mero_topdp</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* logger go ahead! */</span>
</span><span class='line'>  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>捕捉SIGCHLD信号，处理childhandler，处理释放子进程的资源和清理。</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_SIGINFO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sa_sigaction</span> <span class="o">=</span> <span class="n">childhandler</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGCHLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Handles SIGCHLD signals, that is, signals that a parent receives</span>
</span><span class='line'><span class="cm"> * about its children.  This handler deals with terminated children, by</span>
</span><span class='line'><span class="cm"> * deregistering them from the internal administration (_mero_topdp)</span>
</span><span class='line'><span class="cm"> * with the necessary cleanup.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span>  <span class="n">childhandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">,</span> <span class="n">siginfo_t</span> <span class="o">*</span><span class="n">si</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">unused</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">dpair</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">unused</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* wait for the child to get properly terminated, hopefully filling</span>
</span><span class='line'><span class="cm">  * in the siginfo struct on FreeBSD */</span>
</span><span class='line'>  <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_EXITED</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_KILLED</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_DUMPED</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* ignore traps, stops and continues, we only want terminations</span>
</span><span class='line'><span class="cm">      * of the client process */</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* get the pid from the former child, and locate it in our list */</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="n">_mero_topdp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span> <span class="o">==</span> <span class="n">si</span><span class="o">-&gt;</span><span class="n">si_pid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* log everything that&#39;s still in the pipes */</span>
</span><span class='line'>          <span class="n">logFD</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">out</span><span class="p">,</span> <span class="s">&quot;MSG&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">,</span> <span class="n">_mero_logfile</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/* remove from the list */</span>
</span><span class='line'>          <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>          <span class="cm">/* close the descriptors */</span>
</span><span class='line'>          <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>          <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_EXITED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) has exited with &quot;</span>
</span><span class='line'>                      <span class="s">&quot;exit status %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">,</span> <span class="n">si</span><span class="o">-&gt;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_KILLED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kt">char</span> <span class="o">*</span><span class="n">sigstr</span> <span class="o">=</span> <span class="n">sigtostr</span><span class="p">(</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>              <span class="kt">char</span> <span class="n">signum</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">sigstr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">snprintf</span><span class="p">(</span><span class="n">signum</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">si</span><span class="o">-&gt;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">sigstr</span> <span class="o">=</span> <span class="n">signum</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) was killed by signal &quot;</span>
</span><span class='line'>                      <span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">,</span> <span class="n">sigstr</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_DUMPED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) has crashed &quot;</span>
</span><span class='line'>                      <span class="s">&quot;(dumped core)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>              <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">dbname</span><span class="p">);</span>
</span><span class='line'>          <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;received SIGCHLD from unknown child with pid %lld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">si</span><span class="o">-&gt;</span><span class="n">si_pid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIP Application]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/27/sip-introduction/"/>
    <updated>2013-03-27T23:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/27/sip-introduction</id>
    <content type="html"><![CDATA[<blockquote><p><p>实习期间，接触到SIP，对其略有所闻。SIP（Session Initiation Protocol) 协议是类似于http的基于文本的协议，应用层的信令控制协议。用于创建，修改和释放一个或多个参与者的会话。主要用于IP电话,视频等。</p>
<!-- more -->
<p>SIP协议支持TCP和UDP，端口5060.也可以穿越防火墙（NAT).SIP协议为用户两端建立连接，然后使用RTP协议进行两端的语音通信。两端建立连接，类似于TCP的三次握手；两端通话结束，要断开连接，goodbye确认。</p>
此图显示一个sip的具体例子：
<p>INVITE sip:user2@there.com
  To:sip:user2@there.com
  From:sip:user1@here.com
&#8230;..（user1&#8217;s SDP not shown)</p>
<img src="http://coolbrain.github.com/assets/images/sip.png" alt="&quot;SIP&quot;" />
<p>现成已经有实现SIP协议解析的库，比较短小精悍的osip和其扩展的Exosip。我们的项目就是基于Exosip的基础上进行开发的。</p>
osip比较重要的一个数据结构osip_message,用于封装发送和接受的数据。</p></blockquote>

<figure class='code'><figcaption><span>osip_message  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">osip_message</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">sip_version</span><span class="p">;</span>
</span><span class='line'>  <span class="n">osip_uri_t</span> <span class="o">*</span><span class="n">req_uri</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">sip_method</span><span class="p">;</span>          <span class="cm">/**&lt;METHOD(SIP request only)*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">statue_code</span><span class="p">;</span>          <span class="cm">/**&lt;status Code(SIP answer only)*/</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">reason_phrase</span><span class="p">;</span>       <span class="cm">/**&lt;Reason Phrase(SIP answer only)*/</span>
</span><span class='line'>  <span class="n">osip_from_t</span> <span class="o">*</span><span class="n">from</span><span class="p">;</span>          <span class="cm">/**&lt;From header **/</span>
</span><span class='line'>  <span class="n">osip_to_t</span>   <span class="o">*</span><span class="n">to</span><span class="p">;</span>            <span class="cm">/**&lt;To header**/</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'><span class="p">}</span>  
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>EXoisp扩展库支持事件类型的数据结构，用于识别状态的转移，到什么状态。</p></blockquote>

<figure class='code'><figcaption><span>osip_event  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">eXosip_event</span><span class="p">{</span>
</span><span class='line'>  <span class="n">eXosip_event_type_t</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span>    <span class="n">textinfo</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span>   <span class="n">external_reference</span><span class="p">;</span>
</span><span class='line'>  <span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">request</span><span class="p">;</span>
</span><span class='line'>  <span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">response</span><span class="p">;</span>
</span><span class='line'>  <span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">ack</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">tid</span><span class="p">;</span>      <span class="cm">/**unique id for transations(to be used for answers)**/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">did</span><span class="p">;</span>      <span class="cm">/**unique id for SIP dialogs**/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rid</span><span class="p">;</span>      <span class="cm">/**unique id for registration**/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cid</span><span class="p">;</span>      <span class="cm">/**unique id for calls(but multiple dialogs!)**/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sid</span><span class="p">;</span>      <span class="cm">/**unique id for outgoing subscriptions*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nid</span><span class="p">;</span>        <span class="cm">/**unique id for incoming subscription*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ss_status</span><span class="p">;</span>    
</span><span class='line'>  <span class="kt">int</span> <span class="n">ss_reason</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>库的使用：初始化eXosip  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;eXosip2/eXosip.h&gt;</span>
</span><span class='line'><span class="n">eXosip_t</span> <span class="o">*</span><span class="n">ctx</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">port</span><span class="o">=</span><span class="mi">5060</span><span class="p">;</span>
</span><span class='line'><span class="n">TRACE_INITIALIZE</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">ctx</span> <span class="o">=</span> <span class="n">eXosip_malloc</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span><span class="o">=</span><span class="n">eXosip_init</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">eXosip_listen_addr</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">IPPROTO_UDP</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">AF_INET</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="cm">/*Open a UDP socket for signalling*/</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">eXosip_quit</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fprintf</span> <span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;could not initialize transport layer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote></blockquote>

<figure class='code'><figcaption><span>处理eXosip2事件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">eXosip_event_t</span> <span class="o">*</span><span class="n">evt</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;;)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">evt</span> <span class="o">=</span> <span class="n">eXosip_event_wait</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eXosip_lock</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eXosip_automatic_action</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eXosip_unlock</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">evt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_NEW</span><span class="p">)</span>  <span class="cm">/**Answer 180 Ringing to an incoming INVITE**/</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">eXosip_lock</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>          <span class="n">eXosip_call_send_answer</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">evt</span><span class="o">-&gt;</span><span class="n">tid</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="n">eXosip_unlock</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_ACK</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>      <span class="p">....</span>
</span><span class='line'>      <span class="p">....</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_ANSWERED</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>      <span class="p">....</span>
</span><span class='line'>      <span class="p">....</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">.....</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="n">eXosip_event_free</span><span class="p">(</span><span class="n">evt</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB Main Features]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/22/monetdb-main-features/"/>
    <updated>2013-03-22T22:37:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/22/monetdb-main-features</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>以列存储数据库内核</strong></p>
<p>MonetDB是建立在规范的以列存储的数据库关系表示。它们是相当大的实体，达到几百兆，通过操作系统交换到内存，实现的时候使用的mmap文件内存映射，这对于一个内存能装满整个数据库的系统来说，速度非常地快，如果数据库非常的庞大，那就会导致系统不断地换页，甚至抖动。有必要时，压缩存回磁盘，压缩的效率也很好，因为以列存储，相似程度很高，压缩率自然会高，这需要CPU的时间，但同时节省磁盘的空间，时间换空间，<strong>这有待商议</strong>。</p>
<!-- more -->
<p><strong>高性能的系统</strong></p>
<p>MonetDB擅长于数据库是热启动的应用，其实是数据库被用到的部分，大部分都可以存储在内存或者几个表的几个列就足够处理个别的请求。深入地利用cache-conscious 算法证明了这些设计决策的有效性。</p>
<p><strong>接下来关注的MonetDB是以下的创新：</strong></p>
<p>列存储：在传统中，关系数据库系统以行存储数据，方便整条记录的查询，而MonetDB使用的列存储，更好地利用CPU缓冲线去支持分析查询.</p>
<P>批量查询代数：如CISC对抗RISC思想应用于CPU的设计中，MonetDB的代数在传统关系集代数上尽可能简化，允许在现代硬件上有更加快速的实现。</p>
<p>有意识缓冲算法：这关键的一面，在于恰好地利用CPU缓冲和最优的内存访问模式，去突破内存瓶颈的限制。这叫做查询处理算法的一个新品种，我们将在根分区的散列连接中有详细的描述。</p>
<p>内存访问代价模型：因为优化的查询工作在有意识缓冲算法的环境下，我们发展了一个构建代价模型，把内存访问代价都考虑进来的方法学。为了工作在不同的计算机，使用自动校准技术，这些模型在运行时被参数化。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB Architecture overview]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/22/monetdb-architecture-overview/"/>
    <updated>2013-03-22T20:04:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/22/monetdb-architecture-overview</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>总体概览</strong></p>
<p>MonetDB 类属于数据库管理系统，被设计首要用于数据仓库环境。这样的环境特征是大仓库，常用于被查询来进行商业智能的抉择。它们也会经常出现在科学领域上，大仓库的科学观察数据可以用来进一步的科学分析。设计关注于大量的处理是不可能的。针对有效地利用硬件的最大处理能力。设计的目的反应在架构的各个层次和提供给用户的功能。尽管MonetDB/SQL提供了完善的SQL接口，但是在大容量，且需要保存不同层次的ACID属性的事务处理能力有点欠缺。</p>
<!-- more -->
<p><strong>存储模型</strong></p>
<p>MonetDB的存储模型与传统的数据库截然不同。它表示关系表使用垂直存储，每一列以｛（surrogate，value）｝这样的表存储，称为BAT(Binary Association Table).左边的列，代理数字或对象id,称为头；右边的列为尾。MonetDB执行一种低级的被称为BAT代数的关系代数。在执行的时候，数据常存储在(intermediate中间）BAT,就算是查询的结果也是BAT的集合。BAT存储采用方式是两个简单的内存数组，一个数组是头，另一个是尾（列）.对不同长度的类型我们把数组分成两段。一段with concatenated data values and 另一段with offsets into the former.对于小字符串值表来说，组合就实现了值字典了。</p>
<p>MonetDB在内部实现存储列是使用内存文件映射。它们被优化到特有的情况就是代理的列是一些升序的阿拉伯数字（0，1，2&#8230;);在某些情况下代理列是可以保持模糊的。代理列查询成为一种以快速数组下标读取尾的方式。实际上，这种在虚拟内存使用数组利用MMU快速把硬件地址映射为磁盘地址的机制去给数据库提供O（1）效率的数据库寻找机制。</p>
<p>从CPU开销的角度看，这种方法优于B-tree  into slotted pages&#8211;这是传统数据库实现记录快速查找的方法。</p>
<p><strong>运行模型</strong></p>
<p>MonetDB的内核是一台抽象的机器，用MonetDB的汇编语言，也称为MAL。每一个关系代数运算对应一个MAL指令。每一个BAT代数运算映射一条简单的MAL指令，这具有零的自由度：它不会采用复杂的表达式作为参数。反而，复杂的表达式会被拆分成一系列的BAT代数运算，每一条都对整个列的值执行一个简单的操作（&#8221;bulk processing&#8221;)。这样就容许BAT代数的解析实现中忽略表达式解析引擎的实现。反而所有的BAT代数运算在实现的时候都会映射成一个简单的数组操作。比如，BAT代数表达是</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">R</span><span class="p">:</span><span class="n">bat</span><span class="p">[:</span><span class="n">oid</span><span class="p">,:</span><span class="n">oid</span><span class="p">]</span> <span class="p">:</span><span class="o">=</span> <span class="k">select</span><span class="p">(</span><span class="n">B</span><span class="p">:</span><span class="n">bat</span><span class="p">[:</span><span class="n">oid</span><span class="p">,:</span><span class="nb">int</span><span class="p">],</span> <span class="n">V</span><span class="p">:</span><span class="nb">int</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>在C语言实现会像：</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">B</span><span class="p">.</span><span class="n">tail</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">V</span><span class="p">)</span>
</span><span class='line'>          <span class="n">R</span><span class="p">.</span><span class="n">tail</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>BAT代数运算具有的优势：紧凑的for-loops创造了指令的局部性，从而消除了指令在缓存miss的问题。这样简单的循环经得起编译器优化（循环流水线，阻塞，强度减少）和CPU无序的可能 。
<p><strong>软件架构</strong></p>
<p>MonetDB 查询处理的方案分为三个软件层。   顶层是由查询语言解析器和一个启发式，language-and data model-specific 优化器组成。优化器主要是用来减少中间生成的数据和利用catalogue 知识 on join-indices。输出是一个用MAL表达的逻辑计划。</p>
<p>第二梯队包括一组优化的模块，这些模块组装成优化的管道。这些模块提供优化从符号处理到即时数据分布和执行。MAL程序被转化为更加有效的代码和加入资源管理指令。这种认识到不是所有的决定都可以组合在一起然后得出一个代价公式方法，突破了至今无处不在的基于代价的优化器。操作在普通的二维关系后端代数，这些优化模块共享所有的前端数据模型和查询语言。</p>
<p>第三梯度是MAL解析器，包含高度优化实现的二维关系代数运算的库。它们维持对象的属性是为了以后的算法能访问得到。举个例子，选择操作可以从sorted-nest of BAT的基础上提高效率。
<p><strong>SQL 前端</strong></p>
<p>BAT 存储层次结合MAL代数提供了一个灵活的架构适应广泛的查询语言。关系表的列在前端被分解，BAT 头TID，尾values。对于每一个表，一个BAT被删除的地方被保留。三角的BAT被设计用来延迟更新到主列和允许相对廉价的快照隔离机制(只有三角BATs被赋值）。MonetDB/SQL为join indices 保留另外的BATs和value indices 是动态创建的。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB's Debugging]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/21/monetdbs-debugging/"/>
    <updated>2013-03-21T21:39:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/21/monetdbs-debugging</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB can run in different platform,including linux&#8217;s  and window&#8217;s series.Because I want to learn how to use gdb to debug,thus, MonetDB&#8217;s installed on Unbuntu12.10 and &#8211;debug&#8211;init set on true</p>
<!-- more -->
<p>Now,use command &#8221; gdb mserver5&#8221; to debug, or use command &#8220;ps -aux | grep mserver&#8221; to find pid,thus, &#8220;gdb pid&#8221;</p>
<p>MonetDB is a multiprocess and multithread program, and has a daemon process &#8220;monetdbd&#8221; listen on 5000. when mclient connect the server, based on which database will be accessed, if no process is processing the database,the daemon process fork a process to process the request.otherwise,the daemon process doesn&#8217;t fork a process and use lock to contorl simultaneous access.</p>
<p>If we want to use gdb to debug such complicated program. we should get familar with gdb.</p>
<p>use comand &#8220;help&#8221; in gdb. it will list the classes of command.</p>
<p>breakpoints   &#8211;Making program stop at certain point.</p>
<p>data    &#8211;Examining data</p>
<p>running &#8211;Running the program</p>
<p>stack  &#8211;Examing the stack</p>
在调试MonetDB的时候，学会使用gdb去调试比较关键。譬如，要看函数的调用关系，用bt；输出某结构，set print pretty on, print <em>struct,动态数组还需print </em>struct@max_index。使用了gdb调试，觉得gdb比有界面的调试器强大好多。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB's Structure Analysis]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/16/monetdbs-structure-analysis/"/>
    <updated>2013-03-16T17:04:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/16/monetdbs-structure-analysis</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB belongs to the class of database management systems designed primarilly for datawarehouse evironment.It has many components to construct.According to my ability I only focus myself on the kernel structure.</p>
MALBLK is used as the MonetDB Assembly language Block which store the instructions which will be executed.
<!-- more --></p></blockquote>

<figure class='code'><figcaption><span>MALBLK   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">MALBLK</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">binding</span><span class="p">;</span>       <span class="cm">/*related C-funtion*/</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">help</span><span class="p">;</span>         <span class="cm">/*supportive commentary*/</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">MALBLK</span> <span class="o">*</span><span class="n">alternative</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vtop</span><span class="p">;</span>            <span class="cm">/*next free slot*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">vsize</span><span class="p">;</span>           <span class="cm">/*size of variable arena*/</span>
</span><span class='line'>  <span class="n">VarRecord</span> <span class="o">**</span><span class="n">var</span><span class="p">;</span>   <span class="cm">/*Variable table*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">stop</span><span class="p">;</span>        <span class="cm">/*next free slot;*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ssize</span><span class="p">;</span>         <span class="cm">/*byte size of arena*/</span>
</span><span class='line'>  <span class="n">InstrPtr</span> <span class="o">*</span><span class="n">stmt</span>        <span class="cm">/*Instruction Location*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ptop</span><span class="p">;</span>            <span class="cm">/*next free slot*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">psize</span><span class="p">;</span>           <span class="cm">/*byte size of arena*/</span>
</span><span class='line'>  <span class="n">MalProp</span> <span class="o">*</span><span class="n">prgs</span><span class="p">;</span>     <span class="cm">/*property table*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">errors</span><span class="p">;</span>      <span class="cm">/*left over errors*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">typefixed</span><span class="p">;</span>       <span class="cm">/*no undetermined instruction*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">flowfixed</span><span class="p">;</span>       <span class="cm">/*all flow instructions are fixed*/</span>
</span><span class='line'>  <span class="n">ProfPtr</span> <span class="n">profiler</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">MALBLK</span> <span class="o">*</span><span class="n">history</span><span class="p">;</span>  <span class="cm">/*of optimizer actions*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">keephistory</span><span class="p">;</span>        <span class="cm">/*do we need the history at all*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">dotfile</span><span class="p">;</span>            <span class="cm">/*send dot file to stethoscope*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">marker</span><span class="p">;</span>           <span class="cm">/*history points are marked for backtracking*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">maxarg</span><span class="p">;</span>               <span class="cm">/*keep track on the maximal arguments used*/</span>
</span><span class='line'>  <span class="n">ptr</span> <span class="n">replica</span>               <span class="cm">/*for the replicator tests*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">recycle</span><span class="p">;</span>          <span class="cm">/*execution subjuect to recycler control*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">recid</span><span class="p">;</span>               <span class="cm">/*ID given by recycler optimizer*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">legid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">trap</span><span class="p">;</span>               <span class="cm">/*call debugger when called*/</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">MalBlkPtr</span><span class="p">,</span> <span class="n">MalBlkRecord</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>InstrRecord is used as storing many fields of a instruction.</p></blockquote>

<figure class='code'><figcaption><span>InstrPtr   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">token</span><span class="p">;</span>     <span class="cm">/*instruction type*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">barrier</span><span class="p">;</span>   <span class="cm">/*flow of control modifier takes;BARRIER,LEAVE,REDO,EXIT,CATCH,RAISE*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">typechk</span><span class="p">;</span>   <span class="cm">/*type check status*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">gc</span><span class="p">;</span>            <span class="cm">/*garbage control flags*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">polymorphic</span><span class="p">;</span>   <span class="cm">/*complex type analysis*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">varargs</span><span class="p">;</span>   <span class="cm">/*variable number of arguments*/</span>
</span><span class='line'>  <span class="n">bit</span> <span class="n">recycle</span><span class="p">;</span>   <span class="cm">/*lower than 0 or index into recycle cache*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">jump</span><span class="p">;</span>     <span class="cm">/*controlflow program counter*/</span>
</span><span class='line'>  <span class="n">MALfcn</span> <span class="n">fcn</span><span class="p">;</span>        <span class="cm">/*resolved function address*/</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">MALBLK</span> <span class="o">*</span><span class="n">blk</span><span class="p">;</span> <span class="cm">/*resolved MAL function address*/</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">modname</span><span class="p">;</span>   <span class="cm">/*module context*/</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">fcnname</span><span class="p">;</span>    <span class="cm">/*function name*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="n">retc</span><span class="p">,</span><span class="n">maxarg</span><span class="p">;</span> <span class="cm">/*total and result argument count*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">argv</span><span class="p">[];</span>   <span class="cm">/*at least a few entries*/</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">InstrPtr</span><span class="p">,</span> <span class="n">InstrRecord</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>VARRECORD is used as storing variables.</p></blockquote>

<figure class='code'><figcaption><span>VARRECORD   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">VARRECORD</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>            <span class="cm">/*argname or lexical value repr*/</span>
</span><span class='line'>  <span class="n">malType</span> <span class="n">type</span><span class="p">;</span>      <span class="cm">/*internal type signature*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>            <span class="cm">/*see below, reserve some space*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">tmpindex</span><span class="p">;</span>     <span class="cm">/*temporary variable*/</span>
</span><span class='line'>  <span class="n">ValRecord</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">eoflife</span><span class="p">;</span>      <span class="cm">/*pc index when it should be garbage collected*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">propc</span><span class="p">,</span> <span class="n">maxprop</span><span class="p">;</span> <span class="cm">/*proc count and max number of properties*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">prps</span><span class="p">[];</span>           <span class="cm">/*property array*/</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">VarPtr</span><span class="p">,</span> <span class="n">VarRecord</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>ValRecord structure is used as describing the details of one variable.</p></blockquote>

<figure class='code'><figcaption><span>ValPtr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">union</span> <span class="p">{</span>           <span class="cm">/*storage is first in the record*/</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">ival</span><span class="p">;</span>
</span><span class='line'>      <span class="n">oid</span> <span class="n">oval</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">short</span> <span class="n">shval</span><span class="p">;</span>
</span><span class='line'>      <span class="n">byte</span> <span class="n">btval</span><span class="p">;</span>
</span><span class='line'>      <span class="n">word</span> <span class="n">wval</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">fval</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ptr</span> <span class="n">pval</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">BAT</span> <span class="o">*</span><span class="n">Bval</span><span class="p">;</span> <span class="cm">/*this field is only used by mel*/</span>
</span><span class='line'>      <span class="n">bat</span> <span class="n">bval</span><span class="p">;</span>
</span><span class='line'>      <span class="n">str</span> <span class="n">sval</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dbl</span> <span class="n">dval</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">lval</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="n">vtype</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">ValPtr</span><span class="p">,</span><span class="n">ValRecord</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>BAT is described as Binary Association Table.It is one of most important structure in MonetDB.</p></blockquote>

<figure class='code'><figcaption><span>BAT  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">typedef</span> <span class="k">struct</span> <span class="n">BAT</span><span class="p">{</span>
</span><span class='line'>      <span class="cm">/*static bat properties*/</span>
</span><span class='line'>      <span class="n">bat</span> <span class="n">batCacheid</span><span class="p">;</span>        <span class="cm">/*index into BBP*/</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/*dynamic column properties*/</span>
</span><span class='line'>      <span class="n">COLrec</span> <span class="o">*</span><span class="n">H</span><span class="p">;</span>          <span class="cm">/*column info*/</span>
</span><span class='line'>      <span class="n">COLrec</span> <span class="o">*</span><span class="n">T</span><span class="p">;</span>          <span class="cm">/*column info*/</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/*dynamic bat properties*/</span>
</span><span class='line'>      <span class="n">BATrec</span> <span class="o">*</span><span class="n">P</span><span class="p">;</span>          <span class="cm">/*cache and sort info*/</span>
</span><span class='line'>      <span class="n">BUNrec</span> <span class="o">*</span><span class="n">U</span><span class="p">;</span>          <span class="cm">/*cache and sort info*/</span>
</span><span class='line'>  <span class="p">}</span><span class="n">BAT</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This is the graph of BAT Structure:
<img src="http://coolbrain.github.com/assets/images/BAT.jpg" alt="&quot;BAT&quot;" /></p>

<p>MALSTK is used as MonetDB Assembly Language Execution Stack, like the C language stack.</p></blockquote>

<figure class='code'><figcaption><span>MalStack  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">DFhook</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'> <span class="n">typdedef</span> <span class="k">struct</span> <span class="n">MALSTk</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">stksize</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">stktop</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">stkbot</span><span class="p">;</span>            <span class="cm">/*the first variable to be initialized*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">stkdepth</span><span class="p">;</span>      <span class="cm">/*to protect against runtime stack overflow*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">calldepth</span><span class="p">;</span>        <span class="cm">/*to prectect against runtime stack overflow*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">keeplive</span><span class="p">;</span>       <span class="cm">/*do not garbage collect when set*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">garbageCollect</span><span class="p">;</span> <span class="cm">/*stack neeeds garbage collection*/</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   *Parallel processing is mostly driven by dataflow, but within this context </span>
</span><span class='line'><span class="cm">      *there may be different schemes to take instructions into execution.</span>
</span><span class='line'><span class="cm">   *The admission scheme (and wrapup) are the necessary scheduler hooks.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>  <span class="n">DFhook</span> <span class="n">admit</span><span class="p">;</span>
</span><span class='line'>  <span class="n">DFhook</span> <span class="n">wrapup</span><span class="p">;</span>
</span><span class='line'>  <span class="n">MT_Lock</span> <span class="n">stklock</span><span class="p">;</span> <span class="cm">/*used for parallel processing*/</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">     *It is handy to administer the timing in the stack frame</span>
</span><span class='line'><span class="cm">  * for use in profiling and recylcing instructions.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>  <span class="err">#</span><span class="n">ifdef</span> <span class="n">HAVE_TIME</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">tms</span> <span class="n">timer</span><span class="p">;</span> <span class="cm">/*timing information*/</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">timeval</span> <span class="n">clock</span><span class="p">;</span> <span class="cm">/*seconds + microsecs since epoch*/</span>
</span><span class='line'>  <span class="n">lng</span> <span class="n">clk</span><span class="p">;</span>      <span class="cm">/* micro seconds*/</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">cmd</span><span class="p">;</span>     <span class="cm">/*debugger communication*/</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">MALSTK</span> <span class="o">*</span><span class="n">up</span><span class="p">;</span>  <span class="cm">/*stack trace list*/</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">MALSTK</span> <span class="o">*</span><span class="n">blk</span><span class="p">;</span> <span class="cm">/*associated definition*/</span>
</span><span class='line'>  <span class="n">ValRecord</span> <span class="n">stk</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="n">MalStack</span><span class="p">,</span> <span class="o">*</span><span class="n">MalStkPtr</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>CLIENT structure represents the details of processing the requests of one connection.</p></blockquote>

<figure class='code'><figcaption><span>CLIENT  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">CLIENT</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">idex</span><span class="p">;</span>     <span class="cm">/*entry in mal_client*/</span>
</span><span class='line'>  <span class="n">oid</span> <span class="n">user</span><span class="p">;</span>  <span class="cm">/*user id in the auth administration*/</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm"> *The actions for a client is separated into serveral stages:</span>
</span><span class='line'><span class="cm"> *parsing, strategic optimization,tactial optimization, and execution.</span>
</span><span class='line'><span class="cm"> *The routines to handle them are obtained once the scenario is choosen. </span>
</span><span class='line'><span class="cm"> *Each stage carries a state descriptor,but they share the IO state </span>
</span><span class='line'><span class="cm"> *description.A backup structure is provided to temporarily switch to </span>
</span><span class='line'><span class="cm">    *antoher secenario</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">scenario</span><span class="p">;</span>  <span class="cm">/*scenario management references */</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">oldscenrio</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="o">*</span><span class="n">oldstate</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>  <span class="n">MALfcn</span> <span class="n">phase</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="n">oldphase</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">stage</span><span class="p">;</span>  <span class="cm">/*keep track of the phase being ran*/</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">itrace</span><span class="p">;</span>  <span class="cm">/*trace execution using interactive mdb*/</span>
</span><span class='line'>                      <span class="cm">/*if set to &#39;S&#39; it will put the process to sleep*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">debugOptimizer</span><span class="p">,</span><span class="n">debugScheduler</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/**For program debugging we need information on the timer and memory</span>
</span><span class='line'><span class="cm">     *usage patterns*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">flags</span><span class="p">;</span>  <span class="cm">/*resource tracing flags*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">timer</span><span class="p">;</span>       <span class="cm">/*trace time in usec*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">bigfoot</span><span class="p">;</span> <span class="cm">/*maxium virtual memory use*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">vmfoot</span><span class="p">;</span>  <span class="cm">/*virtual memory use*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">memory</span><span class="p">;</span>  <span class="cm">/*memory claimed for keeping BATs*/</span>
</span><span class='line'>  <span class="n">BUN</span>  <span class="n">cnt</span><span class="p">;</span>  <span class="cm">/*bat count*/</span>
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'>  <span class="n">ClientInput</span> <span class="o">*</span><span class="n">bak</span><span class="p">;</span> <span class="cm">/*used for recursive script and string execution*/</span>
</span><span class='line'>  <span class="n">stream</span> <span class="o">*</span><span class="n">fdout</span><span class="p">;</span>    <span class="cm">/*streams from and to user*/</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="n">Modedule</span> <span class="n">nspace</span><span class="p">;</span> <span class="cm">/*private scope resolution list*/</span>
</span><span class='line'>  <span class="n">Symbol</span> <span class="n">curprg</span><span class="p">;</span>  <span class="cm">/*focus of parser*/</span>
</span><span class='line'>  <span class="n">Symbol</span> <span class="n">backup</span><span class="p">;</span>      <span class="cm">/*save parsing context*/</span>
</span><span class='line'>  <span class="n">MalStkPtr</span> <span class="n">glb</span><span class="p">;</span>  <span class="cm">/*global variable stack*/</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">Client</span><span class="p">,</span><span class="n">ClientRec</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>SYMDEF structure link MALBLK together.</p></blockquote>

<figure class='code'><figcaption><span>SYMDEF  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">typedef</span> <span class="k">struct</span> <span class="n">SYMDEF</span><span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">SYMDEF</span> <span class="o">*</span><span class="n">peer</span><span class="p">;</span> <span class="cm">/*where to look next*/</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">SYMDEF</span> <span class="o">*</span><span class="n">skip</span><span class="p">;</span> <span class="cm">/*skip to next different symbol*/</span>
</span><span class='line'>      <span class="n">str</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">kind</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">MALBLK</span> <span class="o">*</span><span class="n">def</span><span class="p">;</span>  <span class="cm">/*the details of the MAL fcn*/</span>
</span><span class='line'>  <span class="p">}</span><span class="o">*</span><span class="n">Symbol</span><span class="p">,</span><span class="n">SymRecord</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commemorate]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/15/commemorate/"/>
    <updated>2013-03-15T23:10:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/15/commemorate</id>
    <content type="html"><![CDATA[<blockquote><p><p>Today is a good beginning because I spare the time not watching TV but constructing my own blog.Eventually, I can almost control everything in my field. There is no useless links,no disgusting advertisements, no boring replies.The things existing in blog is very fantastic,invaluable and wonderful.Every time I see them,my mind becomes clear.</p>
<!-- more -->
<p> I am willing to share a saying:&#8221;yesterday is history,tomorrow is mystery,but today is gift.&#8221; So Today is precious  because it would be yesterday&#8217;s result and decides the tomorrow.Don&#8217;t let myself be addicted in guilty of yesterday&#8217;s mistakes.In the meantime, don&#8217;t let tomorrow&#8217;s uncertainty upset me.</p>
<p><strong>Because I am a programmer, this blog is used as the analysis of monetdb,including source code and design architecture.</strong>this is the example of highlighting the code</p></p></blockquote>

<figure class='code'><figcaption><span>example  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Action speak louder than Voice!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;This could work elegant!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>Ok, the things I should have been done will be finished now!</p>
<p>Luckily, I would show some pictures when were token in climbing Baiyun mountain with brothers.</p>
<img src="http://coolbrain.github.com/assets/images/mountain.jpg" alt="&quot;BAT&quot;" />
<p>Wo! I am climbing a tree,but I want to tell you a secret,It&#8217;s hard to climb and I feel horrible and painful after it.</p>
<img src="http://coolbrain.github.com/assets/images/tree.jpg" alt="&quot;tree&quot;" />
<p>I can&#8217;t show the pictures anymore because they slow down my website and I can&#8217;t bear low velocity,that will kill myself.Maybe there are effective methods to solve this problem which I will find out in next day.</p>
<p>Even though the blog can run normally,but there are many things waitting me to do.It&#8217;s just a beginning,not an end.</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
