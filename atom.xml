<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-08-04T23:45:52+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[锲而舍之，朽木不折]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/04/shenzhen-library/"/>
    <updated>2013-08-04T22:32:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/04/shenzhen-library</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于昨天打球比较激烈，今天仍然有点头晕，于是就决定睡多几个钟头。这让我怀疑是否我有病，怎么打了两个钟头的羽毛球就变成这样？下次再验证一下。</p>
<!-- more -->
<p>睡得天昏地暗，起来也把自己要做的事情忘得一干二净。还是要听从同学的建议，虽然做大计划是不必要的，但小计划还是需要的，不然有时候茫然不知所措。于是就在电脑旁无聊地坐着，突然想起某个高一的女生，不知道她现在怎样呢？我记得我刚来培英的时候，她坐在我前面，她当时和我说的话很少，或者有时候我觉得她看不起我。不过分班之后，就基本上没怎么见过她。高三的时候，她有次碰到我，居然好亲切地叫了我“达哥”，令我受宠若惊。我思前思后，总结出：<strong>要努力，别人才会瞧得起自己。</strong>我在电脑旁用尽所有的搜索工具，都找不到其相关信息，百度，Google，人人网，朋友网，新浪微博&#8230;见到许多高中同学的信息，就是见不到她的，最终我也觉得自己够无聊的,于是决定出去走走。</p>
<p>老地方，深圳科技图书馆。发现之前自己苦苦寻找的shell编程书就在书架上，由于之前自己反应迟钝，被别人抢占先机，都怪自己先知后觉。于是走到英文杂志栏，发现有许多之前想看的杂志，就货真价实地摆在眼前，从高一的时候，我就想看《Scientific American》，但我找遍我们的图书馆都没有，但现在一叠叠都是，却失去了之前的热情。还有《Economist》、《Fortune》、《Science》、《Nature》、《Time》还有许多的杂志，翻看了一下，感觉看得非常吃力，英文没学好，好多单词都不认识，阻碍阅读。想不到学了十几年的英语是如此不堪一击，愧对列祖列宗，愧对天地神灵，愧对十几年的青春光阴。不知曾几何时，就告诉自己，学知识不要囫囵吞枣，浅尝辄止，事实摆在眼前，半桶水的英语只能匍匐前进，随时遭到炮轰，死无全尸，灰飞烟灭。<strong>想要Difference，就要凭真本事，那不是一时一刻就可以练就的，忌好高骛远，心浮气躁，毫无主见，漂移不定。</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日新月异 与时俱进]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday/"/>
    <updated>2013-08-03T23:34:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday</id>
    <content type="html"><![CDATA[<blockquote><p><p>假期，早上比平时睡多两个钟头，起床，吃了很不错的breakfast。然后大致看了下《深入linux的内核架构》的这本书，想不到里面还有网络层的实现分析，我想找的是模块和设备驱动来解决我现在遇到的问题，发现这本书偏理论，应该先实践，对其有所了解，再从理论上分析，这样的过程才符合学习的规律。</p>
<!-- more -->
<p>中午的lunch也不错，哈工大的饭堂比华工的饭堂好多了，如果能够在这里读研究生，其实也是一件挺好的事情。睡个午觉，就去羽毛球了，来的人比较少，无人替换，于是采取省力策略，柔中带刚，刚中带柔，这果然奏效，坚持打了两个小时。不过回来后，整个人虚脱了，睡了三个小时才恢复元气。拿出本《量子物理史话》来看，又进入了波粒二象说的世界，三百年之争，到近代还是乌云密布，晴天霹雳。量子力学理论能够造出量子计算机，如果这个成的话，世界将再一次进行大洗牌。</p>
<p>现在的科技发展好快，无人驾驶汽车就要面世，以后的人都会觉得人驾驶车是荒谬的。Google glass的进展也不错，它的面世将会逐步替代手机，因为带上的眼镜已经包含手机的所有功能，并且使用方便，不需要低头看手机。IBM的量子计算机，现代的高铁，私人飞行物，3G->4G时代，智能家居，这一切都在改变人类的生活，使人的步伐越来越快，也越来越舒适。在这样的大环境下，许多的问题就不成问题，但始终是那一句留得青山在不愁没柴烧。</p>
<p>《量子物理史话》还分析了牛顿的苹果，瓦特的茶壶等脍炙人口的故事，其实并不真实，只是为了神化他们，或者通过这些来掩饰他们的理论是受到他人的启示的。真实的一面才是真实的生活，伟大的想法又怎会一蹴而就呢？其实通过长期的与人交流，摩擦产生。牛顿和胡克二十年来的恩恩怨怨难分难解，这才表明其实牛顿也是一个血肉之人。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手高眼低 迎刃而解]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/02/fifteenth-day/"/>
    <updated>2013-08-02T23:14:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/02/fifteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天主要是把之前写的DebugLog模块转变为可以多进程调用的共享模块，基本上测试成功，但还不知道怎样对共享内存区域进行加锁。另外，还要尝试将DebugLog模块做成内核模块，就如printf函数一样的模块。好多知识要学，踏实点，不要眼高手低。</p>
<!-- more -->
<p>将DebugLog模块编译成动态链接库，各个进程使用是独立的，包括模块中的全局变量，只有内存映射才是公共的，但各个进程来说，其地址又是不一样的，因为是进程使用的虚拟地址，所以存储在共享内存的数据,包含链表，都只能使用相对的地址，所有的操作都是利用指针进行相对地址的操作。</p>
<p>今天有个关于MIPS架构的讲座，讲师很厉害，不过我也有几个不明白的地方，一：大小端问题，二：字节对齐问题 三：cache问题，以后还要慢慢弄懂这些问题，不要犯一些低级错误。如近期经常在while，或for循环后面加个“；”，其后面的代码根本就发挥不了作用，只执行了仅仅一次，就退出了。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感激涕零 不知所云]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/fourteenth-day/"/>
    <updated>2013-08-01T23:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/fourteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天没有training,arrange time by ourselves. 发现之前写的代码太没水平了，找素数的居然筛选法比传统方法还要慢，重复赋值太多和没有利用CPU的流水线。模式替换，发现自己居然整数选择时没有用switch代替if-else语句。memmove内存复制的字节对齐理解错误，是地址，而不是长度，一般用汇编写比较能提高效率，且可以利用流水线加速。每一条编程题都有改进的空间。</p>
<!-- more -->
<p>I spent two hours learning how to write Makefile. 懂得如何递归地执行Makefile文件和递归地删除目标文件，学习的时候需要带着问题去学习，这样效果会比较好。</p>
<p>晚上回来还是不断地查找关于共享库全局变量的问题，原来每个进程执行的时候都有自己的副本。关于链接库，共享内存实现的机制，还有虚拟存储的理解又加深了，还要继续深究这些问题，因为还没有弄明白究竟是怎么一回事，不能糊里糊涂地让其过去。我受不了还没有理解，我受不了效率这么低。</p>
<p><strong>PS:感谢张韵婷同学对我的help。同时自己要积极进取，努力去解决问题。keep optimistic and working hard to solve the facing problem.</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[麻雀虽小 五脏俱全]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/thirteenth-day/"/>
    <updated>2013-08-01T00:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/thirteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天有个讲座是IAD硬件基础，其实IAD是Integrated Access Device(综合接入设备），包含ADSL，route, VoIP(网络电话），USB，无线wifi。重点是说了网络IP电话（VOIP）技术，音频的编码，语音的控制（SIP协议），语音的传输（RTP，底层还是使用UDP协议），语音质量的保证（消除回声）等。</p>
<!-- more -->
<p>这些功能都整合到路由器上，可惜中国都法定规定不允许使用IP电话，不然打电话就便宜了。这产品是外销到外国的。但从其配置上看，比较复杂，需要专业人士，不过外国人接触的东西比较多，按照说明书的指示，应该还是能够配置成功。其配置中可以通过传统的PSTN电信的通信网通信，也可以通过互联网（VOIP）语音聊天，就是语音质量会比传统的PSTN稍微差一些。增加了一个语音模块，就增加了五个芯片，布线也变得复杂，接口也增加了好几个。</p>
<p>下午还是编程，主要是把代码改成符合编程规范，写单元测试用例，继续优化代码。还跟导师讨论了多进程的通信问题，引起了我的兴趣，我不断地看这进程通信，有很多东西还没理解，如mmap的实现机制是怎样的，如何正确地使用。</p>
<p>要学如何写Makefile文件，不然怎么对得起自己呢？</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循序渐进 步步为营]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/31/twelveth-day/"/>
    <updated>2013-07-31T00:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/31/twelveth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天写了memmove这样的函数，首先要检测内存覆盖问题，然后是考虑怎样加快移动的效率.因为传统的做法是以char一个字节的传送，而现在可以通过四个字节对齐的方式，通过int整型一次四个字节的传送。可以大大地加快了传送的效率，因为一次传送一个字节和一次传送四个字节是一样的。</p>
<!-- more -->
<p>另外是一个debuglog的模块，用链表实现，之前思路一直都不正确，之前写代码的经验又少，弄了好久才写出一个基本模型，以后要多多训练一下了，这么简单的问题都纠结了这么久，效率实在太低了。</p>
<p>我要狂练代码。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阳春白雪 下里巴人]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/29/eleventh-day/"/>
    <updated>2013-07-29T23:49:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/29/eleventh-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的讲座是编程规范，统一的代码规格有利于后面的阅读和维护。我们的组长是我们没有按照规范来写代码的话，就是能力，工作态度都不行的人。因为那些规范只要用心注意下，就应该不会出什么问题。</p>
<!-- more -->
<p>今天写代码发现写代码的能力好低，大学写的代码太少了，并且经常颓废，都不是一心一意地去解决问题，而是让问题积累。要努力写代码啦！ </p>
<p>今天总算见识了shell的厉害，以前一直都不愿意学，原来其作用还是好大的。与makeFile文件，svn和平时的工作都有密切的关系，特别是利用shell可以提高工作的效率。一步步来，一定行的，功夫不负有心人。</p>
<p>看了乔布斯的之前的采访，发现我们董事长跟我们说的话许多都是来自乔爷爷。看来乔爷爷是我们的好榜样，乔爷爷说要有点taste（品味）的，而不是什么都是随众的。乔爷爷也是很有好奇心的，并且也好有想法去解决问题。不过乔爷爷也善于学习，其实好多也都是不是乔爷爷做出来的，如图形界面，面向对象，但乔爷爷都察觉到这就是未来的方向。乔爷爷说，跟优秀的人工作很happy，也不会有太多烦恼。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[江山易改 本性难移]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/25/eighth-day/"/>
    <updated>2013-07-25T00:46:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/25/eighth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的培训讲座分别是实验室管理的规章制度和嵌入式linux的开发。我有点担心我不会使用设备，这说明我不够自信心，也不够进取，单单使用设备都学不会，那不是简直笨得无法救药，如示波器。嵌入式开发之前也接触过一点，但是知识懂点皮毛，没有耐心地去学习。</p>
<!-- more -->
<p>初略地学习shell编程，没有一本很好的书，让自己学习。那就应该要积极解决问题，从家里寄来了几本不错的书，其中有《鸟哥linux私房菜》,那就应该没借口说自己没好书学习了。</p>
<p>星期六也去打羽毛球了，虽然其中有些挫折，甚至不注意安全，这是非常不好的，又是犯一个老毛病，事前没有做好功课，连球拍的线都还没拉，就匆匆忙忙地去拉线和打球，足足迟到了一个小时，换做是另外的事情，也是这样。做事情没一点筹谋和策划，注定是没什么好结果的。</p>
<P>星期六打完球后，真是累的，可能一天吃了七个香蕉的缘故，没有消化好，都怪我没有自控能力。但是有一点是肯定的，那就是我发现我的脚痛发作了，运动会导致之前受过伤但没医好的病发作，这个就一直都是我的心病了，不过，人要看开点，小小问题也就不足挂齿。</p>
<p>星期日就要挨批了，买的书和送来的书都到了，一直在盼望，可惜到了，就什么兴奋都没有，并且也不去看了，反而看起电影来了，反而觉得电影还挺好看的，简直是愚蠢至极。现在是什么时候啦，看起《七宗罪》来啦，看起《大话西游》来啦，其实踏实做人，电影里的事情美好的事情还是会发生在现实中的，同时不好的事情也可以避免的。</p>
<p><strong>如果自己真要选择颓废的话，那我就要想想如何面对他人的嘲笑，讽刺和鄙视，还将自己看得连狗都不如，自己却无力回击，甚至他们是不学无术之人。人争一口气佛争一炷香。你能吞得下这口气？</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[惜时如金 谈笑风生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/24/seventh-day/"/>
    <updated>2013-07-24T00:02:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/24/seventh-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的培训内容是时间管理和有效沟通。说起时间管理，如谈虎色变，心落千仗，因为之前我给自己制定目标，但是一个都没有做到，导致心情极其低落，恨透了什么时间管理，还不如没什么计划，见步走步，这样心理也踏踏实实，没有这么大的情绪起伏。其实我这种想法是错误的，因为我制定的目标是不切实际的，好高骛远的，不是可衡量的，违反了制定的目标的基本规则，反而受到时间管理的反效果，还不如顺其自然。</p>
<!-- more -->
<p>第二个内容就是有效沟通。在大学，我的说话方式就会令人误解，其实是语调和重音放得不对，说多就好了。有效沟通的关键在于听，说，问。</p>
<p>今天粗略地看了《深入理解计算机系统》的虚拟存储器，其主要功能：1.它在主存中自动缓存最近使用的存放磁盘上的虚拟地址空间的内容，对磁盘上页的引用会触发缺页，缺页将控制转移到操作系统的一个缺页处理程序。缺页处理程序将页面从磁盘拷贝到主存缓存，如果必要，将写回被驱逐的页。2.虚拟存储器简化了存储管理，进而简化了链接，在进程间共享数据，进程的存储器分配以及程序加载。3.虚拟存储器通过在每条页表条目中加入保护位，从而简化了存储器保护。</p>
<p>管理和使用虚拟存储器是一件困难和容易出错的任务。常见的错误事例：间接引用坏指针，读取未初始化的存储器，允许栈缓冲区溢出，假设指针和它们的指向的对象相同，引用指针而不是它所指向的对象，误解指针运算，引用不存在的变量，以及引起存储器泄漏。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有条不紊 处变不惊]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/22/sixth-day/"/>
    <updated>2013-07-22T23:50:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/22/sixth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今日是在tp-link的第六日，讲座的内容是邮件的使用规范。听到这个题目就有点掉以轻心，其实这个不但与自己的工作息息相关，而且很容易犯一些低级的错误。今天总算仔细学习下了，不懂地就问一下同事，涉及到使用<strong>过滤器对邮件进行分类</strong>，<strong>个人签名模版</strong>，<strong>纯文本txt与HTML格式的区别与使用</strong>，段落的格式，还有宏的使用。最终这些基础的工作都顺利完成了。</p>
<!-- more -->
<p>这一天主要是看了《深入理解计算机系统》的第五章优化程序性能，主要提到性能提高技术：1）为遇到的问题选择适当的算法和数据结构；2）避免限制优化的因素：a.消除连续的函数调用。在可能时，将计算移到循环体外；b.消除不必要的存储器引用。引入临时变量来保存结果，只有在最后的值计算出来时，才将结果存放到数组或全局变量中。3）低级优化：a.展开循环，降低开销，使进一步的优化成为可能；b.通过使用例如<strong>多个累积变量和重新组合</strong>等技术，找到方法提高指令级的并行；c.用功能的风格重写条件操作，使得编译采用条件数据传送。</p>
<p>第六章存储器层次结构，理解存储器层次结构本质，且利用它编写出更有效的程序。特别是以下技术:1)将注意力集中在<strong>内循环</strong>上，大部分计算和存储访问都发生在这里；2）通过按照数据对象存储在存储中的顺序、步长为1的来读数据，从而使得程序中的<strong>空间局部性</strong>最大；3）一旦从存储器中读入了一个数据对象，就尽可能多地使用它，从而使得程序中的<strong>时间局部性</strong>最大。</p>
<p>第七章链接。链接器主要是符号解析和重定位。符号解析将目标文件中的每个全局符号都绑定到唯一的定义，而重定位确定每个符号的最终存储地址，并修改对那些目标的引用。</p>
<p>第八章异常控制流，分为中断、故障、终止和陷阱。中断是异步发生的，是来自处理器外部的I/O设备的信号的结果。应用程序通过使用一个叫做陷阱或者系统调用的ECF形式，向操作系统请求服务。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何为系统 何为人生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知甘苦 近情理 心平气和]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/20/be-happy/"/>
    <updated>2013-07-20T23:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/20/be-happy</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是星期六不用上班，在科技图书馆度过。不过，大概只看了半日的时间，又想起过去的事情来了。因为我在看的《深入理解计算机系统》，许多知识都是大学学过的，似曾相识，可惜我都没有掌握。越想，心情越不能平静下来，当想到大学居然没一件事做对的时候，自己就快要崩溃了。一直有个疑问，为什么那时候会犯这样的弥天大错？</p>
<!-- more -->
<p>过去的事情想得清楚当然去想，但不要影响自己的情绪，做一个积极的悲观主义者，Be Happy，积极去解决问题。</p>
<p>《深入理解计算机系统》的优化程序性能，存储体系结构，虚拟存储器这几章都是从程序员的角度看待计算机硬件的工作原理，利用其实现的原理，写出更加高效的程序。这几章与计算机硬件打交道，一定要看懂，作为以后工作的突破点。这本书将其作为计算机的圣经也不为过。</p>
<p>今天也有看《量子物理史话》，似乎现在没有之前那么好看了。因为我似乎心不在焉，那就先看计算机相关的吧。</p>
<p>无论日子怎么样，都要保持愉悦的心态。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问心无愧 柳暗花明]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/19/firth-day/"/>
    <updated>2013-07-19T23:45:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/19/firth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是到tp-link的第五天，听了两个讲座，一个是关于tp-link的研发文化，另外一个是关于如何成为一名合格的研发工程师。说的清楚的，知其然,也要知其所以然。不要说“大概”，“似乎”这样的字眼。要有敬业精神，天下之事始于易，从懂得的下手，把难的事情做对，将易的事情做好。tp-link的研发氛围是不错的，只要肯攀登，肯定有自己表现的舞台。如果不是，那就是得过且过，终究在悔恨中消失。</p>
<!-- more -->
<p><strong>我都不知道自己哪一天会突然离开，但活在世上，要对得起自己，对得起父母，对得起周围关心自己的人，自己就算离开，也都问心无愧。而不要总是担心明天不确定的事情，担心自己没有完成心愿就离开，要积极，乐观，我不敢说山重水复疑无路，柳暗花明又一村，但只要每一天都过得充实，过得快乐。每一天都看作是自己生命中最后的一天，那么今天就会去做些什么，当自己离开时，自己还会不会带着遗憾离开。</strong></p>
<p>今天主要看了《深入理解计算机系统》的第三章：程序机器级的表示。主要说的汇编语言，通过阅读和分析汇编语言，从而写出更为高效的C代码。switch语句应用的是跳转表的机制实现，比if-else语句执行要搞笑。union联合可以节省空间的使用，或者对struct结构体的字段的重新调整也可以减少空间的使用。最为紧要的是理解栈帧结构，在函数调用的栈进行的操作和递归函数的机制，了解到栈溢出，从而导致程序崩溃，找不到返回地址，或者跳转到去执行病毒的地址。</p>
<p>从做书的练习可以看得出，我半桶水，有很多的知识都没有掌握，真不愧是大学连一本完整的书都没有读完出来的人。那么工作了，是否应该将这本书读透呢？是否好应该知耻而后勇呢？是否好应该知道时间不留人，自己的时间不多呢？</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亭亭玉立 洁白无瑕]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/18/fourth-day/"/>
    <updated>2013-07-18T23:38:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/18/fourth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我来tp-link的第四天，培训内容是公司的计算机安全与管理制度。之后的自由支配时间都在看《深入了解计算机系统》的第三章：程序的机器级的表示，主要是汇编与C语言的转换，包括访问信息（内存或寄存器），算术和逻辑操作，控制和过程等。发现后面的习题很经典，相识恨晚，一定要实践的，不然就会悔恨了。不过下午到四点的时候就已经好似没有精神看下去了，中午休息不太好，一定要睡个好觉。于是浏览了公司相关的研发，行政等文件，发现公司好有规章制度和条理，在这么纯洁的公司做事，真是荣幸之至。</p>
<!-- more -->
<p>晚上继续看了《量子物理史话》，到对波尔模型的进一步解释，但一直解决不了与经典磁场直接的矛盾，光是波还是微粒的问题一直纠结下去，弄得科学家们焦头烂额。波尔都在苦思冥想，海森堡隆重登场了。面对光怪陆离的现象，海森堡又如何独辟蹊径，问鼎量子学呢？将在这一章节继续演绎。正所谓滚滚长江东逝水，浪花淘尽英雄。</p>
<p>书看累了，就去操场跑步，大概跑了十几圈，就一直幻想参加马拉松，我的坏习惯又来了。我跑步是为了强身健体，不是为了展示自己，也不知天高地厚，也学起了沽名钓誉。</p>
<p>回来就想冲个热水澡，就继续看《深入理解计算机系统》，可惜，接到一个同学电话，就和他聊了半个钟头，那看书就成为泡影了。聊天是必要的，别忘了正经事。就好似今日评论了同学的一条微博一样，搞到心神不定，最后以大话连篇，无厘头收场。也不知道是否同学相不相信我的话，其实是假话。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暴殄天物 回头是岸]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/17/third-day/"/>
    <updated>2013-07-17T23:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/17/third-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我在TP-Link的第三天，只有上午两个小时是用来上公共课，关于入职须知的。其余时间都是自由支配，重点是读《深入理解计算机》这本书，读完后，还要写读后感。可惜，我这种人最喜欢囫囵吞枣的，看完后，都不知道自己懂不懂，扮得很认真，就是不肯动手，不动手，又怎么会懂呢？敷衍自己，麻痹自己，以为自己很认真，学到很多所谓的知识，想做阿Q 也不至于如此吧！</p>
<!-- more -->
<p>对于《TCP/IP详解I》，我就有实践去明白理论，因为这么好实践的书籍，居然不实践的理解，简直暴殄天物。其中大概明白了ARP的工作流程，IMGP协议是用来支持多播，FTP，SMTP，tcpdump,复习了TCP协议。</p>
<p>今晚继续看《量子物理史话》，普朗克的黑体辐射，爱恩斯坦的光电效应，卢瑟福的原子核模型，波尔的波尔模型。</p>
<p>明天一定要好好实践，不懂就问，但在问之前，自己要有思路。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[求知若渴 拜师学艺]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/16/second-day/"/>
    <updated>2013-07-16T23:48:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/16/second-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我入职TP-Link的第二天，我被分配到宽带接入产品线，我马上上网查了下其相关的内容，生怕自己一点都不懂这方面的知识，首先心理要有个底。公司为我们配备了一台电脑，我们就开始设置邮件，安装各种软件了。我的导师是南京大学毕业的女生，人还是很好沟通的，想不到工作还是女性做我的导师。</p>
<!-- more -->
<p>然后接下来，就看到入职培训的相关内容，公共的部分自然不提。但接下来的三天有几道与工作息息相关，并且挺有趣的编程题。要求平时多理解《深入理解计算机》这本书，还有《TCP/IP详解》，《UNIX网络编程》，这些书都是非常经典，并且基础。可惜我大学都没有认真学习，现在可要抓紧时间补补功课了。</p>
<p>今天我还是花了一段时间来看《量子物理史话》的，看到在19世纪末围绕着物理学的两朵乌云，到普朗克的离经叛道的大胆假设，关于量子能量，e=hv.到爱恩斯坦的进一步解析。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天地轮回 万物归一]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/15/induction-ceremony/"/>
    <updated>2013-07-15T23:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/15/induction-ceremony</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是举行TP-Link2013应届毕业生入职典礼，虽然仪式很简朴，不过我们可以见到总经理和董事长（创始人），且听他们介绍创业历史和公司的状况。</p>
<!-- more -->
<p>总经理和董事长都是没有宏大目标的人，他们都是很实际的人，做好眼前的事情，制定小计划和小目标，而不去想一些不实际、虚无缥缈的事情。我这一点我很有感触，因为我大学只有不实际的大目标，而不是一个个脚踏实地的目标，导致我大学一步步走入死胡同，满盘皆输。</p>
<p>董事长说他是一个积极的悲观主义者、积极的宿命主义者，并且说这是对其很准确的描述。原来自卑，悲观，宿命一点都不可怕，因为反而这些因素令人更加平静，但要积极。如我在之前出现问题时，只是悲观，绝望，但就没有积极去面对和解决问题。我觉得董事长的话能够说到我心里。</p>
<p>董事长在谈到公司文化的时候，说道西方文化与中国传统文化的区别。西方文化严谨，注重细节。而中国传统文化不拘小节，浮于表面。传统文化的优点在于孝悌忠信，礼义廉耻。</p>
<p>他说TP的文化是心静、手高和眼低。他说为什么要心静？因为我们知道有很多很厉害的人，如牛顿，爱因斯坦&#8230;&#8230;与这些人比起来，我们简直小巫见大巫,但我们也承认技不如人，也在不断地努力。手高：善于思考，把握重点，做聪明事，聪明地做事。注重细节，不给他人带来麻烦，有见识，复合型，德才兼备。眼低：是做好眼前确定的事情，不要好高骛远.他说的这些，我大学的时候都是犯这样的错误。现在作为一个新人来到公司，想不到董事长对我们说的就是这些。董事长还推荐一本书给我们叫《量子物理史话》。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[舟车劳顿 一诺千金 遍体鳞伤 游山玩水]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/14/physical-examination/"/>
    <updated>2013-07-14T20:20:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/14/physical-examination</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>找屋篇</strong></p>
<p>我答应过同学7月12号一起和他找屋租的，可惜到了11号，我就有点退缩了。同学和他老爸一起找了一天了，我想他们俩找得这么辛苦，我却在家，答应过别人又不去，岂不是又吃言，又玩拖延症，到时候又非后悔莫及。所以，就算到了12号的11点，我还是不管三七二十一，决定十三点去深圳。突然的决定，是因为我不想我又玩悔恨。到了深圳，我和他们找的第一个地方就是我们要租的地方，因此12号我们就找好房了。</p>
<!-- more -->
<p><strong>入职篇</strong></p>
<p>来TP-Link入职，用的是学校带来的坏习惯，鸡毛蒜皮的小事都需要别人提醒，假如没人提醒，自己就忘记去做。入职时温馨提示写得清清楚楚，明明白白要上网的同事在荔园3栋1楼登记，可惜自己没有看清楚，走马观花飘过；入职时温馨提示白字黑字写着7月14号11：30-13：30是统一充值饭卡的时间，可惜自己又错过。到头来自己又在悔恨人生，就为这么一点事，那么我的心情有怎么好起来呢？以后一定要仔细看清楚，并用手机日历记下，这样到时手机就会提示自己该做什么，而不是好似盲头苍蝇乱撞，到最后，又不知道缺了什么，或者少了什么。</p>
<p><strong>体检篇</strong></p>
<p>我知道身体存在问题，腹部膨胀，在高中的时候，我曾经想过高考完就去做一次彻底的体检，去查出自己的问题所在。可惜，我又把这样重要的事情放下，因为我没有积极去面对问题和解决问题。在大学的体检也没有相应项目的检查，到现在入职体检，有个肝胆B超，照出我有胆结石，那之前的口苦，腹部膨胀，血压在正常的高值也有了进一步的解释了。到现在我也清楚地意识到我的问题不止这些，还有面瘫、耳鸣、脚痛，骨盘偏左，但是我都没有真真正正采取行动去治好它们，或者从饮食行为上，学习、娱乐作息上去杜绝它们进一步恶化。反而之前还浑浑噩噩地去看电视，现在我又是悔恨过去的行为，因为再没有颓废，不积极的理由，后面就是绝路，随便一个恶化，都可以把我干掉了，并且我都没有做好准备。</p>
<p><strong>计划篇</strong></p>
<p>基于上面体检的问题，在TP-Link工作时，采取的策略就是在某一方面专研下去，上班的时候，做好自己的本职工作，积极应对。下班的时候，安排相应的时间学习。<strong>最重要的是，不管有多忙都要有一个或半个小时的锻炼，跑步或打羽毛球。不管别人怎么看自己，自己都要保持心情愉悦，宽畅。</strong></p>
<p><strong>深圳大学城游览篇</strong></p>
<p>我是住在哈工大的宿舍，体检完，没事情，我就独自一个人去游览了深圳大学城。深圳大学城是由清华、北大、哈工大研究院所组成，中间是深圳科技图书馆。在这里不是研究生、硕士，就是博士或者教授。虽然这里是和广州大学城新建的校区一样，但我感觉这里更像大学，更有大学的气息，也可能这里的学校都差不多是全国最好的大学。走到一个北大的教室，刚好是北京大学汇丰商学院2013年优秀大学生经济金融论坛，说白了，就相当于是夏令营，他们一个轮着一个到讲堂上做presentation，全程英文，如同论文答辩的形式，下面的评判都是海归回来的博士或者是教授，在用英文提问做presention的同学。他们的英文非常的漂亮，并且是用英文阐释经济学的内容，我一大半的英文都没听懂。当时，我觉得我太缺少这样锻炼的机会，在大学里，我应该抓紧这样的机会，而不是每次都让它溜走。他们才读大四，就已经比我厉害这么多，而我自己却是半桶水，根本就用不上场。</p>
<p>深圳科技图书馆是一个现代化，人性化的图书馆，广州新图书馆在它面前显得逊色。它不但配备完善，读书写字上网查阅资料样样都行，并且书籍琳琅满目。真不愧是给清华、北大和哈工大研究生的图书馆，并且是这三间学校公用的图书馆。有人说，图书馆是大学的心脏。从这样一个图书馆，就可以看出其大学的水平究竟是怎么样的。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Malloc内存管理]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/12/malloc/"/>
    <updated>2013-07-12T01:16:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/12/malloc</id>
    <content type="html"><![CDATA[<blockquote><p><p>malloc并不是从一个编译时就确定的固定大小的数组中分配空间，而是在需要的时向操作系统申请空间。因为程序中的某些地方可能不通过malloc调用申请空间（通过其它方式申请空间），因此，malloc管理的空间不一定是连续的。这样空闲存储空间以空闲块链表的方式组织，每个块包含一个长度、一个指向下一块的指针以及一个指向自身存储空间的指针。</p>
<!-- more -->
<p>当有申请请求时，malloc将扫描空闲块链表，直到找到一个足够大的块为止。该算法称为“首次适应”（first fit）；与之相对应的算法是“最佳适应”（best fit），它寻找满足条件的最小块。如果该块恰好与请求的大小相符合，则将它从链表中移走并返回给用户。如果该块太大，则将它分成两部分；大小合适的块返回给用户，剩下的部分留在空闲块链表中。如果找不到一个足够大的块，则向操作系统申请一个大块并加入到空闲块链表中。</p></p></blockquote>

<figure class='code'><figcaption><span>malloc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="n">Align</span><span class="p">;</span>     <span class="cm">/*按照long类型的边界对齐*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">union</span> <span class="n">header</span> <span class="p">{</span>          <span class="cm">/*块的头部*/</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">union</span> <span class="n">header</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="cm">/*空闲块链表的下一块*/</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>        <span class="cm">/*本块的大小*/</span>
</span><span class='line'>        <span class="p">}</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Align</span> <span class="n">x</span><span class="p">;</span>                    <span class="cm">/*强制块对齐*/</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">union</span> <span class="n">header</span> <span class="n">Header</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="n">base</span><span class="p">;</span>       <span class="cm">/*从空链表开始*/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="n">freep</span> <span class="o">=</span> <span class="nb">NULL</span> <span class="cm">/*空闲链表的初始指针*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*malloc函数:通用存储分配函数*/</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">malloc</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">prevp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="nf">morecore</span><span class="p">(</span><span class="kt">unsigned</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nunits</span> <span class="o">=</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">prevp</span> <span class="o">=</span> <span class="n">freep</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>    <span class="cm">/*没有空闲链表*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">base</span><span class="p">;</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span> <span class="p">;</span> <span class="n">prevp</span><span class="o">=</span><span class="n">p</span><span class="p">,</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">nunits</span><span class="p">)</span>                <span class="cm">/*足够大*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">nunits</span><span class="p">)</span>        <span class="cm">/*正好*/</span>
</span><span class='line'>                        <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>                                    <span class="cm">/*分配末尾部分*/</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">freep</span><span class="p">)</span>                              <span class="cm">/*闭环的空闲链表*/</span>
</span><span class='line'>                <span class="k">if</span><span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="n">morecore</span><span class="p">(</span><span class="n">nunits</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>                        <span class="cm">/*没有剩余的存储空间*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>函数morecore用于向操作系统请求存储空间。在设置完size字段后，morecore函数调用free函数把多余的存储空间插入到空闲区域中。</p></p></blockquote>

<figure class='code'><figcaption><span>morecore  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define NALLOC 1024</span>
</span><span class='line'><span class="cm">/*morecore函数:向系统申请更多的存储空间*/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="nf">morecore</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">nu</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span><span class="p">,</span> <span class="o">*</span><span class="n">sbrk</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">up</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cp</span> <span class="o">=</span> <span class="n">sbrk</span><span class="p">(</span><span class="n">nu</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">cp</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>    <span class="cm">/*没有空间*/</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">up</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">cp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">up</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nu</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">up</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">freep</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>free函数从freep指向的地址开始，逐个扫描空闲块链表，寻找可以插入空闲块的地方。该位置可能在两个空闲块之间，也可能在链表的末尾。在任何一种情况下，如果被释放的块与另一空闲块相邻，则将这两个块合并起来。合并两个块的操作很简单，只需要设置指针指向正确的位置，并设置正确的块大小就可以了。</p></p></blockquote>

<figure class='code'><figcaption><span>free  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*free函数:将块ap放入空闲块链表中*/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ap</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">bp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bp</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">ap</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>                   <span class="cm">/*指向块头*/</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">p</span> <span class="o">=</span> <span class="n">freep</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span> <span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span><span class="n">p</span> <span class="o">||</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">))</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>                                <span class="cm">/*被释放的块在链表的开头或末尾*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">bp</span> <span class="o">+</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>   <span class="cm">/*与上一相邻块合并*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>            <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">bp</span><span class="p">)</span>             <span class="cm">/*与下一相邻块合并*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freep</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>typedef和union的使用解决了地址对齐（假定sbrk返回的是合适的指针)问题</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/11/linux-command/"/>
    <updated>2013-07-11T00:39:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/11/linux-command</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux的命令种类繁多，但掌握方法和规则，记住常用的命令，不懂的用man来查询。</p>
<p>1.解压.tar.xz:        tar Jxvf xxx.tar.xz</p>
<p>2.解压7z：       7z x filename.7z</p>
<!-- more -->
<p>3.统计源代码的行数：</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>find . -name <span class="s1">&#39;*.c&#39;</span> -o -name <span class="s1">&#39;*.h&#39;</span> | xargs wc -l
</span><span class='line'>find . -name <span class="s1">&#39;*.c&#39;</span> -o -name <span class="s1">&#39;*.h&#39;</span> | xargs cat | sed <span class="s1">&#39;/^\s*$/d&#39;</span> | wc -l
</span><span class='line'>cloc ./
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>4.grep命令：grep (regular pattern) (input file)</p>
<p>使用 grep 抓取匹配关键字附近的行, 有时我们会对 grep 匹配关键字附近的行感兴趣（这有点上下文的味道），使用 -A、-B、以及 -C 选项可以满足我们的愿望。</p>
<p>grep -A <n> &#8216;keyword&#8217; file # 匹配 keyword 的下 n 行</p>
<p>grep -B <n> &#8216;keyword&#8217; file # 匹配 keyword 的上 n 行</p>
<p>grep -C <n> &#8216;keyword&#8217; file # 匹配 keyword 的上 n 行及下 n 行</p>
<p>5.apt-get命令</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>apt-cache search ‹name› <span class="c"># find package ‹name› for install by “apt-get”</span>
</span><span class='line'>apt-cache show ‹name›   <span class="c"># describe package ‹name›</span>
</span><span class='line'>apt-get install ‹name›  <span class="c"># install a new program. (usually used with sudo in front)</span>
</span><span class='line'>apt-get remove ‹name›   <span class="c"># remove (un-install) a program.</span>
</span><span class='line'>apt-get purge ‹name›    <span class="c"># remove a program and its config files.</span>
</span><span class='line'>dpkg -l <span class="c"># list all installed packages</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>6.反向解析域名:host 0.0.0.0</p>
<p>7.得到本机ip:</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ifconfig | awk <span class="s1">&#39;/inet addr:/ {print $2}&#39;</span> | awk -F: <span class="s1">&#39;{if ($2 != &quot;127.0.0.1&quot;) print $2}&#39;</span>
</span><span class='line'>ifconfig | sed -rn <span class="s1">&#39;s/.*r:([^ ]+) .*/\1/p&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>8.创建目录：mkdir {1..50}；创建文件：touch {1..50}；</p>
<p>9.对打开端口进行检查：netstat -an | grep &#8211;color -i -E &#8216;listen|listening&#8217;</p>
<p>netstat -tlnp</p>
<p>10.找到超过100M的文件：find . -type f -size +100M</p>
<p>11.删除文件：rm !(<em>.foo|</em>.bar|*.baz)</p>
<p>12.快速重命名：mv filename.{old,new} </p>
<p>13.终止进程：killall -KILL 进程名称 | killall -signal process | kill -SIGKILL processID</p>
<p>14.成为Ubuntu超级用户：sudo passwd root 新建root用户</p>
<p>15.寻找文件：find 路径名（path） 参数（根据文件名称-name、类型-type、权限-perm、修改世间-atime） 模式匹配</p>
<p>16.使某个配置文件立即生效：source /etc/profile</p>
<p>17.打开或关闭某项服务:service 某项服务（iptables） on|stop</p>
<p>18.查看系统进程占用资源的工具：top,ps,free,vmstat,iostat,pmap</p>
<p>19.找到某个进程的ID：ps -aux | grep processname </p>
<p>20.根据目录下文件的大小排序输出：du -hs * | sort -h </p>
<p>21.查看当前目录下文件的个数：ls -l | grep &#8221;<sup>-&#8221;</sup> | wc -l 查看当前目录下文件的个数，包括子目录里的：ls -lR | grep &#8221;<sup>-&#8221;</sup> | wc -l 查看某目录下文件夹（目录）的个数，包括子目录里的：ls -lR | grep &#8221;<sup>d&#8221;</sup> | wc -l</p>
<p>22.设置文件及文件夹权限：chmod -R 664 文件夹名称 （赋予文件属主和同组用户读、写权限，其他用户只读权限),文件夹和其目录下的文件都被设置了相同的664权限,u代表的是与文件属主拥有一样的权限</p>
<p>23.Shell删除目录下的无效链接</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">link</span><span class="o">=</span><span class="sb">`</span> find . -type l <span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$link</span>
</span><span class='line'><span class="k">for </span>i in <span class="nv">$link</span>;
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> ! -f <span class="nv">$i</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span>rm <span class="nv">$i</span> ;
</span><span class='line'>  <span class="k">fi</span> ;
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>24.shell给可执行的文件创建链接</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>mkdir -p  ./exelink
</span><span class='line'><span class="nb">cd </span>exelink
</span><span class='line'><span class="nv">link</span><span class="o">=</span><span class="sb">`</span> find ../ -type f -perm -111  <span class="sb">`</span>
</span><span class='line'><span class="k">for </span>i in <span class="nv">$link</span> ;
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span>  -f <span class="nv">$i</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="nv">$i</span>
</span><span class='line'>      link  <span class="nv">$i</span> <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$i</span> | sed <span class="s1">&#39;s,.*/,,&#39;</span><span class="sb">`</span>
</span><span class='line'>  <span class="k">fi</span> ;
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>25.根据不同的时段输出不一样的欢迎词</p></p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">HH</span><span class="o">=</span><span class="sb">`</span> date +%k <span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$HH</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -ge 0 <span class="o">]&amp;&amp;[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -lt 12 <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Good Morning `whoami`&quot;</span>;
</span><span class='line'><span class="k">elif</span> <span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -ge 12 <span class="o">]&amp;&amp;[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -l 18 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Good Afternoon `whoami`&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;Good Evening `whoami`&quot;</span>
</span><span class='line'><span class="k">fi</span>;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
