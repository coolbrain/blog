<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-07-23T00:17:32+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sixth Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/22/sixth-day/"/>
    <updated>2013-07-22T23:50:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/22/sixth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今日是在tp-link的第六日，讲座的内容是邮件的使用规范。听到这个题目就有点掉以轻心，其实这个不但与自己的工作息息相关，而且很容易一些低级的错误。今天总算仔细学习下了，不懂地就问一下同事，涉及到使用<strong>过滤器对邮件进行分类</strong>，<strong>个人签名模版</strong>，<strong>纯文本txt与HTML格式的区别与使用</strong>，段落的格式，还有宏的使用。最终这些基础的工作都顺利完成了。</p>
<!-- more -->
<p>这一天主要是看了《深入理解计算机系统》的第五章优化程序性能，主要提到性能提高技术：1）为遇到的问题选择适当的算法和数据结构；2）避免限制优化的因素：a.消除连续的函数调用。在可能时，将计算移到循环体外；b.消除不必要的存储器引用。引入临时变量来保存结果，只有在最后的值计算出来时，才将结果存放到数组或全局变量中。3）低级优化：a.展开循环，降低开销，使进一步的优化成为可能；b.通过使用例如<strong>多个累积变量和重新组合</strong>等技术，找到方法提高指令级的并行；c.用功能的风格重写条件操作，使得编译采用条件数据传送。</p>
<p>第六章存储器层次结构，理解存储器层次结构本质，且利用它编写出更有效的程序。特别是以下技术:1)将注意力集中在<strong>内循环</strong>上，大部分计算和存储访问都发生在这里；2）通过按照数据对象存储在存储中的顺序、步长为1的来读数据，从而使得程序中的<strong>空间局部性</strong>最大；3）一旦从存储器中读入了一个数据对象，就尽可能多地使用它，从而使得程序中的<strong>时间局部性</strong>最大。</p>
<p>第七章链接。链接器主要是符号解析和重定位。符号解析将目标文件中的每个全局符号都绑定到唯一的定义，而重定位确定每个符号的最终存储地址，并修改对那些目标的引用。</p>
<p>第八章异常控制流，分为中断、故障、终止和陷阱。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processor Architecture]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Happy]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/20/be-happy/"/>
    <updated>2013-07-20T23:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/20/be-happy</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是星期六不用上班，在科技图书馆度过。不过，大概只看了半日的时间，又想起过去的事情来了。因为我在看的《深入理解计算机系统》，许多知识都是大学学过的，似曾相识，可惜我都没有掌握。越想，心情越不能平静下来，当想到大学居然没一件事做对的时候，自己就快要崩溃了。一直有个疑问，为什么那时候会犯这样的弥天大错？</p>
<!-- more -->
<p>过去的事情想得清楚当然去想，但不要影响自己的情绪，做一个积极的悲观主义者，Be Happy，积极去解决问题。</p>
<p>《深入理解计算机系统》的优化程序性能，存储体系结构，虚拟存储器这几章都是从程序员的角度看待计算机硬件的工作原理，利用其实现的原理，写出更加高效的程序。这几章与计算机硬件打交道，一定要看懂，作为以后工作的突破点。这本书将其作为计算机的圣经也不为过。</p>
<p>今天也有看《量子物理史话》，似乎现在没有之前那么好看了。因为我似乎心不在焉，那就先看计算机相关的吧。</p>
<p>无论日子怎么样，都要保持愉悦的心态。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firth Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/19/firth-day/"/>
    <updated>2013-07-19T23:45:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/19/firth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是到tp-link的第五天，听了两个讲座，一个是关于tp-link的研发文化，另外一个是关于如何成为一名合格的研发工程师。说的清楚的，知其然,也要知其所以然。不要说“大概”，“似乎”这样的字眼。要有敬业精神，天下之事始于易，从懂得的下手，把难的事情做对，将易的事情做好。tp-link的研发氛围是不错的，只要肯攀登，肯定有自己表现的舞台。如果不是，那就是得过且过，终究在悔恨中消失。</p>
<!-- more -->
<p><strong>我都不知道自己哪一天会突然离开，但活在世上，要对得起自己，对得起父母，对得起周围关心自己的人，自己就算离开，也都问心无愧。而不要总是担心明天不确定的事情，担心自己没有完成心愿就离开，要积极，乐观，我不敢说山重水复疑无路，柳暗花明又一村，但只要每一天都过得充实，过得快乐。每一天都看作是自己生命中最后的一天，那么今天就会去做些什么，当自己离开时，自己还会不会带着遗憾离开。</strong></p>
<p>今天主要看了《深入理解计算机系统》的第三章：程序机器级的表示。主要说的汇编语言，通过阅读和分析汇编语言，从而写出更为高效的C代码。switch语句应用的是跳转表的机制实现，比if-else语句执行要搞笑。union联合可以节省空间的使用，或者对struct结构体的字段的重新调整也可以减少空间的使用。最为紧要的是理解栈帧结构，在函数调用的栈进行的操作和递归函数的机制，了解到栈溢出，从而导致程序崩溃，找不到返回地址，或者跳转到去执行病毒的地址。</p>
<p>从做书的练习可以看得出，我半桶水，有很多的知识都没有掌握，真不愧是大学连一本完整的书都没有读完出来的人。那么工作了，是否应该将这本书读透呢？是否好应该知耻而后勇呢？是否好应该知道时间不留人，自己的时间不多呢？</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fourth Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/18/fourth-day/"/>
    <updated>2013-07-18T23:38:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/18/fourth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我来tp-link的第四天，培训内容是公司的计算机安全与管理制度。之后的自由支配时间都在看《深入了解计算机系统》的第三章：程序的机器级的表示，主要是汇编与C语言的转换，包括访问信息（内存或寄存器），算术和逻辑操作，控制和过程等。发现后面的习题很经典，相识恨晚，一定要实践的，不然就会悔恨了。不过下午到四点的时候就已经好似没有精神看下去了，中午休息不太好，一定要睡个好觉。于是浏览了公司相关的研发，行政等文件，发现公司好有规章制度和条理，在这么纯洁的公司做事，真是荣幸之至。</p>
<!-- more -->
<p>晚上继续看了《量子物理史话》，到对波尔模型的进一步解释，但一直解决不了与经典磁场直接的矛盾，光是波还是微粒的问题一直纠结下去，弄得科学家们焦头烂额。波尔都在苦思冥想，海森堡隆重登场了。面对光怪陆离的现象，海森堡又如何独辟蹊径，问鼎量子学呢？将在这一章节继续演绎。正所谓滚滚长江东逝水，浪花淘尽英雄。</p>
<p>书看累了，就去操场跑步，大概跑了十几圈，就一直幻想参加马拉松，我的坏习惯又来了。我跑步是为了强身健体，不是为了展示自己，也不知天高地厚，也学起了沽名钓誉。</p>
<p>回来就想冲个热水澡，就继续看《深入理解计算机系统》，可惜，接到一个同学电话，就和他聊了半个钟头，那看书就成为泡影了。聊天是必要的，别忘了正经事。就好似今日评论了同学的一条微博一样，搞到心神不定，最后以大话连篇，无厘头收场。也不知道是否同学相不相信我的话，其实是假话。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/17/third-day/"/>
    <updated>2013-07-17T23:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/17/third-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我在TP-Link的第三天，只有上午两个小时是用来上公共课，关于入职须知的。其余时间都是自由支配，重点是读《深入理解计算机》这本书，读完后，还要写读后感。可惜，我这种人最喜欢囫囵吞枣的，看完后，都不知道自己懂不懂，扮得很认真，就是不肯动手，不动手，又怎么会懂呢？敷衍自己，麻痹自己，以为自己很认真，学到很多所谓的知识，想做阿Q 也不至于如此吧！</p>
<!-- more -->
<p>对于《TCP/IP详解I》，我就有实践去明白理论，因为这么好实践的书籍，居然不实践的理解，简直暴殄天物。其中大概明白了ARP的工作流程，IMGP协议是用来支持多播，FTP，SMTP，tcpdump,复习了TCP协议。</p>
<p>今晚继续看《量子物理史话》，普朗克的黑体辐射，爱恩斯坦的光电效应，卢瑟福的原子核模型，波尔的波尔模型。</p>
<p>明天一定要好好实践，不懂就问，但在问之前，自己要有思路。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/16/second-day/"/>
    <updated>2013-07-16T23:48:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/16/second-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是我入职TP-Link的第二天，我被分配到宽带接入产品线，我马上上网查了下其相关的内容，生怕自己一点都不懂这方面的知识，首先心理要有个底。公司为我们配备了一台电脑，我们就开始设置邮件，安装各种软件了。我的导师是南京大学毕业的女生，人还是很好沟通的，想不到工作还是女性做我的导师。</p>
<!-- more -->
<p>然后接下来，就看到入职培训的相关内容，公共的部分自然不提。但接下来的三天有几道与工作息息相关，并且挺有趣的编程题。要求平时多理解《深入理解计算机》这本书，还有《TCP/IP详解》，《UNIX网络编程》，这些书都是非常经典，并且基础。可惜我大学都没有认真学习，现在可要抓紧时间补补功课了。</p>
<p>今天我还是花了一段时间来看《量子物理史话》的，看到在19世纪末围绕着物理学的两朵乌云，到普朗克的离经叛道的大胆假设，关于量子能量，e=hv.到爱恩斯坦的进一步解析。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Day]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/15/induction-ceremony/"/>
    <updated>2013-07-15T23:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/15/induction-ceremony</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是举行TP-Link2013应届毕业生入职典礼，虽然仪式很简朴，不过我们可以见到总经理和董事长（创始人），且听他们介绍创业历史和公司的状况。</p>
<!-- more -->
<p>总经理和董事长都是没有宏大目标的人，他们都是很实际的人，做好眼前的事情，制定小计划和小目标，而不去想一些不实际、虚无缥缈的事情。我这一点我很有感触，因为我大学只有不实际的大目标，而不是一个个脚踏实地的目标，导致我大学一步步走入死胡同，满盘皆输。</p>
<p>董事长说他是一个积极的悲观主义者、积极的宿命主义者，并且说这是对其很准确的描述。原来自卑，悲观，宿命一点都不可怕，因为反而这些因素令人更加平静，但要积极。如我在之前出现问题时，只是悲观，绝望，但就没有积极去面对和解决问题。我觉得董事长的话能够说到我心里。</p>
<p>董事长在谈到公司文化的时候，说道西方文化与中国传统文化的区别。西方文化严谨，注重细节。而中国传统文化不拘小节，浮于表面。传统文化的优点在于孝悌忠信，礼义廉耻。</p>
<p>他说TP的文化是心静、手高和眼低。他说为什么要心静？因为我们知道有很多很厉害的人，如牛顿，爱因斯坦&#8230;&#8230;与这些人比起来，我们简直小巫见大巫,但我们也承认技不如人，也在不断地努力。手高：善于思考，把握重点，做聪明事，聪明地做事。注重细节，不给他人带来麻烦，有见识，复合型，德才兼备。眼低：是做好眼前确定的事情，不要好高骛远.他说的这些，我大学的时候都是犯这样的错误。现在作为一个新人来到公司，想不到董事长对我们说的就是这些。董事长还推荐一本书给我们叫《量子物理史话》。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[physical examination]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/14/physical-examination/"/>
    <updated>2013-07-14T20:20:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/14/physical-examination</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>找屋篇</strong></p>
<p>我答应过同学7月12号一起和他找屋租的，可惜到了11号，我就有点退缩了。同学和他老爸一起找了一天了，我想他们俩找得这么辛苦，我却在家，答应过别人又不去，岂不是又吃言，又玩拖延症，到时候又非后悔莫及。所以，就算到了12号的11点，我还是不管三七二十一，决定十三点去深圳。突然的决定，是因为我不想我又玩悔恨。到了深圳，我和他们找的第一个地方就是我们要租的地方，因此12号我们就找好房了。</p>
<!-- more -->
<p><strong>入职篇</strong></p>
<p>来TP-Link入职，用的是学校带来的坏习惯，鸡毛蒜皮的小事都需要别人提醒，假如没人提醒，自己就忘记去做。入职时温馨提示写得清清楚楚，明明白白要上网的同事在荔园3栋1楼登记，可惜自己没有看清楚，走马观花飘过；入职时温馨提示白字黑字写着7月14号11：30-13：30是统一充值饭卡的时间，可惜自己又错过。到头来自己又在悔恨人生，就为这么一点事，那么我的心情有怎么好起来呢？以后一定要仔细看清楚，并用手机日历记下，这样到时手机就会提示自己该做什么，而不是好似盲头苍蝇乱撞，到最后，又不知道缺了什么，或者少了什么。</p>
<p><strong>体检篇</strong></p>
<p>我知道身体存在问题，腹部膨胀，在高中的时候，我曾经想过高考完就去做一次彻底的体检，去查出自己的问题所在。可惜，我又把这样重要的事情放下，因为我没有积极去面对问题和解决问题。在大学的体检也没有相应项目的检查，到现在入职体检，有个肝胆B超，照出我有胆结石，那之前的口苦，腹部膨胀，血压在正常的高值也有了进一步的解释了。到现在我也清楚地意识到我的问题不止这些，还有面瘫、耳鸣、脚痛，骨盘偏左，但是我都没有真真正正采取行动去治好它们，或者从饮食行为上，学习、娱乐作息上去杜绝它们进一步恶化。反而之前还浑浑噩噩地去看电视，现在我又是悔恨过去的行为，因为再没有颓废，不积极的理由，后面就是绝路，随便一个恶化，都可以把我干掉了，并且我都没有做好准备。</p>
<p><strong>计划篇</strong></p>
<p>基于上面体检的问题，在TP-Link工作时，采取的策略就是在某一方面专研下去，上班的时候，做好自己的本职工作，积极应对。下班的时候，安排相应的时间学习。<strong>最重要的是，不管有多忙都要有一个或半个小时的锻炼，跑步或打羽毛球。不管别人怎么看自己，自己都要保持心情愉悦，宽畅。</strong></p>
<p><strong>深圳大学城游览篇</strong></p>
<p>我是住在哈工大的宿舍，体检完，没事情，我就独自一个人去游览了深圳大学城。深圳大学城是由清华、北大、哈工大研究院所组成，中间是深圳科技图书馆。在这里不是研究生、硕士，就是博士或者教授。虽然这里是和广州大学城新建的校区一样，但我感觉这里更像大学，更有大学的气息，也可能这里的学校都差不多是全国最好的大学。走到一个北大的教室，刚好是北京大学汇丰商学院2013年优秀大学生经济金融论坛，说白了，就相当于是夏令营，他们一个轮着一个到讲堂上做presentation，全程英文，如同论文答辩的形式，下面的评判都是海归回来的博士或者是教授，在用英文提问做presention的同学。他们的英文非常的漂亮，并且是用英文阐释经济学的内容，我一大半的英文都没听懂。当时，我觉得我太缺少这样锻炼的机会，在大学里，我应该抓紧这样的机会，而不是每次都让它溜走。他们才读大四，就已经比我厉害这么多，而我自己却是半桶水，根本就用不上场。</p>
<p>深圳科技图书馆是一个现代化，人性化的图书馆，广州新图书馆在它面前显得逊色。它不但配备完善，读书写字上网查阅资料样样都行，并且书籍琳琅满目。真不愧是给清华、北大和哈工大研究生的图书馆，并且是这三间学校公用的图书馆。有人说，图书馆是大学的心脏。从这样一个图书馆，就可以看出其大学的水平究竟是怎么样的。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Malloc]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/12/malloc/"/>
    <updated>2013-07-12T01:16:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/12/malloc</id>
    <content type="html"><![CDATA[<blockquote><p><p>malloc并不是从一个编译时就确定的固定大小的数组中分配空间，而是在需要的时向操作系统申请空间。因为程序中的某些地方可能不通过malloc调用申请空间（通过其它方式申请空间），因此，malloc管理的空间不一定是连续的。这样空闲存储空间以空闲块链表的方式组织，每个块包含一个长度、一个指向下一块的指针以及一个指向自身存储空间的指针。</p>
<!-- more -->
<p>当有申请请求时，malloc将扫描空闲块链表，直到找到一个足够大的块为止。该算法称为“首次适应”（first fit）；与之相对应的算法是“最佳适应”（best fit），它寻找满足条件的最小块。如果该块恰好与请求的大小相符合，则将它从链表中移走并返回给用户。如果该块太大，则将它分成两部分；大小合适的块返回给用户，剩下的部分留在空闲块链表中。如果找不到一个足够大的块，则向操作系统申请一个大块并加入到空闲块链表中。</p></p></blockquote>

<figure class='code'><figcaption><span>malloc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="n">Align</span><span class="p">;</span>     <span class="cm">/*按照long类型的边界对齐*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">union</span> <span class="n">header</span> <span class="p">{</span>          <span class="cm">/*块的头部*/</span>
</span><span class='line'>    <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">union</span> <span class="n">header</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="cm">/*空闲块链表的下一块*/</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>        <span class="cm">/*本块的大小*/</span>
</span><span class='line'>        <span class="p">}</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Align</span> <span class="n">x</span><span class="p">;</span>                    <span class="cm">/*强制块对齐*/</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">union</span> <span class="n">header</span> <span class="n">Header</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="n">base</span><span class="p">;</span>       <span class="cm">/*从空链表开始*/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="n">freep</span> <span class="o">=</span> <span class="nb">NULL</span> <span class="cm">/*空闲链表的初始指针*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*malloc函数:通用存储分配函数*/</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">malloc</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">prevp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="nf">morecore</span><span class="p">(</span><span class="kt">unsigned</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nunits</span> <span class="o">=</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">prevp</span> <span class="o">=</span> <span class="n">freep</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>    <span class="cm">/*没有空闲链表*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">base</span><span class="p">;</span>
</span><span class='line'>            <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span> <span class="p">;</span> <span class="n">prevp</span><span class="o">=</span><span class="n">p</span><span class="p">,</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">nunits</span><span class="p">)</span>                <span class="cm">/*足够大*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">nunits</span><span class="p">)</span>        <span class="cm">/*正好*/</span>
</span><span class='line'>                        <span class="n">prevp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>                                    <span class="cm">/*分配末尾部分*/</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">freep</span><span class="p">)</span>                              <span class="cm">/*闭环的空闲链表*/</span>
</span><span class='line'>                <span class="k">if</span><span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="n">morecore</span><span class="p">(</span><span class="n">nunits</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>                        <span class="cm">/*没有剩余的存储空间*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>函数morecore用于向操作系统请求存储空间。在设置完size字段后，morecore函数调用free函数把多余的存储空间插入到空闲区域中。</p></p></blockquote>

<figure class='code'><figcaption><span>morecore  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define NALLOC 1024</span>
</span><span class='line'><span class="cm">/*morecore函数:向系统申请更多的存储空间*/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="nf">morecore</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">nu</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span><span class="p">,</span> <span class="o">*</span><span class="n">sbrk</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">up</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cp</span> <span class="o">=</span> <span class="n">sbrk</span><span class="p">(</span><span class="n">nu</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">cp</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>    <span class="cm">/*没有空间*/</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">up</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">cp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">up</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nu</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">up</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">freep</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>free函数从freep指向的地址开始，逐个扫描空闲块链表，寻找可以插入空闲块的地方。该位置可能在两个空闲块之间，也可能在链表的末尾。在任何一种情况下，如果被释放的块与另一空闲块相邻，则将这两个块合并起来。合并两个块的操作很简单，只需要设置指针指向正确的位置，并设置正确的块大小就可以了。</p></p></blockquote>

<figure class='code'><figcaption><span>free  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*free函数:将块ap放入空闲块链表中*/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ap</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Header</span> <span class="o">*</span><span class="n">bp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bp</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">ap</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>                   <span class="cm">/*指向块头*/</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">p</span> <span class="o">=</span> <span class="n">freep</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span> <span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">bp</span> <span class="o">&gt;</span><span class="n">p</span> <span class="o">||</span> <span class="n">bp</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">))</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>                                <span class="cm">/*被释放的块在链表的开头或末尾*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">bp</span> <span class="o">+</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>   <span class="cm">/*与上一相邻块合并*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>            <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">bp</span><span class="p">)</span>             <span class="cm">/*与下一相邻块合并*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&gt;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">freep</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>typedef和union的使用解决了地址对齐（假定sbrk返回的是合适的指针)问题</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Command]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/11/linux-command/"/>
    <updated>2013-07-11T00:39:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/11/linux-command</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux的命令种类繁多，但掌握方法和规则，记住常用的命令，不懂的用man来查询。</p>
<p>1.解压.tar.xz:        tar Jxvf xxx.tar.xz</p>
<p>2.解压7z：       7z x filename.7z</p>
<!-- more -->
<p>3.统计源代码的行数：
<p>find . -name &#8217;<em>.c&#8217; -o -name &#8217;</em>.h&#8217; | xargs wc -l</p>
<p>find . -name &#8217;<em>.c&#8217; -o -name &#8217;</em>.h&#8217; | xargs cat | sed &#8216;/<sup>\s*$/d&#8217;</sup> | wc -l</p>
<p>cloc ./</p>
<p>4.grep命令：grep (regular pattern) (input file)</p>
<p>使用 grep 抓取匹配关键字附近的行, 有时我们会对 grep 匹配关键字附近的行感兴趣（这有点上下文的味道），使用 -A、-B、以及 -C 选项可以满足我们的愿望。</p>
<p>grep -A <n> &#8216;keyword&#8217; file # 匹配 keyword 的下 n 行</p>
<p>grep -B <n> &#8216;keyword&#8217; file # 匹配 keyword 的上 n 行</p>
<p>grep -C <n> &#8216;keyword&#8217; file # 匹配 keyword 的上 n 行及下 n 行</p>
<p>5.apt-get命令</p>
<p>apt-cache search ‹name› # find package ‹name› for install by “apt-get”</p>
<p>apt-cache show ‹name›   # describe package ‹name›</p>
<p>apt-get install ‹name›  # install a new program. (usually used with sudo in front)</p>
<p>apt-get remove ‹name›   # remove (un-install) a program.</p>
<p>apt-get purge ‹name›    # remove a program and its config files.</p>
<p>dpkg -l # list all installed packages</p>
<p>6.反向解析域名:host 0.0.0.0</p>
<p>7.得到本机ip:</p>
<p>ifconfig | awk &#8216;/inet addr:/ {print $2}&#8217; | awk -F: &#8216;{if ($2 != &#8220;127.0.0.1&#8221;) print $2}&#8217;</p>
<p>ifconfig | sed -rn &#8216;s/.<em>r:([^ ]+) .</em>/\1/p&#8217;</p>
<p>8.创建目录：mkdir {1..50}；创建文件：touch {1..50}；</p>
<p>9.对打开端口进行检查：netstat -an | grep &#8211;color -i -E &#8216;listen|listening&#8217;</p>
<p>netstat -tlnp</p>
<p>10.找到超过100M的文件：find . -type f -size +100M</p>
<p>11.删除文件：rm !(<em>.foo|</em>.bar|*.baz)</p>
<p>12.快速重命名：mv filename.{old,new} </p>
<p>13.终止进程：killall -KILL 进程名称 | killall -signal process | kill -SIGKILL processID</p>
<p>14.成为Ubuntu超级用户：sudo passwd root 新建root用户</p>
<p>15.寻找文件：find 路径名（path） 参数（根据文件名称-name、类型-type、权限-perm、修改世间-atime） 模式匹配</p>
<p>16.使某个配置文件立即生效：source /etc/profile</p>
<p>17.打开或关闭某项服务:service 某项服务（iptables） on|stop</p>
<p>18.查看系统进程占用资源的工具：top,ps,free,vmstat,iostat,pmap</p>
<p>19.找到某个进程的ID：ps -aux | grep processname </p>
<p>20.根据目录下文件的大小排序输出：du -hs * | sort -h </p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/10/thread/"/>
    <updated>2013-07-10T15:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/10/thread</id>
    <content type="html"><![CDATA[<blockquote><p><p>线程包含了表示进程内执行环境必需的信息，其中包含进程中标识线程的线程ID、一组寄存器、栈、调度优先级和策略、信号屏蔽字、errno变量以及线程私有数据。进程的所有信息对该进程的所有线程都是共享的，包括可执行的程序文本、程序的全局内存和堆内存、栈以及文件描述符。</p>
<!-- more -->
<p>进程原语和线程原语的比较:</p>
<p><table border="1">
<tr><th>进程原语       |</th><th>  线程原语        |</th><th>描述        </th></tr>
<tr><td>fork       |</td><td>pthread_create    |</td><td>创建新的控制流 </td></tr>
<tr><td>exit       |</td><td>pthread_exit      |</td><td>从现有的控制流退出   </td></tr>
<tr><td>waitpid        |</td><td>pthread_join  |</td><td>从控制流中得到退出的状态  </td></tr>
<tr><td>atexit     |</td><td>pthread_cleanup_push|</td><td>注册在退出控制流时调用的函数  </td></tr>
<tr><td>getpid     |</td><td>pthread_self      |</td><td>获取控制流的ID  </td></tr>
<tr><td>abort      |</td><td>pthread_cancel    |</td><td>请求控制流的非正常退出 </td></tr>
</table></p>
<p>当多个控制进程共享相同的内存时，就需要线程同步机制，以保证它们在访问变量的存储内容时不会访问到无效的数值。线程同步机制：</p>
<p><strong>1.互斥量</strong>,互斥量从本质上来说是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量上的锁。</p></p></blockquote>

<figure class='code'><figcaption><span>互斥量  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_init</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">mutex</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="n">pthread_mutexattr_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">attr</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_destroy</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_trylock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span>  <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>2.读写锁</strong>,当读操作比较频繁时，读写锁可以改善性能。 </p></p></blockquote>

<figure class='code'><figcaption><span>读写锁例子  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">job</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_t</span>    <span class="n">j_id</span><span class="p">;</span>          <span class="cm">/*告诉哪条线程在操作任务*/</span>
</span><span class='line'>    <span class="cm">/*...更多的定义在后面*/</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">queue</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">q_head</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">q_tail</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_rwlock_t</span> <span class="n">q_lock</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*初始化队列*/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">queue_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span> <span class="o">=</span>  <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">pthread_rwlock_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">err</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*...继续初始化*/</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*在队列的前面插入一个任务*/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">job_insert</span><span class="p">(</span> <span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span><span class="o">-&gt;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>     <span class="cm">/*队列是空的*/</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*在队列的尾部添加一个任务*/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">job_append</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span><span class="o">-&gt;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>   <span class="cm">/*队列是空的*/</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*在队列中删除一个任务*/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">job_remove</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pthead_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">jp</span> <span class="o">==</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">==</span> <span class="n">jp</span><span class="p">)</span>
</span><span class='line'>                <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">jp</span> <span class="o">==</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">==</span> <span class="n">jp</span><span class="p">)</span>
</span><span class='line'>                <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_prev</span><span class="o">-&gt;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'>            <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span><span class="o">-&gt;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>       <span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*在队列中根据线程找到任务*/</span>
</span><span class='line'><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="nf">job_find</span><span class="p">(</span> <span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">,</span> <span class="n">pthread_t</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">jp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">pthread_rwlock_rdlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">jp</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_head</span><span class="p">;</span> <span class="n">jp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">jp</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_next</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">pthread_equal</span><span class="p">(</span><span class="n">jp</span><span class="o">-&gt;</span><span class="n">j_id</span><span class="p">,</span> <span class="n">id</span><span class="p">))</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">qp</span><span class="o">-&gt;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">jp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>3.条件变量</strong>，条件变量与互斥量一起使用，允许线程以无竞争的方式等待特定的条件发生。</p></p></blockquote>

<figure class='code'><figcaption><span>互斥量  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_init</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">cond</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">pthread_condattr_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">attr</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_destroy</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">cond</span><span class="p">,</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_signal</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_broadcast</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>线程的基本的同步机制：互斥、读写锁及条件变量,了解如何使用它们保护共享资源。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Concept English]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/09/new-concept-english/"/>
    <updated>2013-07-09T12:35:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/09/new-concept-english</id>
    <content type="html"><![CDATA[<blockquote><p><p>新概念英语我只是仰慕、走马观花，但一直都没有细心研读。因此英语停滞不前，人要用心，才会学有所成，而不是应付了事。时间不留人，荒废的青春会一去不复返，这是人人都是平等的。应该用在哪些地方，如何是用，怎样规划？这些都是需要思考的地方。</p>
<!-- more -->
<p>《Concept Second》的句子都基本上是简单句，如，The manager was sympathetic, but he could do nothing（来源于 It could be worse).</p>
<p>《Concept Third》的句子略加复杂，如，Yet, in real life, circumstances do sometimes conspire to bring about coincidences which anyone but a nineteenth century novelist would find incredible（来源于 a chance in a million).这个句子里有定语从句。</p>
<p>《Concept Fourth》的句子就已经很复杂了，如, Young men who have reason to fear that they will be killed in battle may justifiably feel bitter in the thought that they have been cheated of the best things that life has to offer(来源于 how to grow old）.这句子里有三个定语从句，一个宾语从句。</p>
<p>由此可见，新概念英语从句子的长度、复杂度，题材的思考度来定义的。其许多文章的内容都值得去深思。如上面一篇文章《how to grow old》,就是教老人如何安度晚年的，属于心理范畴；《Youth》是谈论青年问题的；《Education》是谈论教育问题的。这些文章都是议论性的文章，在学习的时候，不但要懂得阐述文章上的观点，而且还要发表自己的看法，而不是人云亦云。要深入地学习文章，就要研讨它们，而不是有大概印象，或者大概有这回事的糊涂想法。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[literature]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/09/literature/"/>
    <updated>2013-07-09T12:32:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/09/literature</id>
    <content type="html"><![CDATA[<blockquote><p><p>《红楼梦》这是一本随着年龄的增长，越读越有意思的书。高中的时候读，可能比较关注贾宝玉、林黛玉、薛宝钗等人。再大一点读，才发现凤姐的厉害，精明能干、相貌出众的人。贾瑞一见凤姐，就起淫心。他也不掂量一下自己有多少斤两，简直是癞蛤蟆想吃天鹅肉，凤姐略施小计，暗示他要改过自身，可惜其不吸取教训，只有去阎罗王那里报到，死之前，还幻想着和凤姐进行云雨之情，难为他老爸含辛茹苦地将其抚养成人，还对他勤加管教，想其有一日能够考取功名利禄、鸡犬升天。在三妻四妾的封建社会，虽然凤姐是一个超级女强人，使色胆包天的贾琏基本上没有妾侍，但其难保贾琏不会在外面拈花野草，偷鸡摸狗、风流快活，从偷取尤二姐就反映贾琏虽然惧怕凤姐，但也有胆量去做凤姐不允许的事情。不过凤姐也够心狠手辣，斩草除根。可惜尤二姐，就这样香消玉损，和尤三姐相比，就没有那么刚烈潇洒。在《红楼梦》中，薛宝钗，袭人等人都是“识时务”之人，讨得大家的欢心；林黛玉、晴雯等人就是有个性，不喜欢迎合的人；贾宝玉更倾向于林黛玉这类人。尤三姐、鸳鸯是刚烈，不对现实屈服的人；史湘云是豁达之人。</p>
<!-- more -->
<p>《围城》钱锺书这本书的文字幽默风趣的，曲高和众。方鸿渐是一个冒牌的哲学博士，而苏小姐是一个名副其实的博士，在回国的路上，苏小姐对方鸿渐已经有意思，回国后，苏小姐更想方鸿渐主动地追求她，可惜他喜欢上其表妹唐小姐，后来他俩也因双方互相误解而分开。方鸿渐也去三闾大学教书，在路途上认识孙柔嘉，在三闾大学，由于他帮助过她，且受人所托照顾她，最终二人还走入婚姻的殿堂。不过，自从二人结婚后，大家都不满于双方的作为，以至于两人开始感情上的分裂，日日吵闹。婚姻，未进入的人渴望进入，已经进入的人渴望能够出来。</p>
<p>《老子》是关于老子思想的书籍，老子思想的核心是无为而治，顺其自然。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traceroute]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/09/traceroute/"/>
    <updated>2013-07-09T12:31:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/09/traceroute</id>
    <content type="html"><![CDATA[<blockquote><p><p>Traceroute允许确定IP数据报从本地主机游历到某个远程主机所经过的路径。traceroute使用IPv4的TTL字段或IPv6的跳限字段以及两种ICMP消息。它一开始向目的地发送一个TTL(或跳限）为1的数据报。这个数据报导致第一跳路由器返送一个ICMP“time exceeded in transmit&#8221;(传输中超时）错误。接着它递增TTL一次发送一个UDP数据报，从而逐步确定下一跳路由器。当某个UDP数据报到达最终目的地时，目标是由这个主机返送一个ICMP“port unreachable(端口不可达）“错误。这个目标通过向一个随机选取的（但愿）未被目的主机使用的端口发送UDP数据报得以实现。</p>
<!-- more --></p></blockquote>

<figure class='code'><figcaption><span>traceroute  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in_systm.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip_icmp.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/udp.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFSIZE  1500</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">rec</span><span class="p">{</span>
</span><span class='line'>    <span class="n">u_short</span> <span class="n">rec_seq</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_short</span> <span class="n">rec_ttl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span>  <span class="n">rec_tv</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">recvbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">sendbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>     <span class="n">datalen</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'><span class="n">u_short</span> <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">nsent</span><span class="p">;</span>
</span><span class='line'><span class="n">pid_t</span>  <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">probe</span><span class="p">,</span> <span class="n">nprobes</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">sendfd</span><span class="p">,</span> <span class="n">recvfd</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">ttl</span><span class="p">,</span> <span class="n">max_ttl</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">verbose</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">gotalarm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">icmpcode_v4</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">icmpcode_v6</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v4</span><span class="p">(</span><span class="kt">int</span> <span class="p">,</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v6</span><span class="p">(</span><span class="kt">int</span> <span class="p">,</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_alrm</span><span class="p">(</span><span class="kt">int</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">traceloop</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">tv_sub</span><span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">proto</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">icmpcode</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="p">(</span><span class="o">*</span><span class="n">recv</span><span class="p">)(</span><span class="kt">int</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sasend</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sarecv</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">salast</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sabind</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span>    <span class="n">salen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">icmpproto</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">ttllevel</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>             <span class="n">ttloptname</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">pr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip6.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/icmp6.h&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v4</span> <span class="o">=</span> <span class="p">{</span> <span class="n">icmpcode_v4</span><span class="p">,</span> <span class="n">recv_v4</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IPPROTO_ICMP</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">,</span> <span class="n">IP_TTL</span><span class="p">};</span>
</span><span class='line'><span class="cp">#ifdef IPV6</span>
</span><span class='line'><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v6</span> <span class="o">=</span><span class="p">{</span><span class="n">icmpcode_v6</span><span class="p">,</span> <span class="n">recv_v6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="n">IPPROTO_ICMPV6</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_UNICAST_HOPS</span><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">datalen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">rec</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">max_ttl</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nprobes</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">u_short</span> <span class="n">dport</span> <span class="o">=</span> <span class="mi">32768</span> <span class="o">+</span> <span class="mi">666</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;m:v&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="sc">&#39;m&#39;</span>:
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">max_ttl</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">optarg</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;invalid -m value&quot;</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="sc">&#39;v&#39;</span>:
</span><span class='line'>                        <span class="n">verbose</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unrecognized option:%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">optind</span> <span class="o">!=</span> <span class="n">argc</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage : traceroute [ -m &lt;maxttl&gt; -v] &lt;hostname&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">host</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">optind</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">sig_alrm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ai</span> <span class="o">=</span> <span class="n">host_serv</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">h</span> <span class="o">=</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;traceroute to %s (%s): %d hops max, %d data bytes </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_canonname</span><span class="o">?</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_canonname</span><span class="o">:</span><span class="n">h</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span><span class="n">max_ttl</span><span class="p">,</span> <span class="n">datalen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET</span>  <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proto_v4</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proto_v6</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">IN6_IS_ADDR_V4MAPPED</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(((</span><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="o">*</span><span class="p">)</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">sin6_addr</span><span class="p">)))</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cannot traceroute IPV4-mapped IPV6 address&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif  </span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unknown address family  %d&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span> <span class="o">=</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">si_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salast</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sabind</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span> <span class="o">=</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">traceloop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">exit</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">traceloop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">rtt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">rec</span> <span class="o">*</span><span class="n">rec</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tvrecv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">recvfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">icmpproto</span><span class="p">);</span>    <span class="cm">/*创建两个套接字*/</span>
</span><span class='line'>    <span class="n">setuid</span><span class="p">(</span><span class="n">getuid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef IPV6</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="o">-&gt;</span><span class="n">sa_family</span> <span class="o">==</span> <span class="n">AF_INET6</span> <span class="o">&amp;&amp;</span> <span class="n">verbose</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>                  <span class="cm">/*设置ICMPv6接收过滤器*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">icmp6_filter</span> <span class="n">myfilt</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ICMP6_FILTER_SETBLOCKALL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ICMP6_FILTER_SETPASS</span><span class="p">(</span><span class="n">ICMP6_TIME_EXCEEDED</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ICMP6_FILTER_SETPASS</span><span class="p">(</span><span class="n">ICMP6_DST_UNREACH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setsockopt</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">ICMP6_FILTER</span><span class="p">,</span>
</span><span class='line'>                    <span class="o">&amp;</span><span class="n">myfilt</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">myfilt</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sendfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">,</span><span class="n">SOCK_DGRAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>               <span class="cm">/*给UDP套接字捆绑源端口*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sabind</span><span class="o">-&gt;</span><span class="n">sa_family</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sport</span> <span class="o">=</span> <span class="p">(</span><span class="n">getpid</span><span class="p">()</span> <span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sock_set_port</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sabind</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">,</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">));</span>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sabind</span><span class="p">,</span>  <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sig_alrm</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">);</span>        <span class="cm">/*建立SIGALRM的信号处理函数*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">seq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">ttl</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">ttl</span> <span class="o">&lt;</span> <span class="n">max_ttl</span> <span class="o">&amp;&amp;</span> <span class="n">done</span> <span class="o">==</span><span class="mi">0</span><span class="p">;</span> <span class="n">ttl</span> <span class="o">++</span><span class="p">)</span>        <span class="cm">/*主循环,设置TTL或跳限并发送3个探测分组*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">setsockopt</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">ttllevel</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">ttloptname</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ttl</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>            <span class="n">bzero</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salast</span> <span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%2d&quot;</span><span class="p">,</span> <span class="n">ttl</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">probe</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">probe</span> <span class="o">&lt;</span> <span class="n">nprobes</span><span class="p">;</span> <span class="n">probe</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">rec</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">rec</span><span class="o">*</span><span class="p">)</span> <span class="n">sendbuf</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">rec</span><span class="o">-&gt;</span><span class="n">rec_seq</span> <span class="o">=</span> <span class="o">++</span><span class="n">seq</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">rec</span><span class="o">-&gt;</span><span class="n">rec_ttl</span> <span class="o">=</span> <span class="n">ttl</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">rec_tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">sock_set_port</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">,</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span><span class="o">+</span> <span class="n">seq</span><span class="p">));</span>     <span class="cm">/*设置目的端口并发送UDP数据报*/</span>
</span><span class='line'>                    <span class="n">sendto</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">sendbuf</span><span class="p">,</span><span class="n">datalen</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">code</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">recv</span><span class="p">)(</span><span class="n">seq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tvrecv</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span>    <span class="cm">/*读取ICMP消息*/</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; * &quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">else</span>                     <span class="cm">/*显示应答*/</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">NI_MAXHOST</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="n">sock_cmp_addr</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salast</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="k">if</span><span class="p">(</span> <span class="n">getnameinfo</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str</span><span class="p">),</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                        <span class="p">{</span>
</span><span class='line'>                                            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %s (%s)&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">));</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                    <span class="k">else</span>
</span><span class='line'>                                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">));</span>
</span><span class='line'>                                    <span class="n">memcpy</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salast</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="n">tv_sub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tvrecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rec</span><span class="o">-&gt;</span><span class="n">rec_tv</span><span class="p">);</span>
</span><span class='line'>                            <span class="n">rtt</span> <span class="o">=</span> <span class="n">tvrecv</span><span class="p">.</span><span class="n">tv_sec</span><span class="o">*</span><span class="mf">1000.0</span> <span class="o">+</span> <span class="n">tvrecv</span><span class="p">.</span><span class="n">tv_usec</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %.3f ms&quot;</span><span class="p">,</span> <span class="n">rtt</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="n">code</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">done</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">code</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (ICMP %s)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">icmpcode</span><span class="p">)(</span><span class="n">code</span><span class="p">));</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v4</span><span class="p">(</span><span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hlen1</span><span class="p">,</span> <span class="n">hlen2</span><span class="p">,</span> <span class="n">icmplen</span> <span class="p">,</span><span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="n">ip</span><span class="p">,</span> <span class="o">*</span><span class="n">hip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="n">udp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>           <span class="cm">/*设置报警时钟并读入每个ICMP消息*/</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">gotalarm</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>            <span class="n">len</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">;</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">recvbuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">recvbuf</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;recvfrom error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="n">ip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)</span> <span class="n">recvbuf</span><span class="p">;</span>                <span class="cm">/*获取ICMP首部指针*/</span>
</span><span class='line'>            <span class="n">hlen1</span> <span class="o">=</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">ip_hl</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">icmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">icmplen</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">hlen1</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_TIMXCEED</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                                <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span> <span class="o">==</span> <span class="n">ICMP_TIMXCEED_INTRANS</span><span class="p">)</span>   <span class="cm">/*处理ICMP传输中超时错误*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">))</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">hip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">hlen2</span> <span class="o">=</span> <span class="n">hip</span><span class="o">-&gt;</span><span class="n">ip_hl</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">hip</span><span class="o">-&gt;</span><span class="n">ip_p</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                                <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_UNREACH</span><span class="p">)</span><span class="cm">/*处理ICMP传输中不可达错误*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="n">icmplen</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">hip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">hlen2</span> <span class="o">=</span> <span class="n">hip</span><span class="o">-&gt;</span><span class="n">ip_hl</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">hip</span><span class="o">-&gt;</span><span class="n">ip_p</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                                        <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span> <span class="o">==</span> <span class="n">ICMP_UNREACH_PORT</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                                <span class="n">ret</span> <span class="o">=</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (from %s: type = %d, code = %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span><span class="p">,</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span><span class="n">tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_alrm</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v6</span><span class="p">(</span><span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef IPV6</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">hlen2</span><span class="p">,</span> <span class="n">icmp6len</span> <span class="p">,</span><span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ip6_hdr</span>  <span class="o">*</span><span class="n">hip6</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp6_hdr</span>  <span class="o">*</span><span class="n">icmp6</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="n">udp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">gotalarm</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>            <span class="n">len</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">;</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">recvbuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">recvbuf</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;recvfrom error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">icmp6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp6_hdr</span> <span class="o">*</span><span class="p">)</span> <span class="n">recvbuf</span> <span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">icmp6len</span> <span class="o">=</span> <span class="n">n</span> <span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span> <span class="o">==</span> <span class="n">ICMP6_TIME_EXCEEDED</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span> <span class="o">==</span> <span class="n">CMP6_TIME_EXCEEDED_INTRANS</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">icmp6len</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">hip6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span><span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">hlen2</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span>  <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">hip6</span><span class="o">-&gt;</span><span class="n">ip6_nxt</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                                <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span> <span class="o">==</span> <span class="n">ICMP6_DST_UNREACH</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="n">icmp6len</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                   <span class="n">hip6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span><span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">hlen2</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span>  <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">hip6</span><span class="o">-&gt;</span><span class="n">ip6_nxt</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                                <span class="o">&amp;&amp;</span> <span class="n">udp</span><span class="o">-&gt;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span> <span class="o">==</span> <span class="n">ICMP6_DST_UNREACH_NOPORT</span><span class="p">)</span>
</span><span class='line'>                                <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                                <span class="n">ret</span> <span class="o">=</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (from %s: type = %d, code = %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span><span class="p">,</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span><span class="n">tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>原始套接字提供3个能力：1.进程可以读写ICMPv4、IGMPv4和ICMPv6等分组； 2.进程可以读写内核不处理其协议字段的IP数据报； 3.进程可以自行构造IPv4首部，通常用于诊断目的（亦或不幸地被黑客们所利用).</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ping]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/09/ping/"/>
    <updated>2013-07-09T11:57:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/09/ping</id>
    <content type="html"><![CDATA[<blockquote><p><p>ping程序操作非常简单，往某个IP地址发送一个ICMP回射请求，该节点则以一个ICMP回射应答响应。此程序用到原始套接字。</p>
<!-- more --></p></blockquote>

<figure class='code'><figcaption><span>ping  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;netinet/in_systm.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/ip_icmp.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define  BUFSIZE  1500</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span>  <span class="n">sendbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span>    <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">nsent</span><span class="p">;</span>
</span><span class='line'><span class="n">pid_t</span>   <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">sockfd</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">verbose</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>    <span class="nf">init_v6</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">proc_v4</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">ssize_t</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">proc_v6</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">ssize_t</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">send_v4</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">send_v6</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">readloop</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">sig_alrm</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span>    <span class="nf">tv_sub</span><span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span>   <span class="n">proto</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span>    <span class="p">(</span><span class="o">*</span><span class="n">fproc</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">ssize_t</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span>    <span class="p">(</span><span class="o">*</span><span class="n">fsend</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span>    <span class="p">(</span><span class="o">*</span><span class="n">finit</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>    <span class="k">struct</span>  <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sasend</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span>  <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sarecv</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span>   <span class="n">salen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="n">icmpproto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">*</span><span class="n">pr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef IPV6</span>
</span><span class='line'><span class="cp">#include    &lt;netinet/ip6.h&gt;</span>
</span><span class='line'><span class="cp">#include    &lt;netinet/icmp6.h&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*定义IPv4和IPv6的proto结构*/</span>
</span><span class='line'><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v4</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span><span class="n">proc_v4</span><span class="p">,</span> <span class="n">send_v4</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">IPPROTO_ICMP</span><span class="p">};</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v6</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span><span class="n">proc_v6</span><span class="p">,</span> <span class="n">send_v6</span><span class="p">,</span> <span class="n">init_v6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">IPPROTO_ICMP6</span><span class="p">};</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">datalen</span> <span class="o">=</span><span class="mi">56</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*获取主机和相关信息*/</span>
</span><span class='line'><span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="nf">host_serv</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">serv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="kt">int</span> <span class="n">socktype</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">addrinfo</span> <span class="n">hints</span><span class="p">,</span> <span class="o">*</span><span class="n">res</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hints</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">addrinfo</span><span class="p">));</span>
</span><span class='line'>    <span class="n">hints</span><span class="p">.</span><span class="n">ai_flags</span> <span class="o">=</span> <span class="n">AI_CANONNAME</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hints</span><span class="p">.</span><span class="n">ai_family</span> <span class="o">=</span> <span class="n">family</span><span class="p">;</span>
</span><span class='line'>    <span class="n">hints</span><span class="p">.</span><span class="n">ai_socktype</span> <span class="o">=</span> <span class="n">socktype</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getaddrinfo</span><span class="p">(</span> <span class="n">host</span><span class="p">,</span> <span class="n">serv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hints</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">res</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">res</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*将ip地址值形式转变为表达形式*/</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">sock_ntop_host</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sa</span><span class="p">,</span> <span class="n">socklen_t</span> <span class="n">salen</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">portstr</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span> <span class="n">sa</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">AF_INET</span>:
</span><span class='line'>                 <span class="p">{</span>
</span><span class='line'>                        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="o">*</span><span class="n">sin</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="o">*</span><span class="p">)</span><span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="n">inet_ntop</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sin</span><span class="o">-&gt;</span><span class="n">sin_addr</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="n">ntohs</span><span class="p">(</span><span class="n">sin</span><span class="o">-&gt;</span><span class="n">sin_port</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="n">snprintf</span><span class="p">(</span><span class="n">portstr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">portstr</span><span class="p">),</span> <span class="s">&quot;:%d&quot;</span><span class="p">,</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">sin</span><span class="o">-&gt;</span><span class="n">sin_port</span><span class="p">));</span>
</span><span class='line'>                                <span class="n">strcat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">portstr</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="k">case</span> <span class="n">AF_INET6</span>:
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="o">*</span><span class="n">sin6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="o">*</span><span class="p">)</span><span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="n">inet_ntop</span><span class="p">(</span><span class="n">AF_INET6</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sin6</span><span class="o">-&gt;</span><span class="n">sin6_addr</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">str</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="n">ntohs</span><span class="p">(</span><span class="n">sin6</span><span class="o">-&gt;</span><span class="n">sin6_port</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="n">snprintf</span><span class="p">(</span><span class="n">portstr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">portstr</span><span class="p">),</span> <span class="s">&quot;:%d&quot;</span><span class="p">,</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">sin6</span><span class="o">-&gt;</span><span class="n">sin6_port</span><span class="p">));</span>
</span><span class='line'>                                <span class="n">strcat</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">portstr</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">ai</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;v&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>           <span class="cm">/*处理命令行选项*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="sc">&#39;v&#39;</span>:
</span><span class='line'>                        <span class="n">verbose</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unrecognized option:%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">optind</span> <span class="o">!=</span> <span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage:ping [ -v ] &lt;hostname&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">host</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">optind</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">()</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">;</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">sig_alrm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ai</span> <span class="o">=</span> <span class="n">host_serv</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>                            <span class="cm">/*处理主机名参数*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PING %s (%s): %d data bytes </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_canonname</span><span class="o">?</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_canonname</span><span class="o">:</span><span class="n">h</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">datalen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET</span>  <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proto_v4</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">proto_v6</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">IN6_IS_ADDR_V4MAPPED</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(((</span><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="o">*</span><span class="p">)</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">sin6_addr</span><span class="p">)))</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cannot ping IPV4-mapped IPV6 address&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif  </span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unknown address family  %d&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span> <span class="o">=</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span> <span class="o">=</span> <span class="n">ai</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">readloop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">readloop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">recvbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">controlbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">msghdr</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">iovec</span>    <span class="n">iov</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">icmpproto</span><span class="p">);</span>  <span class="cm">/*创建原始的套接字*/</span>
</span><span class='line'>    <span class="n">setuid</span><span class="p">(</span><span class="n">getuid</span><span class="p">());</span>                                       <span class="cm">/*不需要特殊的允许*/</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">finit</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">finit</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="mi">60</span><span class="o">*</span><span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>    <span class="n">setsockopt</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_RCVBUF</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">size</span><span class="p">));</span>  <span class="cm">/*设置套接字接受缓冲区的大小*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sig_alrm</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">);</span>                                  <span class="cm">/*发送第一个分组*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">iov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="n">recvbuf</span><span class="p">;</span>                               <span class="cm">/*为recvmsg设置msghdr结构*/</span>
</span><span class='line'>    <span class="n">iov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">recvbuf</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_name</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">iov</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_iovlen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msg</span><span class="p">.</span><span class="n">msg_control</span> <span class="o">=</span> <span class="n">controlbuf</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>                                                    <span class="cm">/*读取 所有ICMP消息的无限循环*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">;</span>
</span><span class='line'>            <span class="n">msg</span><span class="p">.</span><span class="n">msg_controllen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">controlbuf</span><span class="p">);</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="n">recvmsg</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;recvmsg error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tval</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">fproc</span><span class="p">)(</span><span class="n">recvbuf</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tval</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">tv_sub</span><span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">out</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span> <span class="n">out</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">-=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">tv_usec</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="cm">/*out -=in*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">--</span><span class="n">out</span><span class="o">-&gt;</span><span class="n">tv_sec</span><span class="p">;</span>
</span><span class='line'>            <span class="n">out</span><span class="o">-&gt;</span><span class="n">tv_usec</span> <span class="o">+=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">out</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">-=</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">tv_sec</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">proc_v4</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">len</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">msg</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tvrecv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hlen1</span><span class="p">,</span> <span class="n">icmplen</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span>  <span class="n">rtt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="n">ip</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tvsend</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">;</span>                 <span class="cm">/*IP节的头*/</span>
</span><span class='line'>    <span class="n">hlen1</span> <span class="o">=</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">ip_hl</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>            <span class="cm">/*IP节的长度*/</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">ip_p</span> <span class="o">!=</span> <span class="n">IPPROTO_ICMP</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>                                 <span class="cm">/*没有ICMP*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">icmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="n">hlen1</span><span class="p">);</span>   <span class="cm">/*ICMP节的头*/</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">icmplen</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span><span class="n">hlen1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_ECHOREPLY</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_id</span> <span class="o">!=</span> <span class="n">pid</span><span class="p">)</span>          <span class="cm">/*不是对我们的ECHO_REQUEST进行回复*/</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>                                 <span class="cm">/*没有足够数据可用*/</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tvsend</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">)</span><span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_data</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tv_sub</span><span class="p">(</span><span class="n">tvrecv</span><span class="p">,</span> <span class="n">tvsend</span><span class="p">);</span>
</span><span class='line'>            <span class="n">rtt</span> <span class="o">=</span> <span class="n">tvrecv</span><span class="o">-&gt;</span><span class="n">tv_sec</span><span class="o">*</span><span class="mf">1000.0</span> <span class="o">+</span> <span class="n">tvrecv</span><span class="o">-&gt;</span><span class="n">tv_usec</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d bytes from %s: seq=%u, ttl=%d, rtt=%.3f ms</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">icmplen</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_seq</span><span class="p">,</span> <span class="n">ip</span><span class="o">-&gt;</span><span class="n">ip_ttl</span><span class="p">,</span> <span class="n">rtt</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">verbose</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d bytes from %s: type = %d, code = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">icmplen</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span><span class="p">,</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">init_v6</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="n">on</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">verbose</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>              <span class="cm">/*设置ICMPv6接收过滤器*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">struct</span> <span class="n">icmp6_filter</span> <span class="n">myfilt</span><span class="p">;</span>
</span><span class='line'>            <span class="n">ICMP6_FILTER_SETBLOCKALL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">myflit</span><span class="p">);</span>
</span><span class='line'>            <span class="n">ICMP6_FILTER_SETPASS</span><span class="p">(</span><span class="n">ICMP6_ECHO_REPLY</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">myflit</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setsockopt</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">ICMP6_FILTER</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">myflit</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">myflit</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#ifdef IPV6_RECVHOPLIMIT</span>
</span><span class='line'>    <span class="n">setsockopt</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_RECVHOPLIMIT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">on</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">on</span><span class="p">));</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="n">setsockopt</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_HOPLIMIT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">on</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">on</span><span class="p">));</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">proc_v6</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">ssize_t</span> <span class="n">len</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msghdr</span> <span class="o">*</span><span class="n">msg</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tvrecv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">rtt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp6_hdr</span><span class="o">*</span> <span class="n">icmp6</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span> <span class="n">tvsend</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">cmsghdr</span> <span class="o">*</span><span class="n">cmsg</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hlim</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">icmp6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp6_hdr</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">;</span>                 <span class="cm">/*获取ICMPV6首部的指针*/</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">len</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span> <span class="o">==</span> <span class="n">ICMP6_ECHO_REPLY</span><span class="p">)</span>  <span class="cm">/*检查ICMP回射应答*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_id</span> <span class="o">!=</span> <span class="n">pid</span><span class="p">)</span>     <span class="cm">/*不是对我们的ECHO_REQUEST进行回复*/</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>                                <span class="cm">/*没有足够数据可用*/</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tvsend</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">)(</span><span class="n">icmp6</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">tv_sub</span><span class="p">(</span><span class="n">tvrecv</span><span class="p">,</span> <span class="n">tvsend</span><span class="p">);</span>
</span><span class='line'>            <span class="n">rtt</span> <span class="o">=</span> <span class="n">tvrecv</span><span class="o">-&gt;</span><span class="n">tv_sec</span><span class="o">*</span><span class="mf">1000.0</span> <span class="o">+</span> <span class="n">tvrecv</span><span class="o">-&gt;</span><span class="n">tv_usec</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">hlim</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="n">cmsg</span> <span class="o">=</span> <span class="n">CMSG_FIRSTHDR</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span> <span class="n">cmsg</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cmsg</span> <span class="o">=</span> <span class="n">CMSG_NXTHDR</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span><span class="n">cmsg</span><span class="p">))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">cmsg</span><span class="o">-&gt;</span><span class="n">cmsg_level</span> <span class="o">==</span> <span class="n">IPPROTO_IPv6</span> <span class="o">&amp;&amp;</span> <span class="n">cmsg</span><span class="o">-&gt;</span><span class="n">cmsg_type</span> <span class="o">==</span> <span class="n">IPV6_HOPLIMIT</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">hlim</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">u_int32_t</span><span class="o">*</span><span class="p">)</span><span class="n">CMSG_DATA</span><span class="p">(</span><span class="n">cmsg</span><span class="p">);</span>
</span><span class='line'>                            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d bytes from %s:seq = %u, hlim =&quot;</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span><span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_seq</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">hlim</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;???&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">hlim</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;, rtt=%.3f ms</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">rtt</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">verbose</span><span class="p">)</span>     <span class="cm">/*若指定-v则显示所有接收ICMP消息*/</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %d bytes from %s: type = %d, code = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span><span class="p">,</span> <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_alrm</span><span class="p">(</span><span class="kt">int</span>   <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&gt;</span><span class="n">fsend</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">alarm</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">uint16_t</span> <span class="nf">in_cksum</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nleft</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint32_t</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="o">*</span><span class="n">w</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">nleft</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">sum</span><span class="o">+=*</span><span class="n">w</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">nleft</span> <span class="o">-=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">nleft</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">answer</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">w</span><span class="p">;</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">+=</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">sum</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="p">(</span><span class="n">sum</span> <span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="o">~</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">answer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">send_v4</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">icmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="p">)</span><span class="n">sendbuf</span><span class="p">;</span>                   <span class="cm">/*构造ICMPV4消息*/</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_type</span> <span class="o">=</span> <span class="n">ICMP_ECHO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_id</span>  <span class="o">=</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_seq</span> <span class="o">=</span> <span class="n">nsent</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_data</span><span class="p">,</span> <span class="mh">0xa5</span><span class="p">,</span> <span class="n">datalen</span><span class="p">);</span>    <span class="cm">/*按照icmp模式来填写*/</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">)</span> <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_data</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">len</span> <span class="o">=</span> <span class="mi">8</span><span class="o">+</span> <span class="n">datalen</span><span class="p">;</span>                                       <span class="cm">/*校验ICMP 节和数据*/</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_cksum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp</span><span class="o">-&gt;</span><span class="n">icmp_cksum</span> <span class="o">=</span> <span class="n">in_cksum</span><span class="p">((</span> <span class="n">u_short</span> <span class="o">*</span><span class="p">)</span><span class="n">icmp</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sendto</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">sendbuf</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>  <span class="cm">/*发送数据报*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">send_v6</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef  IPV6</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">icmp6_hdr</span>  <span class="o">*</span><span class="n">icmp6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">icmp6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp6_hdr</span> <span class="o">*</span><span class="p">)</span><span class="n">sendbuf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_type</span> <span class="o">=</span> <span class="n">ICMP6_ECHO_REQUEST</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_id</span>  <span class="o">=</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">icmp6</span><span class="o">-&gt;</span><span class="n">icmp6_seq</span> <span class="o">=</span> <span class="n">nsent</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">((</span><span class="n">icmp6</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="mh">0xa5</span><span class="p">,</span> <span class="n">datalen</span><span class="p">);</span>
</span><span class='line'>    <span class="n">gettimeofday</span><span class="p">(</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">icmp6</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">len</span> <span class="o">=</span> <span class="mi">8</span><span class="o">+</span> <span class="n">datalen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sendto</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">sendbuf</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&gt;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I/O Multiplexing]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/07/i-slash-o-multiplexing/"/>
    <updated>2013-07-07T22:57:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/07/i-slash-o-multiplexing</id>
    <content type="html"><![CDATA[<blockquote><p><p>进程需要一种预先告知内核的能力，使得内核一旦发现进程指定的一个或多个I/O条件就绪（输入已准备好被读取，或描述符已能承接更多的输出），它就通知进程。这个能力称为I/O复用，是由select和poll这两个函数支持。</p>
<p>I/O复用典型应用在下列的网络场合：</p>
<p>1.当客户处理多个描述符（通常是交互式输入和网络套接字）时，必须使用I/O 复用。</p>
<p>2.如果一个TCP服务器既要处理监听套接字，又要处理已连接套接字，一般就要使用I/O复用。</p>
<p>3.如果一个服务器既要处理TCP，又要处理UDP，一般使用I/O复用。</p>
<p>4.如果服务器要处理多个服务或者多个协议（inetd守护进程），一般使用I/O复用。</p>
<!-- more -->
<p><strong>select函数</strong></p></p></blockquote>

<figure class='code'><figcaption><span>select  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/select.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">select</span><span class="p">(</span><span class="kt">int</span> <span class="n">maxfdp1</span><span class="p">,</span> <span class="n">fd_set</span> <span class="o">*</span><span class="n">readset</span><span class="p">,</span> <span class="n">fd_set</span> <span class="o">*</span><span class="n">writeset</span><span class="p">,</span> <span class="n">fd_set</span> <span class="o">*</span><span class="n">exceptset</span><span class="p">,</span>
</span><span class='line'>          <span class="k">const</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">timeout</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>参数timeout告知内核等待所指定描述符中的任何一个就绪可花多长时间。其timeval结构用于指定这段时间的秒数和微秒数。</p></p></blockquote>

<figure class='code'><figcaption><span>timeval  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">timeval</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">tv_sec</span><span class="p">;</span>  <span class="cm">/*秒*/</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">tv_usec</span><span class="p">;</span> <span class="cm">/*微秒*/</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>这个参数有以下三个可能：1.永远等待下去，仅在有一个描述符准备好I/O时才返回，该参数设为空指针；2.等待一段固定的时间，在有一个描述符准备好I/O时返回，但是不超过由该参数所指定的timeval结构中的指定的秒数和微秒数；3.根本不等待，检查完描述符后立即返回，这称为轮询，为此，该参数必须指定一个timeval结构，而且其中的定时器值（由该结构指定的秒数和微秒数）必须为0。</p></p></blockquote>

<figure class='code'><figcaption><span>TCP回射服务器select版本  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXLINE        256</span>
</span><span class='line'><span class="cp">#define SERV_PORT    8000</span>
</span><span class='line'><span class="cp">#define LISTENQ         5</span>
</span><span class='line'><span class="cp">#define NULL               0</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">maxi</span><span class="p">,</span> <span class="n">maxfd</span><span class="p">,</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">connfd</span><span class="p">,</span> <span class="n">sockfd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nready</span><span class="p">,</span> <span class="n">client</span><span class="p">[</span><span class="n">FD_SETSIZE</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fd_set</span> <span class="n">rset</span><span class="p">,</span> <span class="n">allset</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">clilen</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">cliaddr</span><span class="p">,</span> <span class="n">servaddr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listenfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">SERV_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listen</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">LISTENQ</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">maxfd</span> <span class="o">=</span> <span class="n">listenfd</span><span class="p">;</span>                       <span class="cm">/*初始化*/</span>
</span><span class='line'>    <span class="n">maxi</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">FD_SETSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>    <span class="cm">/*client[] 数组的索引*/</span>
</span><span class='line'>        <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>                                 <span class="cm">/*-1 代表可用入口*/</span>
</span><span class='line'>    <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">allset</span><span class="p">);</span>
</span><span class='line'>    <span class="n">FD_SET</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allset</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">rset</span> <span class="o">=</span> <span class="n">allset</span><span class="p">;</span>                     <span class="cm">/*结构体赋值*/</span>
</span><span class='line'>            <span class="n">nready</span> <span class="o">=</span> <span class="n">select</span><span class="p">(</span><span class="n">maxfd</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">FD_ISSET</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">))</span>    <span class="cm">/*检测新的客户端连接*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">clilen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cliaddr</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">connfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clilen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">FD_SETSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">connfd</span><span class="p">;</span>           <span class="cm">/*保存连接描述符*/</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">FD_SETSIZE</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;too many clients&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">FD_SET</span><span class="p">(</span><span class="n">connfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allset</span><span class="p">);</span>       <span class="cm">/*增加新的描述符到集合*/</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">connfd</span> <span class="o">&gt;</span> <span class="n">maxfd</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">maxfd</span> <span class="o">=</span> <span class="n">connfd</span><span class="p">;</span>              <span class="cm">/*select函数的第一个参数使用*/</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">maxi</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">maxi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>                        <span class="cm">/*client[]数组的最大索引*/</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">nready</span> <span class="o">&lt;=</span><span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>                      <span class="cm">/*没有更多可读的描述符*/</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="n">maxi</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>           <span class="cm">/*检查数据传输*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span> <span class="n">sockfd</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">n</span><span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">MAXLINE</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
</span><span class='line'>                                    <span class="n">FD_CLR</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allset</span><span class="p">);</span>
</span><span class='line'>                                    <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                                <span class="n">write</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">nready</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>   <span class="cm">/*没有更多可读的描述符*/</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>poll函数</strong></p></p></blockquote>

<figure class='code'><figcaption><span>poll  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;poll.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">pollfd</span> <span class="o">*</span><span class="n">fdarray</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nfds</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>第一个参数是指向一个结构数组第一个元素的指针。每个数组元素都是一个pollfd结构，用于指定测试某个给定描述符fd的条件。</p></p></blockquote>

<figure class='code'><figcaption><span>pollfd  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">pollfd</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>       <span class="cm">/*检查的描述符*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">events</span><span class="p">;</span>     <span class="cm">/*对fd测试的条件*/</span>
</span><span class='line'>  <span class="kt">short</span> <span class="n">revents</span><span class="p">;</span>  <span class="cm">/*fd的状态*/</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>要测试的条件由events成员指定，函数在相应的revents成员中返回该描述符的状态。</p>
<p>结构数组中元素的个数由nfds参数指定。timeout值：1.INFTIM，永远等待；2.0，立即返回，不阻塞进程；3.>0, 等待指定的毫秒数。</p></p></blockquote>

<figure class='code'><figcaption><span>TCP回射服务器poll版本  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;poll.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stropts.h&gt; </span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXLINE        256</span>
</span><span class='line'><span class="cp">#define SERV_PORT    8000</span>
</span><span class='line'><span class="cp">#define LISTENQ         5</span>
</span><span class='line'><span class="cp">#define NULL               0</span>
</span><span class='line'><span class="cp">#define INFTIM           -1</span>
</span><span class='line'><span class="cp">#define OPEN_MAX     256</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">i</span><span class="p">,</span> <span class="n">maxi</span><span class="p">,</span> <span class="n">listenfd</span><span class="p">,</span> <span class="n">connfd</span><span class="p">,</span> <span class="n">sockfd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nready</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span>  <span class="n">buf</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">clilen</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pollfd</span> <span class="n">client</span><span class="p">[</span><span class="n">OPEN_MAX</span><span class="p">];</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">cliaddr</span><span class="p">,</span> <span class="n">servaddr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listenfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">SERV_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listen</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">LISTENQ</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="n">listenfd</span><span class="p">;</span>
</span><span class='line'>    <span class="n">client</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">events</span><span class="o">=</span><span class="n">POLLRDNORM</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">OPEN_MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>                  <span class="cm">/*-1代表可用入口*/</span>
</span><span class='line'>    <span class="n">maxi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">nready</span> <span class="o">=</span> <span class="n">poll</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">maxi</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">INFTIM</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">client</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">revents</span> <span class="o">&amp;</span> <span class="n">POLLRDNORM</span><span class="p">)</span>      <span class="cm">/*检测新连接*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">clilen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cliaddr</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">connfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clilen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">OPEN_MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                          <span class="k">if</span><span class="p">(</span><span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">{</span>
</span><span class='line'>                                  <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="n">connfd</span><span class="p">;</span>     <span class="cm">/*保存描述符*/</span>
</span><span class='line'>                                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                              <span class="p">}</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">OPEN_MAX</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;too many clients&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">events</span> <span class="o">=</span> <span class="n">POLLRDNORM</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">maxi</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">maxi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>     <span class="cm">/*client[]数组最大的索引*/</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">nready</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>   <span class="cm">/*没有更多可读的描述符*/</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">maxi</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">sockfd</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">revents</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">POLLRDNORM</span> <span class="o">|</span> <span class="n">POLLERR</span><span class="p">))</span>  <span class="cm">/*检查客户端的数据传输*/</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">n</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">MAXLINE</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="k">if</span><span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">ECONNRESET</span><span class="p">)</span>     <span class="cm">/*连接被客户端重置*/</span>
</span><span class='line'>                                        <span class="p">{</span>
</span><span class='line'>                                            <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
</span><span class='line'>                                            <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                        <span class="p">}</span>
</span><span class='line'>                                    <span class="k">else</span>
</span><span class='line'>                                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;read error&quot;</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>        <span class="cm">/*连接被客户端关闭*/</span>
</span><span class='line'>                                <span class="p">{</span>
</span><span class='line'>                                    <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
</span><span class='line'>                                    <span class="n">client</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="k">else</span>
</span><span class='line'>                                <span class="n">write</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                            <span class="k">if</span><span class="p">(</span> <span class="o">--</span><span class="n">nready</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="k">break</span><span class="p">;</span>               <span class="cm">/*没有更多可读的描述符*/</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p><strong>使用select函数的TCP和UDP回射服务器程序</strong></p></p></blockquote>

<figure class='code'><figcaption><span>select多进程及回收  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXLINE        256</span>
</span><span class='line'><span class="cp">#define SERV_PORT    8000</span>
</span><span class='line'><span class="cp">#define LISTENQ         5</span>
</span><span class='line'><span class="cp">#define NULL               0</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define max(a, b)     a&gt;b? a:b</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_chld</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span>    <span class="n">stat</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">waitpid</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stat</span><span class="p">,</span> <span class="n">WNOHANG</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;child %d terminated</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">str_echo</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>     <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">n</span><span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">MAXLINE</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>              <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">listenfd</span><span class="p">,</span> <span class="n">connfd</span><span class="p">,</span> <span class="n">udpfd</span><span class="p">,</span> <span class="n">nready</span><span class="p">,</span> <span class="n">maxfdp1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">mesg</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pid_t</span> <span class="n">childpid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">fd_set</span> <span class="n">rset</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="n">on</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">cliaddr</span><span class="p">,</span> <span class="n">servaddr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listenfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>   <span class="cm">/*创建监听TCP 套接字*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">SERV_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setsockopt</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">on</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">on</span><span class="p">));</span>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">listen</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span><span class="n">LISTENQ</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">udpfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_DGRAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>     <span class="cm">/*创建监听UDP 套接字*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">SERV_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">bind</span><span class="p">(</span><span class="n">udpfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGCHLD</span><span class="p">,</span> <span class="n">sig_chld</span><span class="p">);</span>                           <span class="cm">/*必须调用waitpid(),而不是wait()*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rset</span><span class="p">);</span>
</span><span class='line'>    <span class="n">maxfdp1</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="n">udpfd</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">FD_SET</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">);</span>
</span><span class='line'>            <span class="n">FD_SET</span><span class="p">(</span><span class="n">udpfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">nready</span> <span class="o">=</span> <span class="n">select</span><span class="p">(</span><span class="n">maxfdp1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">)</span><span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>                              <span class="cm">/*返回for循环*/</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;select error&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">))</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cliaddr</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">connfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span> <span class="n">childpid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">==</span><span class="mi">0</span><span class="p">)</span>        <span class="cm">/*子进程*/</span>
</span><span class='line'>                        <span class="p">{</span>
</span><span class='line'>                            <span class="n">close</span><span class="p">(</span><span class="n">listenfd</span><span class="p">);</span>                    <span class="cm">/*关闭TCP监听套接字*/</span>
</span><span class='line'>                            <span class="n">str_echo</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>                <span class="cm">/*对请求进行处理*/</span>
</span><span class='line'>                            <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="n">close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">udpfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rset</span><span class="p">))</span>                  <span class="cm">/*对udp的处理*/</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cliaddr</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">n</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">udpfd</span><span class="p">,</span> <span class="n">mesg</span><span class="p">,</span> <span class="n">MAXLINE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">sendto</span><span class="p">(</span><span class="n">udpfd</span><span class="p">,</span><span class="n">mesg</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>Unix提供了五种I/O模型：1.阻塞式I/O模型 2.非阻塞式I/O模型 <strong>3.I/O复用模型</strong> 4.信号驱动式I/O模型 5.异步I/O模型 </p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Movies]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/05/movies/"/>
    <updated>2013-07-05T09:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/05/movies</id>
    <content type="html"><![CDATA[<blockquote><p><p>大学看的电影比较多，不过能在脑海中留下印记的只有那些能够触动心灵的经典，所以对于其它一般的电影，又何必浪费时间去看？因为其一文不值、一无是处。</p>
<p>《毕业生》展示了一个大学生毕业后的迷惘，在受到性的诱惑下，居然和你一个有夫之妇搞上关系。而后来这个毕业生追求其女儿，但东窗事发，此家庭坚决拒绝他。但他坚定不移，最终有情人终成眷属。背景音乐是《斯卡布罗集市》，he once was a true love of mine.</p>
<!-- more -->
<p>《教父I、II、II》说的是意大利黑帮的崛起，为了保护家族的利益，不仅要有一个运筹帷幄、忍辱负重的领导，而且整个家族要众志成城,才不至于淹没在弱肉强食的社会。</p>
<p>《美国往事》这与美国梦扯上点关系。几个在纽约街头的小混混，以noodle为头，结识了一个非常厉害的小混混，他带大家挣大钱。可惜，最后大家都被他玩弄于股掌之间，其之后金盘洗手，进入美国政界，成为美国商务部长。曾经打家劫舍，奸淫掳掠的小混混，脱身一变成为一个“字字珠玑”、彬彬有礼的政界大腕。而noodle则是潜逃了二十年，才知道事实的真相，曾经noodle靠暴力才得到其女朋友的肉体，而之后，二十年，其女朋友甘心做欺骗其二十年的商务部长的情妇。这个厉害的小混混，通过自己的方法、努力，不但得到金钱、地位、还轻易得到别人女友的心，这就是导演所展示的美国梦。</p>
<p>《辛德勒的名单》说的是一个工厂老板为了救更多的犹太人，不惜与法西斯竭力周旋，展开斗智斗勇的历程。</p>
<p>《乱世佳人》其实自己一直追求的人不是自己所要的，反而他人追求自己，此人需要慎重考虑，不要总是拒之千里之外，他会静悄悄，毫不留情地走掉。</p>
<p>《肖申克的救赎》主人公被冤枉，且在监狱受尽折磨，但却心存希望，自己有逃出去的一日。果然老天不负有心人，其成功逃出魔鬼的掌心。</p>
<p>《洛奇》主人公告诉我们心里还有些东西还没有释放出来，要将其释放，心灵才会觉得舒服。生活并不只是有快乐，而且有接踵而来的痛苦，在痛苦的时候，不要抱怨现实、他人，而是继续前行。</p>
<p>《美丽心灵》他是聪明绝顶的人，但他也逃脱不了所谓的压力，他拥有美好的爱情，他有自己的学术地位，但他却有了幻想症，在妻子的不离不弃的帮助下，其终于站起来。</p>
<p>《百万宝贝》主人公冒着生命危险去改变自己的命运，同时也改善了家庭的条件，可惜当出现挫折时，家人不理解、抛弃她，她只有在医院绝望地结束自己。</p>
<p>《当幸福来敲门》主人公是一个坚持自己信念，穷且益坚的人，其最终实现了自己的理想。当别人说你不可以的时候，记得去保护自己的梦想和去实现它。</p>
<p>《心灵捕手》通过解读自己心灵，坦诚地说出来，来做出正确的抉择。</p>
<p>《风雨哈佛路》女主人公生于不幸的家庭，妈妈戒不掉毒瘾，最终一命呜呼。但她却是生于淤泥而不染，继续自己的风雨路。</p>
<p>《国王的演讲》一个口吃的国王，在二战英国受难时，挺身而出，最终成为一个吐字清晰的国王。</p>
<p>《霸王别姬》人如戏，戏如生。</p>
<p>&#8230;这么多的电影，就总结了这么多，实在太小太小，太不可思议。真是光阴似箭，岁月如梭！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TV Series]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/04/tv-series/"/>
    <updated>2013-07-04T23:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/04/tv-series</id>
    <content type="html"><![CDATA[<blockquote><p><p>大学里面的最后一年半的时间是在看电视剧过来的。为什么浪费“一寸光阴一寸金”的时间来看电视剧？是遭受了挫折后的堕落，是心智的幼稚，还是思路的混乱和目标的迷失？人生不如意之事十有八九。在遇到挫折时，我显得脆弱不堪，悠游寡断，自暴自弃。就大学那么的一个挫折，就把自己的人生搞得乱七八糟，不堪回首，如同烂泥。那么，以后面对大风大浪，岂不是毫无抵抗地沉入大海？人要自个儿成全自个儿。</p>
<!-- more -->
<p>稍微总结一下，一年半所看的电视剧和电影。因为这是一种经历，不论是好还是坏，都需要思考和总结。杜绝人生如流水账那样，走马观花，得过且过。</p>
<p>《越狱》说的是主人公为了救自己无辜入狱的哥哥，亲自犯罪入监狱救出他。他们被追捕，之后它们逃到巴拿马;最后，返回美国，帮助寻找所谓的&#8221;黑名单&#8221;，其实高科技能源技术。剧中，主人公利用自己专业————土木工程的知识来进行越狱，并且之前早构思好一个相对完美的越狱计划。《越狱》体现了主人公的兄弟情，爱情和友情，并反应了社会和政治的勾心斗角。</p>
<p>《迷失》我并没有完整看完，但我觉得主人公是一个名副其实，有魄力的医生。如同《越狱》中的主人公一样，都是自己专业中的佼佼者。每一个人都有自己的迷失的时候，在这个孤岛上逐渐都找回了自己，《迷失》通过时间的穿越来体现。</p>
<p>《三国》是三国演义的电视剧版本，曹丕是一个奸诈狡猾之人，曹操也知道其为了帝位，不惜杀害自己的弟弟，但曹操也意识到为了保住自己打下来的江山，非大奸大诈，心机重重的人不可。刘备是一个深藏不露，哀乐不显于脸色和有情有义的人，其三顾茅庐，精神所至，金石为开。刘备是从祧园三结义兴起，也由这个终结，可谓成也萧何败也萧何。</p>
<p>《寻秦记》主人公通过穿越时空来到战国时期，主要任务是帮助嬴政顺利登基。主人公是一个有情有义，乐于助人的人。</p>
<p>《大唐双龙传》的寇仲是一个聪明伶俐、雄心勃勃的人，喜欢的李秀玲是一个有勇有谋，相貌出众的人。徐子陵是一个重情重义、敦厚温顺的人，喜欢的师妃暄是一个出尘脱俗、与世无争的人。</p>
<p>《射雕英雄传》的郭靖是一个敦厚老实，行侠仗义的人，获得聪明绝顶、口齿伶俐的黄蓉的青睐和芳心。</p>
<p>《神雕侠侣》的杨过是一个藐视封建礼教，无拘无束的人，与沉鱼落雁、闭花羞月的小龙女的师徒恋，虽然遭到世人（包括郭靖和黄蓉）的遗弃和唾骂，但杨过依然摒弃世人的俗见，我行我素，得知小龙女已被玷污，杨过依然不理睬狗屁不通的礼教，从一而终。不过，电视剧只是一种理想的状态，假如杨过不是一个武功超群，技压群雄的人，哪能和小龙女长相厮守呢？不过，杨过和小龙女也可以找一个世外桃源的地方，演绎他们的故事。</p>
<p>《倚天屠龙记》的张无忌是一个明辨是非，纯真朴素的人，与诡计多端、心机重重但心地善良的赵敏产生微妙的感情。周子若唯师命是从，最终作茧自缚，断送前程。</p>
<p>《笑傲江湖》的令狐冲是一个无拘无束，放荡不羁的人，对小师妹情真意切、疼爱有加，不过有情人难成眷属。任盈盈对在危难时期的令狐冲有情有义，当他扭转乾坤时，对任盈盈也是不离不弃，忠贞不二。</p>
<p>《天龙八部》的段誉是一个慈悲为怀、普渡众生的人，对王姑娘一见钟情，不过当时王姑娘已心有所属。但段誉对王姑娘一直都是默默奉献，尾随左右，最终得到其芳心。反过来看，就是姑苏慕容不切实际、不自量力、如痴如梦地进行其复燕大计，这就是男人以事业为重的行动，同时也体现其对王姑娘不够上心。乔峰是一个光明磊落，嫉恶如仇的人，其父考验他在绝处逢生的能力。虚竹是一个佛学子弟，其武艺、爱情、地位&#8221;无心插柳柳成荫“。</p>
<p>《鹿鼎记》的韦小宝是一个圆滑、有情有义和幸运的人。在三座大山————清朝皇帝、天地会、神龙教的压力下中艰难生存，稍有不慎，就会立即丧命。不过，韦爵爷不但走运，还艳福不浅，有七个大小老婆相伴。</p>
<p>《隋唐英雄传》的李世民是一个胸襟广阔，善于纳谏和唯才善用的人。他思路开阔，敢于创新，实现科举制度，三省六部制，允许外籍人士到长安进行生意的买卖。</p>
<p>《金枝欲孽》说的是明争暗斗、尔虞我诈、勾心斗角的后宫的境况。孙白杨是一个不拘小节、锄强扶弱、热心肠的御医。其获得后宫中三大贵人的芳心，而就是这红墙之内，又怎会容许有爱情的存在？</p>
<p>《金枝欲孽II》说的是后宫中两姐妹，一个当朝举足轻重的如妃，一个是前朝斤斤计较的贵妃，两姐妹在宫中的矛盾不断激发，一个忍辱负重，另一个则咄咄逼人。两人在宫中玩弄手段，甚至不惜利用爱情为筹码来达到自己天下太平的目的。</p>
<p>《巾帼枭雄》说的是女主人公是一个济世安民，深谋远虑的人。男主人公柴九是一个忠肝义胆，顺水推舟的人，与女主人公同舟共济，共渡难关。</p>
<p>《巾帼枭雄之义海豪情》的九姑娘是一个痛恨毒品、运筹帷幄的人，男主人公是一个义气云天、肝胆相照的警察。两人在患难中，结下了深厚的友谊。</p>
<p>《溏心风暴》展示了一个长期被压抑的护士，没有妻子的名分，就连妾的身份也没有。在旁人的教唆下，名正言顺地当上妻子，对其老公的家产虎视眈眈。当老公离世，咄咄逼人、毫不相让地瓜分财产，并和其丈夫子女法庭上刀锋相对、拼个你死我活。同时，也反映了此家庭和谐温馨的一面。</p>
<p>《溏心风暴之家好月圆》展示了曾经是一对相濡以沫的夫妇，在受到外来的侵袭时（第三者的出现），妻子忍辱负重，且同意和老公离婚，两方都分配到三个孩子的抚养权。之后，两方不断出现矛盾，简直是多事之秋。两方经历了这些的风风雨雨，这两人又分而复合。可惜，第三者机关算尽，到头来，除了钱，依然是竹篮子打水一场空。</p>
<p>《怒火街头》二部展示了男主人公是一名威震法律界的大律师，当年为了挣大钱，埋没良心，丧尽天良。之后，他迷途知返，默默地在一个小区帮助当地居民伸张正义，宣扬法律知识。而女主人公是一个初出茅庐的律师，当年也以男主人公为偶像，可惜其隐身埋名了七年。当两人萍水相逢时，两人意见大相径庭。男的久经沙场、历经风险，而女的则是胸怀大志、要闯出一块天地。男的不忍心看着女的重蹈自己之前的错误，一直对其悉心指导、不离不弃，两人日久生情，成为一对情侣，而女的也乐意到小区去服务。</p>
<p>《名媛望族》展示的是香港从清朝的一夫多妻制到从法律上规定只允许一夫一妻制的历程。剧中，通过一个赫赫有名的大律师来展开，其有三个老婆。之后，遇到一个聪明伶俐、漂亮迷人的女子，娶其为四老婆，并答应不再娶其它老婆。可惜，后面的矛盾的激发就有其娶第五个老婆开始陆续爆发。</p>
<p>《大唐女巡按》展示的是女主人公凭借自己的细心观察、逻辑推理，屡破奇案，得到武则天的赏识和赞许。她查案时险象横生，但其刚正不阿、一视同仁，且巧妙地击破各个老奸巨猾的敌人。真是巾帼不让须眉。</p>
<p>《读心神探》是说在审嫌疑人的时候，通过观察通过的行为举止、表情等来判断其心理行为。</p>
<p>《飞虎队》一群训练有素的特警的生活和其歹徒斗智斗勇的场面。</p>
<p>《天之商娇》说的是男主人公已经是一个退隐商界的&#8221;商业杀手“，女主人公是一个大大咧咧，注重家庭感情的人，两人在误解的时候认识，之后男教女如何运用商业知识去挣钱，之后，两人心生情愫，最终步入婚姻的殿堂。</p>
<p>《蒲松龄》说的是蒲松龄的个人经历。其实，他一把年纪还去科举考试，这和其经历息息相关。</p>
<p>《护花危情》说的是一个帅气十足的警察去保护一个脆弱、敏感的女孩子，在这执行任务的过程中，女的对男的产生爱慕之心。而女的爸爸不满于一个警察喜欢其女儿，其实女的爸爸的发家史是靠绑架且撕票开始的，剧情就由此展开。</p>
<p>《老友狗狗》狗是有灵性的动物，对警察的帮助很大，训练好一条警犬，相当于多了一个能识别气味，找出炸弹，追踪敌人的好警察。</p>
<p>《搜神记》说的是一个瘦小力气小的人因为孝顺受到神仙的眷顾，给予他法力，可惜其有了法力后，就失去了原来的本性，反而去欺负别人。
<p>《咏春传奇》说的是一个女子受到追杀后，到了人人习武的女子村学习武功，同时自创出咏春的招式。</p>
<p>《花花世界花大姐》说的是一个智商偏低的人，因为思想单纯，乐于助人，虽然经历挫折，惊险，最终化险为夷，得到阔少爷的眷顾。</p>
<p>《四大名捕》说的是合四个能干，各有所长的人的能力去侦破各种奇案的故事。</p>
<p>《公主嫁到》说的是公主下嫁金家，其刁蛮任性，不讲情理，但与金家经历了一些事情后，逐渐改变自己，对金家的感情也逐渐深厚。</p>
<p>《法证先锋》三部都是说通过犯罪的人在犯案现场留下的蛛丝马迹来查案，通过高科技的仪器，对现场留下可疑物件进行检验，这对案情的进展有好大的帮助。</p>
<p>《笑傲江湖》大陆版本，东方不败是一个漂亮迷人，不过心肠未免有点毒辣的年轻女子，对令狐冲也可谓是仁至义尽。</p>
<p>《施公奇案》说的是一个县官对案情反复推敲，翻来覆去，但最终屡破奇案。</p>
<p>《潜行狙击》说的是一个小混混做警察的卧底，但其又不甘心做警探卧底，其利用与警探的关系，自己成为黑社会的大佬，与之前的警探对着干。</p>
<p>《法网狙击》说的是两个律师合作无间地帮助不同的群体打下不小漂亮的官司。</p>
<p>《古灵精探》说的是一个警探凭借古灵奇怪的感觉来推断出案情和事实的真相。</p>
<p>《Yummy Yummy》说的是团队比赛，领队和队员，队员与队员间的故事。当然是有激烈的竞争，也有温馨感人的场面。</p>
<p>《白发魔女传》某女主人公练功走火入魔，变得满头白发，而和其有深厚交情的武当弟子，在得到女主人公师父的功力后，义无反顾地帮助白发魔女变成青春焕发，满头黑发的少女，而武当弟子却瞬间变成满头白发的青年。</p>
<p>《轩辕剑之天之痕》讲述陈国后裔陈靖仇从一个不思长进的人，最后和宇文拓成为拯救大地的使者。</p>
<p>&#8230; 还有这么多的电视剧等着去总结，花费了这么多的时间，才总结出那么一点。可谓是捡了芝麻丢了西瓜，得不偿失。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Movie]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/04/3d-movie/"/>
    <updated>2013-07-04T23:01:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/04/3d-movie</id>
    <content type="html"><![CDATA[<blockquote><p><p>所谓孤独终老，就是自己不敢向前迈出一步。今天，可以说是得偿所愿，看了一部3D电影《钢铁之躯》。</p>
<!-- more -->
<p>当舍友说去玩，去看一部3D电影时，我就认为一部电影，直接在我们的电脑上看，其实也很爽，何必要跑到电影院去看？不过，后来我也屈服了，因为找不到什么好地方可去，就随便看电影。</p>
<p>3D电影从04年就开始有了，到现在已经有差不多十年，技术已经比较成熟了。第一次看到3D的效果，outdated的感觉油然而生，这么好的东西到今日才接触。自己对事情都是采取逃避的方式，从来都是被迫接受，就如这次，不是由自己主动提出。做事情也是到最后一天，才去回想这样事情如何是好，以至每次做事情都比别人慢一步，并且效率低下。</p>
<p>现在就谈谈电影的内容了，其实这部电影还算好，但也有不少的瑕疵。描述一个外星人降临到地球，并且和地球人并肩作战，击退强大的敌人。但看的时候，应该懂得去梳理思路，不要糊里糊涂的。难道我的脑子不是喜欢寻根问底的吗？</p>
<p>在商业中心时，对其它事物也不懂得细心观察，譬如三星，诺基亚产品，它们的配置，性能，用户的友好程度，或者如北京同仁堂，从中就可以学习一些中医的知识。知识，创新是从用心体会生活开始的。</p>
<p>茫茫沧海中没有目的，那是就一只不归船，永远停留在沧海中，没有能靠到岸的一日。</p>
<p>对于女朋友，时刻准备着，把自己的各方面变得更加地好，包括情趣、谈吐、专业等。不能自暴自弃，不能沉迷于某样无聊的事情之中，浪费自己的时间，让自己周围的人都看不起自己，甚至连自己的好朋友都是那样。那么，这样的话，我就会一步步地封闭自己，进入一个恶性循环，那么我就更加走不出来，死得静悄悄的。</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
