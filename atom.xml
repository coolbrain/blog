<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-12-02T00:05:26+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[你知道了你 你就不是你]]></title>
    <link href="http://coolbrain.github.com/blog/2013/12/01/intern-summary/"/>
    <updated>2013-12-01T22:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/12/01/intern-summary</id>
    <content type="html"><![CDATA[<p>实习期间我被分配完成的项目是openACS开发，可是openACS是Java开发，且是J2EE的范畴。我之前以为自己来这个公司是做C语言，网络方面的开发的，但却分配到做Java的，当时就不想在上面花时间，因此开始做的两个星期都是敷衍了事，再继续了两个星期，却发现Java易用，有丰富的类库API，J2EE框架清晰。与之前对Java的印象截然不同，于是才开始不断学习Java，继续openACS的开发。显然，在刚开始之前，我没有转变自己的观念，其实编程，在于的不是使用哪一种语言，而是在于从整体上把握编程思想。不论对于何种语言，都适用。在时间安排上，只要及早地改变心态，可以提前地完成任务，做更多的工作。</p>


<blockquote><p><!-- more --></p></blockquote>

<p>对于答辩，有几点需要改进：</p>


<p>1.对某些概念理解不清，画图不够严谨，没有好好总结之前所学的内容和检查PPT的细节问题。</p>


<p>2.答辩时，态度不够严肃，语速慢。之前没有进行实战演练，观察有什么问题。</p>


<p>3.回答问题时，没有明白对方问题的用意而急于回答。学会倾听，把握好问题，才进行相应的回答。</p>


<p>对于工作，有几点需要改进：</p>


<p>1.对于每天的工作，有一定的安排和目标性，在每天结束后，稍微总结下今天所做的工作。</p>


<p>2.平时休息要好，不能熬夜，影响到正常工作的效率和质量。</p>


<p>3.多点和导师和其它同事交流，从而用更好地方式解决问题。</p>


<p>对于现在openACS开发的情况，基本上继续完成接下来的一些需求的开发，整理好文档和进行相关的测试。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[承上启下 向下兼容]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/16/follow-version/"/>
    <updated>2013-10-16T23:10:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/16/follow-version</id>
    <content type="html"><![CDATA[<blockquote><p><p>window XP默认安装的.NET的2.0版本，window 7默认安装的是.NET4.0版本，而更新的系统就可能安装更新的.NET版本。但好不幸，假如你还在使用XP系统的话，但又想使用最新开发的程序，那么你就安装.NET的比较新的版本了，因为XP .NET2.0版本已经不能支持这些最新开发的程序。但在较新的系统跑较旧的程序，可能就会有些问题，因为有些API会被抛弃。</p>
<!-- more -->
<p>上面是对于在window的.NET平台上开发的程序来说。而在Java平台开发的，比较新的程序要需要运行在较新的JDK上，如JDK 7；较旧的程序也要求运行在较旧的JDK上，如JDK 5；用JDK 5开发的程序未必在JDK 7平台是那个跑，如上面提到的有些API已经被抛弃，可能还需要安装插件。因此下载程序的时候，看清楚所运行的环境，避免不必要的麻烦。</p>
<p>而对于python这样的脚本语言，道理依然是一样，之前写出来的版本只对python2.7有效，对于python3.2就可能无效，除非进行接口的移植和升级。现在的web开发是考虑兼容性最多的，不同的浏览器有不同的实现和不同标准，程序员需要针对每个浏览器写出不同支持性的代码。人人都希望一份通用的代码就能到处跑。另一个方面是通信领域，同样的通信协议，不同的厂商对协议的理解和实现都不一样，导致不同厂商生产的设备直接的通信出现问题。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[依山伴水 绿水长流]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/16/view-of-shenzhen/"/>
    <updated>2013-10-16T00:06:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/16/view-of-shenzhen</id>
    <content type="html"><![CDATA[<blockquote><p><p>外人眼中的深圳是一夜之间崛起的城市。那已经是History了，我想说的Now。生活在深圳，究竟会是怎样？</p>
<!-- more -->
<p><strong>公共设施</strong></p>
<p>按照广州生活的经验来说，广州没什么是触动心灵的，但也不是一无所长，广州在地铁指引方面比深圳做得好，但广州地铁比深圳拥挤。深圳是被称为“图书馆之城”，每个区都有几个图书馆，且有些图书馆设备、环境都是一流，只要有身份证，无论什么人，都可以办理借书证，且全城图书通借通还。深圳的公园搞得特别不错，周六日深圳人都会一家大小到公园玩，整个环境特别和谐。同样深圳的医疗也是相当不错，服务质量和服务态度比广州更上一层楼。</p>
<p><strong>旅游景点</strong></p>
<p>世界之窗（window of world)和锦绣中华(splendid of China)是深圳两大特色景点。</p>
<p><strong>人的素质</strong></p>
<p>深圳的人比较友好，讲文明，基本上的人都是从外面来的，而之后成为深圳人。杂居文化。</p>
<p><strong>发展机会</strong></p>
<p>政策相对好，改革开放的前沿阵地。名企云集之地。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[除了我的无知，我什么都不知道]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/15/live-by-yourself/"/>
    <updated>2013-10-15T22:22:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/15/live-by-yourself</id>
    <content type="html"><![CDATA[<blockquote><p><p>所谓活在这个世界上，许多的烦恼，快乐，平静，温馨，幸福都是由自己的看法所决定的，影响自己不是事情的本事，而是看待事情的方式。有许多次的时候都是“当局者迷旁观者清”的情况，为了避免被一些琐事所困，列出一些常见问题的处理：</p>
<!-- more -->
<p>1.如何做到学有所获？不是糊里糊涂,没有得过且过的感觉？</p>
<p><strong>使用思维导图，层次级描述</strong></p>
<p>2.如何做到自我管理、自我满足？</p>
<p><strong>不蹉跎岁月，把握每分每秒，做一些有意义的事情</strong></p>
<p>3.如何犯了错误时，如何做到不慌慌张张、自怨自艾，反而是淡淡定定地解决问题？</p>
<p><strong>对事情的发生深入分析，做到心中有数</strong></p>
<p>4.如何保证自己的身体健康?</p>
<p><strong>关键是合理的饮食，次之是适当的放松（旅游、打球、看书），但强烈不建议听歌、看电影、看电视剧</strong></p>
<p>5.如何丢弃心理压力的包袱？</p>
<p><strong>看事情不能只从一个角度去看，要多角度分析。不然在一方面吃亏，就焦虑至死</strong></p>
<p>6.平时做人的原则是什么?</p>
<P><strong>论语十则中的：“与朋友交而不信乎？” “己所不欲勿施于人”</strong></p>
<p>7.平时学习的原则是什么？</p>
<p><strong>”温故而知新“；“学而不思则罔思而不学则殆”</strong></p>
<p>8.平时如何去做人？</p>
<p><strong>合理表达请求；婉转表达不满或拒绝；换位思考；三思而后讲</strong></p>
<p>9.人存在的基础是什么？</p>
<p><strong>身体;思想;价值观;世界观</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[青衫磊落险峰行]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/14/fairy-story/"/>
    <updated>2013-10-14T23:10:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/14/fairy-story</id>
    <content type="html"><![CDATA[<blockquote><p><p>之前两日去图书馆准备充电，恰好桌面有一本《天龙八部》，于是随便翻翻，手不释卷就到图书馆关门了。自己背包里的书深藏不露，可惜没有见到天日,还没有大展拳脚，就已经夭折了。</p>
<!-- more -->
<p>既然看了，那就写写关于《天龙八部》的故事吧。</p>
<p>乔峰是个盖世英雄，只可惜被揭为契丹人，两国水火不容，群雄聚而攻之。种种的误解产生都由其父处处布局，让乔峰如老鼠过街人人喊打，考验其绝处逢生的能力。乔峰与阿朱&#8211;这个小丫头互生情愫，阿朱对乔峰的为人和英雄气概极为倾慕；而为身世所困，百思不得其解的乔峰，人人得而诛之的乔峰，心灵无尽空虚的乔峰，在这时，得到阿朱死心塌地的关心和约其到漠北放羊，长相厮守，远离中原的纷争和骚扰。</p>
<p>段誉，人人都说其是书呆子，一心一意地钻研佛学，有普渡众生的理想。机缘巧合，与神仙姐姐塑像偶遇，对其简直是痴迷，向其叩了一千个响头。在曼陀山庄，见到现实之中的神仙&#8211;美丽与智慧的化身&#8211;王语嫣，所谓“窈窕淑女君子好逑”，可惜她心有所属，但对于段誉来说，虽然常被人说：“癞蛤蟆想吃天鹅肉”，但其很珍惜眼前与王语嫣相处的时间，常常寻找机会跟随左右。不是为了博取红颜一笑，而总是舍身相救。</p>
<p>虚竹，一心向佛，心地善良，似笨头笨脑，也似大智若愚，也如郑板桥所说的难得糊涂，无人能解的棋局，其误打误撞创出一片天地，扭转乾坤。小事情糊涂，大事情明白。</p>
<p>木婉清，一个从没见过世面的姑娘，认为吃人肉也是理所当然的，无任何伦理，道德的观念。不过，段誉却能对这个姑娘尊重有加。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[鞭辟入里	明辨事理]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/10/fact-opinion/"/>
    <updated>2013-10-10T22:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/10/fact-opinion</id>
    <content type="html"><![CDATA[<blockquote><p><p>when I read the passage, I always can&#8217;t consciously distinguish the fact and opinion. Sometimes I think the author&#8217;s personal opinion as the fact.if having chance to talk with other&#8217;s, I boast about their opionion though I don&#8217;t know which is original, objective or personal view.The most fearest thing is that I put them into practice and consequently find that they are wrong and liable and I have already wasted a lot of time and done harm to myself.</p>
<!-- more -->
<p>For example,&#8221;no man ever look at the world with pristine eyes. He sees it edited by a definite set of customs and institutions and ways of thinking.&#8221; It sounds reasonable, and may be objective.To persuade reader, the author consequently list fact and eminent man&#8217;s word to support his opinion. Our teacher taught us in junior school.</p>
<p>&#8220;Boardly speaking, human being may be divided into three classes:those who are toiled to death, those who are worried to death, and those who are bored to death.&#8221;The author acquires this opinion according to his observation and reflection. Whatever, he spares no effort to supporting and describing his opinion.&#8221;The seeds must be carefully chosen; they must fall on good ground;they must be sedulouly tended, if the vivifying fruits are to be at hand when needed.&#8221; he uses metaphor describing the process of cultivating hobbies to make reader be aware of the importance of it.</p>
<p>&#8220;The undulating waves of the open sea are generated by three natural causes:wind, earth movements or tremors, and the gravitational pull of the moon and the sun.&#8221;This is fact based on the result of current research which may be overthrowed in the future.It&#8217;s natural phenomenon. &#8220;Appreciaton of sculpture depends upon the ability to respond to form in three dimensions.&#8221; It seems opinion but it&#8217;s fact.</p>
<p>&#8220;This is a sceptical age, but although our faith in many of the things in which our forefathers fervently believed has weakened, our confidence in the curative properties of the bootle of medicine remains the same as theirs&#8221;.Why does the author have this opinion? &#8220;This modern faith in medicines is proved by the fact that the annual drug bill of the Health Services is mounting to astronomical figures and shows no signs at present of ceasing to rise.&#8221; he gets it based on data which we can check on the internet. If the author want to cheat, he may forge some data or fact to support his opinion. Maybe we carelessly trust and suffer a lot.</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穿梭于都市 游走于海滨 休憩于公园]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/05/swim-park-drink/"/>
    <updated>2013-10-05T21:26:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/05/swim-park-drink</id>
    <content type="html"><![CDATA[<blockquote><p><p>国庆第二天目标地点是深圳大梅沙海滨公园，想不到这个海滨公园吸引了五万的游客，在高速公路塞车了两个小时，可把我憋腻了。幸亏我在车上找到另外一种方式来消遣——背单词，兴致盎然，让自己醉于自己的世界，完全感觉不到自己在拥挤不堪的公共汽车上。这种方式打发这样的时光还是非常有效，所以说，影响自己不是事情本身，而是看待事情的方式。</p>
<!-- more -->
<p>经过两个小时，终于到达了目的地——大梅沙，两面环山，前面是海，看到浪一浪接一浪，大家在海水里玩得很开心。忍不住换上泳裤，冲入水里，当海水碰到嘴唇里，才发现海水挺咸的，不像以前在河里玩水，应该有个救生圈，躺在上面，任意其飘荡，享受阳光沐浴。总体来说，感觉还可以，但感觉地方有点不太干净，可能由于是免费的原因，下次再次来海滨玩的话，应该去小梅沙。晚上回来再在租屋的地方K歌，三个男人一台戏。</p>
<p>国庆第三天是深圳的红树林，闻说里面可以看到比较多的鸟，可谓百鸟争鸣。当我们去到的时候，感觉没什么特别，就是带有海湾的公园。不过，在走之前，买了一个椰子，第一次享受喝椰子汁的快感。接着去了市区的莲花山，从莲花山上鸟瞰深圳的中心，高楼林立，器宇轩昂。之后就在市区中心徘徊，市民中心，深圳书城，少年宫&#8230;</p>
<p>国庆的第四天送别了故人，就把精力集中于解决自身的问题，首当其冲的就是耳鸣。我说多少个叫自己重视这些问题也无济于事，最紧要自己心理明白，这问题不能忽视，要用心地呵护。发现在医院看书的效果挺好，在这里才会真正感受病是如此地真实，假如再不珍惜，再继续这样下去，只会抱恨终生。所以当自己不想看书的时候，可以到医院去看，相信是一个不错的选择，:)</p>
<p>晚上又和宿友讨论了下现实和理想之间的差距。主要的观点是：”电影，电视剧，歌曲，都很假，不似是真的“，因为好多些时候这些都是理想状态，在现实可能到处碰壁，事与愿违。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[锦绣中华文化村之旅]]></title>
    <link href="http://coolbrain.github.com/blog/2013/10/02/splendid-china/"/>
    <updated>2013-10-02T00:15:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/10/02/splendid-china</id>
    <content type="html"><![CDATA[<blockquote><p><p>来深圳一段时间，之前去过世界之窗，是各大世界名胜古迹的赝品，觉得还挺好看的。于是决定继续游览深圳，国庆的第一个目标地点就是锦绣中华文化村，其实是分为锦绣中华（中国各个地方的名胜古迹的赝品）和中国民俗文化村，今日的游览路线冥冥之中注定是正确的。向右走，去中国民俗文化村。</p>
<!-- more -->
由于无带相机，只能用手机将就，在中国民俗文化村的我。
<img src="http://coolbrain.github.com/assets/images/splendChina/me.jpg" alt="&quot;me&quot;" />
<p>去中国民俗文化村的正确所在是能看到各色各样的表演，即各个少数民族的特色的表演。苗族的表演：芦笙场恋歌，讲解了作为苗家准新郎的标准，分别为能喝（酒），多才多艺，能干（挑一百二十斤的担子）；
附苗家女子的表演：
<img src="http://coolbrain.github.com/assets/images/splendChina/miao_national.jpg" alt="&quot;miao_national&quot;" />
<p>摩梭族的表演：独特的母系社会风情，并讲解了走婚；黎族的陀螺表演；看了龙腾天下和走进亚洲之心影片。并看了三场大型的表演，一就是汇聚五十六个民族，展现各个民族风情的大表演；二就是金戈王朝，展现的是真实的历史战争场面，各种马技的表演；
<img src="http://coolbrain.github.com/assets/images/splendChina/warfield.jpg" alt="&quot;warfield&quot;" />
<p>三就是龙凤舞中华，大型特效，展现中华的民俗风情。十一去这地方，虽然比较多人，但同时看表演的机会也大大增加，觉得物有所值。</p>
<p>而另外一个锦绣中华，就觉得有些闷了。从布达拉宫，嘉峪关，莫高窟，黄果树瀑布，秦兵马俑，故宫，中山陵，颐和园，圆明园，西湖，黄鹤楼，云南大理三塔，桂林山水等走出来，觉得之前活生生的表演比这些东西好看多了，因为这些都是赝品，没有宏伟壮观，没有真实的感觉，和在电脑上看照片的效果一样，那就失去了其意义。</p>
<p>综合来说，这个十一的第一日过得还是相当不错的。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[周星驰也只是一个噱头]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/29/funny-hero/"/>
    <updated>2013-09-29T23:33:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/29/funny-hero</id>
    <content type="html"><![CDATA[<blockquote><p><p>近期这个月都在看周星驰的电影，无厘头的对白有时候令人捧腹大笑；但有时细细体味，有时候又挺沉重。电影“大话西游”之《月光宝盒》和《仙履奇缘》绝对是经典中的经典，上品中的上品。当紫霞仙子临走说：“我的意中人是个盖世英雄，有一天他会踩着七色的云彩来娶我。我猜中了前头，可是我猜不着这结局……“，这怎么不令人心酸呢？女子心中对她的另一半都会充满期待，是一个如唐伯虎的江南才子，玉树临风；或者是会十八般武艺，多才多艺的孙悟空。</p>
<!-- more -->
<p>而至尊宝用来骗紫霞仙子的广为流传的一段话：“曾经有一份真挚的感情摆在我的面前，我没有珍惜，等我失去的时候才追悔莫及，人世间最痛苦的事莫过于此。如果上天能给我一次再来一次的机会，我会对那个女孩说三个字：我爱你。如果非要在这份爱上加一个期限，我希望是一万年”，这是海誓山盟，还是骗人伎俩？两者兼之。</p>
<p>白晶晶：省省吧你！改变什么形象，好好地做你山贼这份很有前途的职业去吧！</p>
<p>至尊宝说故事：在一个月黑风高阴森恐怖的晚上，我是至尊宝你是白晶晶，奇妙的爱情就从桥头上这一点火开始的。我才一转身你就突如其来地向我一指，我整只手就着火了。你还要冲过来向我拚命地打拚命地打拚命地打，不是不是不是这样打，是这样这样这样，是了就是这样打的，你看到了吗？以后的发展我可以用一句峰回路转来形容，因为突然之间杀出了个牛魔王。当时你手拿一条龙骨大战牛魔王之后，就把我抓回了盘丝洞里。所谓光阴似箭，真的一点也不错，因为才一眨眼就到重头戏。在断岩上就是感情爆发的时候，我不顾一切地摸你你也不顾一切地摸我，并立下了永不分离的誓言。可惜快乐永远是短暂的，换来的只是无限的痛苦跟长叹，为什么你会死呢？我只有利用月光宝盒使时光倒流查出真相，终于被我知道原来你是自杀的！在最后关头我终于能把你救活！可是最后一次时光倒流月光宝盒发生故障我&#8221;&#8220;啾&#8221;&#8220;的一下就回到了五百年……</p>
<p>《唐伯虎点秋香》《喜剧之王》《功夫》《赌神》《赌侠》《少林足球》&#8230;，可能好，也可能坏。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接近尾声 两手空空]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/29/train-summary/"/>
    <updated>2013-09-29T22:57:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/29/train-summary</id>
    <content type="html"><![CDATA[<blockquote><p><p>在TP-Link基础的培训基本结束了，培训的内容都浮于表面，要在工作时候才能真正地深入了解和掌握。在培训期间因为一些简单的问题而浪费时间的操作，在此记录，以此为戒。</p>
<!-- more -->
<p>window netsh是一个强大的网络配置工具，如配置IPv4的网络地址，掩码，网关：netsh interface IP addr address &#8220;本地连接“ 192.168.1.2 255.255.255.0 192.168.1.1.配置IPv6同样道理，还可以显示丰富的网络信息，如WLAN，LAN等，显示路由信息router print。相对于linux netstat工具，netsh interface IP show tcpconn 显示了tcp，udp的连接数目和所处的状态。</p>
<p>linux下配置IP地址，ip addr add 803c::abcd:bcde:efce:1235 dev eth0(网络接口），添加路由表项：ip route add 192.168.1.1 dev eth0, 添加 ipv6的路由表项：route -A inet6 add  &#8230; , 要学会man，且看得懂其命令的解释，了解iptables，iP6tables等。</p>
<p>虚拟机网络适配器的理解：最简单的是桥接（bridge），与主机同一个网段，使用VMnet0虚拟网卡，相当于虚拟交换机。NAT,与主机共享网络，使用VMnet8虚拟网卡，相当于平时路由器的NAT功能；Host only，与主机同一个网络，但不具备NAT功能，所以不能与主机共享上网，使用的VMnet1，内部可自动分配IP地址，说明虚拟机具有DHCP服务器。</p>
<p>IPv6的ping:ping -6 fe80::abcd:befe:dc12:3458%5, %后面指的是从计算机哪个网口出去，如果不再同一个网络，就会ping不通。<p>
<p>无线中应该了解802.11b,g,n的区别；在DSL中了解到pppoe，pppoa，ipoa，static ip，dynamic ip的区别；在ipv6中了解到ipv6的地址的使用范围；在简单的局域网中了解arp的欺骗，arp协议中在以太网中的作用；学习了PPP协议，DHCP协议等协议；学习了NAT的几种类型，及其NAT的穿透；学习了转发规则：DMZ，virtual server, upnp, port trigger的区别。</p>
<p>编程中学习到动态链接库的操作，共享内存的操作，网络帧的解析（注意网络字节序），函数分工，字节位操作（特别是乘法和除法），switch和if_else的区别，栈溢出的注意，按目录编译Makefile文件。</p></p>

<p><p>这个星期前三天主要是依据TR069的英文文档写中文文档，主要还是翻译，以加强对协议的理解。同时也对TD-8968的对TR069的测试，以进一步了解TD-8968对协议的支持情况，主要是了解其支持的TR098数据模型。</p>
<p>之后也就是OpenACS，了解了基本操作，同时也有一些问题存在。也看了openACS的代码，</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pjsip状态机]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine/"/>
    <updated>2013-09-26T23:38:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine</id>
    <content type="html"><![CDATA[<blockquote><p><p>近期在voip skeleton上增加了一个简单的状态机，分别是当前的状态（current state），事件（event），新的状态（new state），操作（action），使用的是list链表的方式管理，实现动态注册状态的处理。在pjsip 事务（transation state machine）状态机使用的是用数组的方式来实现，数组的下标为状态，内容为操作handle。</p>
<!-- more -->
<p>pjsip的事务状态用枚举定义：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态声明  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * This enumeration represents transaction state.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">pjsip_tsx_state_e</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_NULL</span><span class="p">,</span>   <span class="cm">/**&lt; For UAC, before any message is sent.   */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_CALLING</span><span class="p">,</span>    <span class="cm">/**&lt; For UAC, just after request is sent.   */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_TRYING</span><span class="p">,</span> <span class="cm">/**&lt; For UAS, just after request is received.*/</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_PROCEEDING</span><span class="p">,</span> <span class="cm">/**&lt; For UAS/UAC, after provisional response.*/</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_COMPLETED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS/UAC, after final response.     */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_CONFIRMED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS, after ACK is received.        */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">,</span> <span class="cm">/**&lt; For UAS/UAC, before it&#39;s destroyed.    */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_DESTROYED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS/UAC, will be destroyed now.    */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_MAX</span>        <span class="cm">/**&lt; Number of states.              */</span>
</span><span class='line'><span class="p">}</span> <span class="n">pjsip_tsx_state_e</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip状态处理函数的定义：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态处理函数声明  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_null</span><span class="p">(</span>      <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_calling</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_trying</span><span class="p">(</span>      <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_proceeding_uas</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_proceeding_uac</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_completed_uas</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_completed_uac</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_confirmed</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_terminated</span><span class="p">(</span>  <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_destroyed</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip状态机的注册：</p></p></blockquote>

<figure class='code'><figcaption><span>transation 状态注册  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* State handlers for UAC, indexed by state */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="p">(</span><span class="o">*</span><span class="n">tsx_state_handler_uac</span><span class="p">[</span><span class="n">PJSIP_TSX_STATE_MAX</span><span class="p">])(</span><span class="n">pjsip_transaction</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">pjsip_event</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_null</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_calling</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_proceeding_uac</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_completed_uac</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_confirmed</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_terminated</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_destroyed</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* State handlers for UAS */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="p">(</span><span class="o">*</span><span class="n">tsx_state_handler_uas</span><span class="p">[</span><span class="n">PJSIP_TSX_STATE_MAX</span><span class="p">])(</span><span class="n">pjsip_transaction</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">pjsip_event</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_null</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_trying</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_proceeding_uas</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_completed_uas</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_confirmed</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_terminated</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_destroyed</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>当相应的事件来临时，就调用相应的处理函数handle和改变自身的状态，如ack来临，或者超时重传：</p></p></blockquote>

<figure class='code'><figcaption><span>transation调用相应的处理函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * State Calling is for UAC after it sends request but before any responses</span>
</span><span class='line'><span class="cm"> * is received.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_calling</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_CALLING</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">role</span> <span class="o">==</span> <span class="n">PJSIP_ROLE_UAC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_TIMER</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">entry</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pj_status_t</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Retransmit the request. */</span>
</span><span class='line'>        <span class="n">status</span> <span class="o">=</span> <span class="n">tsx_retransmit</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">PJ_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_TIMER</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">entry</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Cancel retransmission timer. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_RESCHED</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Set status code */</span>
</span><span class='line'>  <span class="n">tsx_set_status_code</span><span class="p">(</span><span class="n">tsx</span><span class="p">,</span> <span class="n">PJSIP_SC_TSX_TIMEOUT</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Inform TU. */</span>
</span><span class='line'>  <span class="n">tsx_set_state</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">PJSIP_EVENT_TIMER</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Transaction is destroyed */</span>
</span><span class='line'>  <span class="c1">//return PJSIP_ETSXDESTROYED;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_RX_MSG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_msg</span> <span class="o">*</span><span class="n">msg</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Get message instance */</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">rx_msg</span><span class="p">.</span><span class="n">rdata</span><span class="o">-&gt;</span><span class="n">msg_info</span><span class="p">.</span><span class="n">msg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Better be a response message. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">PJSIP_RESPONSE_MSG</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">PJSIP_ENOTRESPONSEMSG</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">code</span> <span class="o">=</span> <span class="n">msg</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* If the response is final, cancel both retransmission and timeout</span>
</span><span class='line'><span class="cm">  * timer.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">&gt;=</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Cancel retransmit timer (for non-INVITE transaction, the</span>
</span><span class='line'><span class="cm">      * retransmit timer will be rescheduled at T2.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* For provisional response, only cancel retransmit when this</span>
</span><span class='line'><span class="cm">      * is an INVITE transaction. For non-INVITE, section 17.1.2.1</span>
</span><span class='line'><span class="cm">      * of RFC 3261 says that:</span>
</span><span class='line'><span class="cm">      *  - retransmit timer is set to T2</span>
</span><span class='line'><span class="cm">      *  - timeout timer F is not deleted.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">PJSIP_INVITE_METHOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Cancel timeout timer */</span>
</span><span class='line'>      <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">is_reliable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">TIMER_ACTIVE</span><span class="p">;</span>
</span><span class='line'>          <span class="n">pjsip_endpt_schedule_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span>
</span><span class='line'>                         <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">,</span>
</span><span class='line'>                         <span class="o">&amp;</span><span class="n">t2_timer_val</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_RESCHED</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Discard retransmission message if it is not INVITE.</span>
</span><span class='line'><span class="cm">  * The INVITE tdata is needed in case we have to generate ACK for</span>
</span><span class='line'><span class="cm">  * the final response.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* Keep last_tx for authorization. */</span>
</span><span class='line'>  <span class="c1">//blp: always keep last_tx until transaction is destroyed</span>
</span><span class='line'>  <span class="c1">//code = msg-&gt;line.status.code;</span>
</span><span class='line'>  <span class="c1">//if (tsx-&gt;method.id != PJSIP_INVITE_METHOD &amp;&amp; code!=401 &amp;&amp; code!=407) {</span>
</span><span class='line'>  <span class="c1">//    pjsip_tx_data_dec_ref(tsx-&gt;last_tx);</span>
</span><span class='line'>  <span class="c1">//    tsx-&gt;last_tx = NULL;</span>
</span><span class='line'>  <span class="c1">//}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Processing is similar to state Proceeding. */</span>
</span><span class='line'>  <span class="n">tsx_on_state_proceeding_uac</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pj_assert</span><span class="p">(</span><span class="o">!</span><span class="s">&quot;Unexpected event&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PJ_EBUG</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">PJ_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip 事务相应状态改变函数：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态改变和改变相应处理函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Set transaction state, and inform TU about the transaction state change.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">tsx_set_state</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>             <span class="n">pjsip_tsx_state_e</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>             <span class="n">pjsip_event_id_e</span> <span class="n">event_src_type</span><span class="p">,</span>
</span><span class='line'>                           <span class="kt">void</span> <span class="o">*</span><span class="n">event_src</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pjsip_tsx_state_e</span> <span class="n">prev_state</span> <span class="o">=</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* New state must be greater than previous state */</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">state</span> <span class="o">&gt;=</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_LOG</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">obj_name</span><span class="p">,</span> <span class="s">&quot;State changed from %s to %s, event=%s&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">state_str</span><span class="p">[</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">],</span> <span class="n">state_str</span><span class="p">[</span><span class="n">state</span><span class="p">],</span>
</span><span class='line'>               <span class="n">pjsip_event_str</span><span class="p">(</span><span class="n">event_src_type</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">pj_log_push_indent</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Change state. */</span>
</span><span class='line'>    <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Update the state handlers. */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">role</span> <span class="o">==</span> <span class="n">PJSIP_ROLE_UAC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state_handler</span> <span class="o">=</span> <span class="n">tsx_state_handler_uac</span><span class="p">[</span><span class="n">state</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state_handler</span> <span class="o">=</span> <span class="n">tsx_state_handler_uas</span><span class="p">[</span><span class="n">state</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Before informing TU about state changed, inform TU about</span>
</span><span class='line'><span class="cm">     * rx event.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event_src_type</span><span class="o">==</span><span class="n">PJSIP_EVENT_RX_MSG</span> <span class="o">&amp;&amp;</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_rx_data</span> <span class="o">*</span><span class="n">rdata</span> <span class="o">=</span> <span class="p">(</span><span class="n">pjsip_rx_data</span><span class="o">*</span><span class="p">)</span> <span class="n">event_src</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pj_assert</span><span class="p">(</span><span class="n">rdata</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rdata</span><span class="o">-&gt;</span><span class="n">msg_info</span><span class="p">.</span><span class="n">msg</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_RESPONSE_MSG</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_rx_response</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_rx_response</span><span class="p">)(</span><span class="n">rdata</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Inform TU about state changed. */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span> <span class="o">&amp;&amp;</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_tsx_state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_event</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PJSIP_EVENT_INIT_TSX_STATE</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">event_src_type</span><span class="p">,</span> <span class="n">event_src</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">prev_state</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_tsx_state</span><span class="p">)(</span><span class="n">tsx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* When the transaction is terminated, release transport, and free the</span>
</span><span class='line'><span class="cm">     * saved last transmitted message.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pj_time_val</span> <span class="n">timeout</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* If we&#39;re still waiting for a message to be sent.. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;</span> <span class="n">TSX_HAS_PENDING_TRANSPORT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Disassociate ourselves from the outstanding transmit data</span>
</span><span class='line'><span class="cm">      * so that when the send callback is called we will be able</span>
</span><span class='line'><span class="cm">      * to ignore that (otherwise we&#39;ll get assertion, see</span>
</span><span class='line'><span class="cm">      * http://trac.pjsip.org/repos/ticket/1033)</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span><span class="o">-&gt;</span><span class="n">mod_data</span><span class="p">[</span><span class="n">mod_tsx_layer</span><span class="p">.</span><span class="n">mod</span><span class="p">.</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_TRANSPORT</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Cancel timeout timer. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">TIMER_ACTIVE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pjsip_endpt_schedule_timer</span><span class="p">(</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">,</span>
</span><span class='line'>                  <span class="o">&amp;</span><span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_DESTROYED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Unregister transaction. */</span>
</span><span class='line'>  <span class="n">mod_tsx_layer_unregister_tsx</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Destroy transaction. */</span>
</span><span class='line'>  <span class="n">tsx_destroy</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pj_log_pop_indent</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/regular-expression/"/>
    <updated>2013-09-26T22:44:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/regular-expression</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于pjsip函数的返回值用宏定义，Source Insight工具无法识别为函数，因此在阅读代码的时候难以找到函数的定义，给理解代码带来一定的麻烦。这正是考验自己的时候，其实遇到这样的问题很平常，解决也很简单，只是没碰到过，所以觉得无法入手。使用正则表达式，很好的解决这个问题，把宏替换，在Linux下的命令为：</p></p></blockquote>

<figure class='code'><figcaption><span>批量替换  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.[c|h]&quot;</span> | xargs perl -pi -e <span class="s2">&quot;s|PJ_DEF\(([^\(]*)\)|$1|g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>批量地找c和h文件，替换PJ_DEF宏，但保留参数不变。掌握正则表达式，对提高工作效率有比较大的帮助。</p>
<!-- more -->
<p>掌握正则表达式，并且配合grep，sed，awk，perl，python等工具一起使用，对于文本处理，威力就无穷大了。</p></p></blockquote>

<figure class='code'><figcaption><span>一般的正则表达式匹配：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.代表的是任意字符，*代表的是多个，<span class="o">[</span>a-z|A-Z<span class="o">]</span>代表的是字母，^<span class="o">[</span>list<span class="o">]</span>代表的是以list开头，
</span><span class='line'><span class="o">[</span>^list<span class="o">]</span>代表的是不是list的，<span class="o">[</span>list<span class="o">]</span><span class="nv">$代</span>表的是以list为结尾，匹配一些特殊符号需要转义，
</span><span class='line'>如<span class="se">\(</span>, <span class="se">\t</span>;<span class="se">\{</span>1,15<span class="se">\}</span>代表的是1-15个。
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>匹配host的IP地址的方式：</p></p></blockquote>

<figure class='code'><figcaption><span>匹配host的IP地址的方式：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;/http:\/\/([\d.]*):[\d]*\/\S*/&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;http://192.168.1.100:8080/tr069&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">ip</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pjsip 初步分析]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/22/internet/"/>
    <updated>2013-09-22T19:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/22/internet</id>
    <content type="html"><![CDATA[<blockquote><p><p>pjsip是实现sip的协议栈。相对于其它的sip协议栈，pjsip实现相对稳定且跨平台。首先分析pjlib基本库，其这些库的实现都比较精湛，是深入学习编程的好材料。并且设计了很多的测试用例，对函数的接口进行测试。<p>
<p>pjlib库包含操作系统的抽象，具体是可移植性的线程，锁，信号量，事件，高精度时间等；网络I/O,具体为socket抽象，网络地址解析，select I/O复用；时间管理；多种数据结构，字符串的操作，数组帮助，哈希表，链表，红黑树等；内存池管理的实现较为精湛。
<!-- more -->
<p>如红黑树的代码实现：</p></p></blockquote>

<figure class='code'><figcaption><span>rbtree.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @file rbtree.h</span>
</span><span class='line'><span class="cm"> * @brief Red/Black Tree</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;pj/types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">PJ_BEGIN_DECL</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @defgroup PJ_RBTREE Red/Black Balanced Tree</span>
</span><span class='line'><span class="cm"> * @ingroup PJ_DS</span>
</span><span class='line'><span class="cm"> * @brief</span>
</span><span class='line'><span class="cm"> * Red/Black tree is the variant of balanced tree, where the search, insert, </span>
</span><span class='line'><span class="cm"> * and delete operation is \b guaranteed to take at most \a O( lg(n) ).</span>
</span><span class='line'><span class="cm"> * @{</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Color type for Red-Black tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">pj_rbcolor_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PJ_RBCOLOR_RED</span>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbcolor_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The type of the node of the R/B Tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">pj_rbtree_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/** Pointers to the node&#39;s parent, and left and right siblings. */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">parent</span><span class="p">,</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Key associated with the node. */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** User data associated with the node. */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">user_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The R/B Tree node color. */</span>
</span><span class='line'>    <span class="n">pj_rbcolor_t</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbtree_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The type of function use to compare key value of tree node.</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> *  0 if the keys are equal</span>
</span><span class='line'><span class="cm"> * &lt;0 if key1 is lower than key2</span>
</span><span class='line'><span class="cm"> * &gt;0 if key1 is greater than key2.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">pj_rbtree_comp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Declaration of a red-black tree. All elements in the tree must have UNIQUE</span>
</span><span class='line'><span class="cm"> * key.</span>
</span><span class='line'><span class="cm"> * A red black tree always maintains the balance of the tree, so that the</span>
</span><span class='line'><span class="cm"> * tree height will not be greater than lg(N). Insert, search, and delete</span>
</span><span class='line'><span class="cm"> * operation will take lg(N) on the worst case. But for insert and delete,</span>
</span><span class='line'><span class="cm"> * there is additional time needed to maintain the balance of the tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">pj_rbtree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="n">null_node</span><span class="p">;</span>   <span class="cm">/**&lt; Constant to indicate NULL node.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span><span class="p">;</span>       <span class="cm">/**&lt; Constant to indicate NULL node.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>       <span class="cm">/**&lt; Root tree node.                    */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>              <span class="cm">/**&lt; Number of elements in the tree.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span><span class="p">;</span>       <span class="cm">/**&lt; Key comparison function.           */</span>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbtree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Guidance on how much memory required for each of the node.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define PJ_RBTREE_NODE_SIZE      (sizeof(pj_rbtree_node))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Guidance on memory required for the tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define PJ_RBTREE_SIZE           (sizeof(pj_rbtree))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Initialize the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree to be initialized.</span>
</span><span class='line'><span class="cm"> * @param comp key comparison function to be used for this tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">pj_rbtree_init</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the first element in the tree.</span>
</span><span class='line'><span class="cm"> * The first element always has the least value for the key, according to</span>
</span><span class='line'><span class="cm"> * the comparison function.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @return the tree node, or NULL if the tree has no element.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_first</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the last element in the tree.</span>
</span><span class='line'><span class="cm"> * The last element always has the greatest key value, according to the</span>
</span><span class='line'><span class="cm"> * comparison function defined for the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @return the tree node, or NULL if the tree has no element.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_last</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the successive element for the specified node.</span>
</span><span class='line'><span class="cm"> * The successive element is an element with greater key value.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node.</span>
</span><span class='line'><span class="cm"> * @return the successive node, or NULL if the node has no successor.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_next</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The the previous node for the specified node.</span>
</span><span class='line'><span class="cm"> * The previous node is an element with less key value.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node.</span>
</span><span class='line'><span class="cm"> * @return the previous node, or NULL if the node has no previous node.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_prev</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Insert a new node. </span>
</span><span class='line'><span class="cm"> * The node will be inserted at sorted location. The key of the node must </span>
</span><span class='line'><span class="cm"> * be UNIQUE, i.e. it hasn&#39;t existed in the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node to be inserted.</span>
</span><span class='line'><span class="cm"> * @return zero on success, or -1 if the key already exist.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pj_rbtree_insert</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Find a node which has the specified key.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param key the key to search.</span>
</span><span class='line'><span class="cm"> * @return the tree node with the specified key, or NULL if the key can not</span>
</span><span class='line'><span class="cm"> *         be found.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_find</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Erase a node from the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node to be erased.</span>
</span><span class='line'><span class="cm"> * @return the tree node itself.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_erase</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the maximum tree height from the specified node.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node, or NULL to get the root of the tree.</span>
</span><span class='line'><span class="cm"> * @return the maximum height, which should be at most lg(N)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_max_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the minumum tree height from the specified node.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node, or NULL to get the root of the tree.</span>
</span><span class='line'><span class="cm"> * @return the height</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_min_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>红黑树的具体实现：</p></p></blockquote>

<figure class='code'><figcaption><span>rbtree.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">left_rotate</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">rnode</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rnode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rnode</span> <span class="o">==</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">right_rotate</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">lnode</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lnode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lnode</span> <span class="o">==</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">insert_fixup</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>         <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">delete_fixup</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">pj_rbtree_init</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">null_node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">user_data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span> <span class="o">=</span> <span class="n">comp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_first</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_last</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_next</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>      <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="n">null</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">==</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_prev</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>     <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="n">null</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">pj_rbtree_insert</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">element</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">,</span>
</span><span class='line'>         <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>   
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rv</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">comp</span><span class="p">)(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* found match, i.e. entry with equal key already exist */</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">element</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>    <span class="n">element</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">element</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">element</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_fixup</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="o">++</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_find</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rv</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rv</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">comp</span><span class="p">)(</span><span class="n">key</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_erase</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">null</span> <span class="o">||</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">succ</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">succ</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">succ</span><span class="o">=</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>     <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">child</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">succ</span><span class="p">)</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">succ</span> <span class="o">!=</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>          <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>     <span class="k">else</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>     <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>      <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>     <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">child</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>      <span class="n">delete_fixup</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">child</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">--</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_max_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="o">?</span> <span class="n">l</span> <span class="o">:</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_min_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span><span class="o">=</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="o">?</span> <span class="n">r</span> <span class="o">:</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生无常 尽力而为]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/08/nothing/"/>
    <updated>2013-09-08T00:18:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/08/nothing</id>
    <content type="html"><![CDATA[<blockquote><p><p>有时候现实变化突然，难以让人接受，但事实已经摆在眼前。无论怎样叹气惋惜，捶背呕心，现实依然不为所动，正所谓“举杯消愁愁更愁”，唯有忙羊补牢，坦然面对，方为上策。</p>
<p>到深圳不到十几日，父亲真是为儿女担忧而呕心沥血，到医院查出患有支气管扩张，住院两个多星期，才告诉其儿子，为的是不想打扰他工作。自己最亲近的人发生这样的事情，还处处为自己着想，情何以堪呢？可能这儿子也是多愁善感之人，对事实看得不够透彻，其自己因为一些琐碎且不幸的事情（自以为是）而愁眉满面，不见得有阳光的一面。不过，事情已经过了这么久，也不必总是挂在心里，正所谓：“同是天涯沦落人，相逢何必曾相识”，并且是两父子，更应该互相鼓励，相濡以沫，相依为命。哥哥在父亲住院期间，付出了很多的心血和精力，这就是中国传统文化中养儿防老的精髓。辛辛苦苦地将儿子养大，也是在这个时候能充分体现其作用。对于身在深圳，也就在另外一方面努力，希望能在资金上提供保障。</p>
<!-- more -->
<p>事物的发展并没有停下，无论是向好的方向，还是不好的方向，人还是要坚强面对。一个人面对很难，但一起去面对，就比较容易。家庭是一个单位，一个团结的家庭去面对一些困难，就势如破竹，高屋建瓴，且相互之间感情真挚，促膝相谈。但一个不团结的家庭，互相埋怨对方的不是，那么每个人都活在水深火热之中，且根本没有强烈的求生欲望和解决问题的意向。智慧的人都会选择前者，让每一个家庭的成员都担负家庭的责任，互相鼓励，共同进退，方为上上之策。四年前，我没有意识到这一点，四年后的今天，我的家庭正朝着这样的方向发展，我很庆幸自己的家庭已经在这一方面有很大的进步。</p>
<p>不单单是家庭是需要这样，平时需要多点交流，增进感情，互相之间保持信任的关系。同住的舍友，同时也需要维持一种信任，和谐的关系，如同他说：“举案齐眉，相濡以沫“，这种关系也需要不断地沟通和互相尊重去维持的。同样自己的自行车，也蛮不错的，但同时也需要保养它，不能随便让它日晒雨淋，平时还需要给链条上油，保持其润滑，这样自行车的使用周期才能延长且使用舒服。同样与自己同学的关系，也需要去保持，或者深一步去了解，平时多走动，拜访一下他们，这样才会觉得有一群人和自己一起在生活，奋斗。同样对于自己，也需要照顾好自己，多饮白开水，多吃水果，多吃点稀粥和蔬菜，让自己的身体好起来，而不是随便去伤害。</p>
<p>中秋佳节，打了两场羽毛球，真是人生一乐事，不能为了炫耀，且自己也就那水平，要多点虚心学习，从中寻找快乐。自己身边的人在没有人陪自己打球的时候，他们总是会到的，维持与他们之间的关系显得更为重要。一起打边炉，一起聊天，堂哥还带上女朋友，也够热闹的。人生这条路，看似很平常，但其中点点滴滴其实都可以很精彩，就看个人如何去阐释或度过这个人生。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[井底之蛙 自筑围城 作茧自缚 自取灭亡]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/08/nineteenth-day/"/>
    <updated>2013-08-08T23:59:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/08/nineteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>下班后，由于忘记了拿打印的资料，于是再次上楼去拿，但下来的时候，班车已经满座了。于是和同事一起时跑时走， 去总部，路上我不够注意安全，意外总是不经意发生的，大意、自以为是都是罪魁祸首，所以千万不可掉以轻心。不过，总部的班车也基本上满人了，只剩下一个座位，但我们有三个人，没有猜拳，因为一个同事好主动地将其让给我了，因为他们两个是住在一起的，没理由拆开他们，当然我欣然接受这个提议，大家欢喜。</p>
<!-- more -->
<p>这两日比较坑，居然流量用完了，被广州移动扣了80元，显示为-64元，真是妈妈地呀！，明明都扣到我没钱了，还继续扣，打10086，说我充了30元，毫无反应，还在负支付状态，不得不再充50元，终于显示余额16元。这就是广州移动的策略，还说我老客户，信用值高，不知不觉地就我屌丝的钱就进入那大腹便便的人的口袋。亏了钱，看见街边摆摊的充100送60，又心动了，其实又是挂羊头卖狗肉，骗人的伎俩。幸运遇到我这样的蠢人，他才有挣钱的生意做。就在我被骗的时候，穿着制服的城管在我身边经过，他们漠不关心，让其招摇撞骗，难道他们又是一伙的？不过活在这个社会只有互相勾结，才有暴利，官商勾结。不过对于我这些生活在社会底层的人士来说，就是坑，移动坑，骗子坑，政府也坑。本来成熟的VOIP技术在国外已经相当成熟，就如我们公司的产品都是外销到国外，因为政府禁止，因为通过ip来打电话，中国移动，电信，联通，它们所挣的利润将大大减少。国外打电话，上网都相当便宜，因为通过ip电话通信便宜。只有国企在中饱私囊。读书也坑，浪费了这么多的光阴来学习政治，所谓的历史，原来都是一个个坑，出来社会根本不是那回事。谁会坑别人，才是真本事。我们生活在技术的社会，但有时都是在别人的操控下，活得像一条狗。朝鲜这样的国家就是一个典型的例子。</p>
<p>吐槽完了吗？出现问题不从自身找问题，先抱怨外界，有用吗？快乐吗？有效果吗？之前为什么不关心一下流量？充话费的时候为什么不考虑清楚？对待问题，能否心平气和，不要让主观情绪影响客观判断。那这个晚上不就费了吗？什么事情的都没干？</p>
<p>有时候，过得不开心，会想本来自己是不属于这个世界，却降临到这个世界，这么不如意的活着。这就说明自己还没有走出自己的世界，还在自己的围城里面。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[路漫漫其修远兮 吾将上下而求索]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/08/eighteenth-day/"/>
    <updated>2013-08-08T00:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/08/eighteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>自己的一些观念其实是错误的，例如对人生或对自身的看法，选择。等自己明白，其实这个观念是错的，我根本不要为这个而纠结，迈开一步，海阔天空。之前的问题可能不是问题，而将来出现的问题，那真是问题。如果被这些所假象蒙骗，而导致了将来的问题，那才是糊涂虫。</p>
<!-- more -->
<p>今日听802.11n局域网的硬件基础，不用多加陈述，我又是去见周公了。不过，我的感悟就是人一定要有一技之长，不然走到哪，就在哪碰壁。天啊，我现在只是一个庸才，能养家糊口，三餐温饱已经是谢天谢地了，更别谈成家立业。所以说，成为一个庸才是人生的根本问题。</p>
<p>Debuglog模块完成了，用了两个共享内存，有名信号量，还忘记在异常退出时释放信号量，导致程序再次运行的时候出现了问题。也增加了好多的异常处理。同时昨天就已经明白大小端问题，网络用的是大端，x86用的小端，在进行网络传输的时候需要转换。也弄懂了字节对齐问题，强制转换所导致字节不对齐的问题，字节不对齐可以通过LWL、LWR来提取到寄存器。mips 3000 跳转延迟槽和加载延迟槽。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[屡败屡战 岁月如梭]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/07/seventeenth-day/"/>
    <updated>2013-08-07T00:05:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/07/seventeenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于之前听讲座，觉得邮件发得不好是很令人尴尬的事情，越是这样认为，我发邮件越是心有余悸。这两日发了三封邮件都是丢三落四，不是漏了附件，就是写错了主题，一紧张，又忘了带附件，搞到灰常尴尬。那我是否死定定啦，给领导这么坏的印象，试用期之后第一个棒走我。好吧，又有机会“采菊东篱下，悠然见南山”，乐得逍遥。</p>
<!-- more -->
<p>之前的问题稍微改善，动态链接库初始化已经开始，但是输入的参数初始化还没实现。没办法，又想用内存共享，到时候，又挨批，写出来的程序又占内存，又效率低，十八个不是。实在没什么思路，妈妈地呀！怎样改善啊，难道我又要改成内核模块，和其它同事一样，我不。反正我都写出来了，被批多一次不多，少一次不少。来吧，哥，站着给你批！人生有几多个十年，被人批亦是一种福分，哥才不怕呢？反而胆小如鼠，畏首畏脚更不是男人大丈夫所为。我迎接批评，敢于面对它，正所谓“海纳百川有容乃大”。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[南柯黄粱梦终醒 人生恰似一浮萍]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/06/sixteenth-day/"/>
    <updated>2013-08-06T00:23:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/06/sixteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>早上的以太网基础，硬件知识，迷迷糊糊已经睡着了，因为都不懂的，本来是安排给硬件工程师，又叫软件工程师来了解下，方知一点摸不着头脑，反而赐予了两个小时的吹眠时间。睡醒后，还飘飘然的感觉，一点羞耻之感都没有。</p>
<!-- more -->
<p>下午编程实现了进程间共享存储的信号互斥，使用的sem_open函数，之前找来找去都不知道用什么来实现，原来是用Posix的信号灯。规整化了时间的输出，还加了Delog输出的类型。就这样时间就无声无色地过去了。</p>
<p>没有实现的要求是，在模块系统的时候，输入参数初始化，方知道我是用动态链接库的，都不知道怎样进行初始化，所以又卡在这里了。看来我的效率很低，今天才做了那么一点点事情。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[锲而舍之，朽木不折]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/04/shenzhen-library/"/>
    <updated>2013-08-04T22:32:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/04/shenzhen-library</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于昨天打球比较激烈，今天仍然有点头晕，于是就决定睡多几个钟头。这让我怀疑是否我有病，怎么打了两个钟头的羽毛球就变成这样？下次再验证一下。</p>
<!-- more -->
<p>睡得天昏地暗，起来也把自己要做的事情忘得一干二净。还是要听从同学的建议，虽然做大计划是不必要的，但小计划还是需要的，不然有时候茫然不知所措。于是就在电脑旁无聊地坐着，突然想起某个高一的女生，不知道她现在怎样呢？我记得我刚来培英的时候，她坐在我前面，她当时和我说的话很少，或者有时候我觉得她看不起我。不过分班之后，就基本上没怎么见过她。高三的时候，她有次碰到我，居然好亲切地叫了我“达哥”，令我受宠若惊。我思前思后，总结出：<strong>要努力，别人才会瞧得起自己。</strong>我在电脑旁用尽所有的搜索工具，都找不到其相关信息，百度，Google，人人网，朋友网，新浪微博&#8230;见到许多高中同学的信息，就是见不到她的，最终我也觉得自己够无聊的,于是决定出去走走。</p>
<p>老地方，深圳科技图书馆。发现之前自己苦苦寻找的shell编程书就在书架上，由于之前自己反应迟钝，被别人抢占先机，都怪自己先知后觉。于是走到英文杂志栏，发现有许多之前想看的杂志，就货真价实地摆在眼前，从高一的时候，我就想看《Scientific American》，但我找遍我们的图书馆都没有，但现在一叠叠都是，却失去了之前的热情。还有《Economist》、《Fortune》、《Science》、《Nature》、《Time》还有许多的杂志，翻看了一下，感觉看得非常吃力，英文没学好，好多单词都不认识，阻碍阅读。想不到学了十几年的英语是如此不堪一击，愧对列祖列宗，愧对天地神灵，愧对十几年的青春光阴。不知曾几何时，就告诉自己，学知识不要囫囵吞枣，浅尝辄止，事实摆在眼前，半桶水的英语只能匍匐前进，随时遭到炮轰，死无全尸，灰飞烟灭。<strong>想要Difference，就要凭真本事，那不是一时一刻就可以练就的，忌好高骛远，心浮气躁，毫无主见，漂移不定。</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日新月异 与时俱进]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday/"/>
    <updated>2013-08-03T23:34:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday</id>
    <content type="html"><![CDATA[<blockquote><p><p>假期，早上比平时睡多两个钟头，起床，吃了很不错的breakfast。然后大致看了下《深入linux的内核架构》的这本书，想不到里面还有网络层的实现分析，我想找的是模块和设备驱动来解决我现在遇到的问题，发现这本书偏理论，应该先实践，对其有所了解，再从理论上分析，这样的过程才符合学习的规律。</p>
<!-- more -->
<p>中午的lunch也不错，哈工大的饭堂比华工的饭堂好多了，如果能够在这里读研究生，其实也是一件挺好的事情。睡个午觉，就去羽毛球了，来的人比较少，无人替换，于是采取省力策略，柔中带刚，刚中带柔，这果然奏效，坚持打了两个小时。不过回来后，整个人虚脱了，睡了三个小时才恢复元气。拿出本《量子物理史话》来看，又进入了波粒二象说的世界，三百年之争，到近代还是乌云密布，晴天霹雳。量子力学理论能够造出量子计算机，如果这个成的话，世界将再一次进行大洗牌。</p>
<p>现在的科技发展好快，无人驾驶汽车就要面世，以后的人都会觉得人驾驶车是荒谬的。Google glass的进展也不错，它的面世将会逐步替代手机，因为带上的眼镜已经包含手机的所有功能，并且使用方便，不需要低头看手机。IBM的量子计算机，现代的高铁，私人飞行物，3G->4G时代，智能家居，这一切都在改变人类的生活，使人的步伐越来越快，也越来越舒适。在这样的大环境下，许多的问题就不成问题，但始终是那一句留得青山在不愁没柴烧。</p>
<p>《量子物理史话》还分析了牛顿的苹果，瓦特的茶壶等脍炙人口的故事，其实并不真实，只是为了神化他们，或者通过这些来掩饰他们的理论是受到他人的启示的。真实的一面才是真实的生活，伟大的想法又怎会一蹴而就呢？其实通过长期的与人交流，摩擦产生。牛顿和胡克二十年来的恩恩怨怨难分难解，这才表明其实牛顿也是一个血肉之人。</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
