<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-09-27T00:01:49+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pjsip状态机]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine/"/>
    <updated>2013-09-26T23:38:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine</id>
    <content type="html"><![CDATA[<blockquote><p><p>近期在voip skeleton上增加了一个简单地状态机，分别是当前的状态（current state），事件（event），新的状态（new state），操作（action），使用的是list链表的方式管理，实现动态注册状态的处理。在pjsip 事务（transation state machine）状态机使用的是用数组的方式来实现，数组的下标为状态，内容为操作handle。</p>
<!-- more -->
<p>pjsip的事务状态为以下集中，用枚举定义：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态声明 enum state  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * This enumeration represents transaction state.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">pjsip_tsx_state_e</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_NULL</span><span class="p">,</span>   <span class="cm">/**&lt; For UAC, before any message is sent.   */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_CALLING</span><span class="p">,</span>    <span class="cm">/**&lt; For UAC, just after request is sent.   */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_TRYING</span><span class="p">,</span> <span class="cm">/**&lt; For UAS, just after request is received.*/</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_PROCEEDING</span><span class="p">,</span> <span class="cm">/**&lt; For UAS/UAC, after provisional response.*/</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_COMPLETED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS/UAC, after final response.     */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_CONFIRMED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS, after ACK is received.        */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">,</span> <span class="cm">/**&lt; For UAS/UAC, before it&#39;s destroyed.    */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_DESTROYED</span><span class="p">,</span>  <span class="cm">/**&lt; For UAS/UAC, will be destroyed now.    */</span>
</span><span class='line'>    <span class="n">PJSIP_TSX_STATE_MAX</span>        <span class="cm">/**&lt; Number of states.              */</span>
</span><span class='line'><span class="p">}</span> <span class="n">pjsip_tsx_state_e</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip状态处理函数的定义：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态处理函数声明 enum state  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_null</span><span class="p">(</span>      <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_calling</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_trying</span><span class="p">(</span>      <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_proceeding_uas</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_proceeding_uac</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_completed_uas</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_completed_uac</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_confirmed</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_terminated</span><span class="p">(</span>  <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_destroyed</span><span class="p">(</span>   <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip状态机的注册：</p></p></blockquote>

<figure class='code'><figcaption><span>transation 状态注册 enum state  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* State handlers for UAC, indexed by state */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="p">(</span><span class="o">*</span><span class="n">tsx_state_handler_uac</span><span class="p">[</span><span class="n">PJSIP_TSX_STATE_MAX</span><span class="p">])(</span><span class="n">pjsip_transaction</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">pjsip_event</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_null</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_calling</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_proceeding_uac</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_completed_uac</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_confirmed</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_terminated</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_destroyed</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* State handlers for UAS */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="p">(</span><span class="o">*</span><span class="n">tsx_state_handler_uas</span><span class="p">[</span><span class="n">PJSIP_TSX_STATE_MAX</span><span class="p">])(</span><span class="n">pjsip_transaction</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">pjsip_event</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_null</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_trying</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_proceeding_uas</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_completed_uas</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_confirmed</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_terminated</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">tsx_on_state_destroyed</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>当相应的事件来临时，就调用相应的处理函数handle和改变自身的状态，如ack来临，或者超时重传：</p></p></blockquote>

<figure class='code'><figcaption><span>transation调用相应的处理函数 enum state  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * State Calling is for UAC after it sends request but before any responses</span>
</span><span class='line'><span class="cm"> * is received.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">pj_status_t</span> <span class="nf">tsx_on_state_calling</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">pjsip_event</span> <span class="o">*</span><span class="n">event</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_CALLING</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">role</span> <span class="o">==</span> <span class="n">PJSIP_ROLE_UAC</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_TIMER</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">entry</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pj_status_t</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Retransmit the request. */</span>
</span><span class='line'>        <span class="n">status</span> <span class="o">=</span> <span class="n">tsx_retransmit</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">!=</span> <span class="n">PJ_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_TIMER</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">timer</span><span class="p">.</span><span class="n">entry</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Cancel retransmission timer. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_RESCHED</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Set status code */</span>
</span><span class='line'>  <span class="n">tsx_set_status_code</span><span class="p">(</span><span class="n">tsx</span><span class="p">,</span> <span class="n">PJSIP_SC_TSX_TIMEOUT</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Inform TU. */</span>
</span><span class='line'>  <span class="n">tsx_set_state</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">PJSIP_EVENT_TIMER</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Transaction is destroyed */</span>
</span><span class='line'>  <span class="c1">//return PJSIP_ETSXDESTROYED;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_EVENT_RX_MSG</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_msg</span> <span class="o">*</span><span class="n">msg</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Get message instance */</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">body</span><span class="p">.</span><span class="n">rx_msg</span><span class="p">.</span><span class="n">rdata</span><span class="o">-&gt;</span><span class="n">msg_info</span><span class="p">.</span><span class="n">msg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Better be a response message. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">PJSIP_RESPONSE_MSG</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">PJSIP_ENOTRESPONSEMSG</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">code</span> <span class="o">=</span> <span class="n">msg</span><span class="o">-&gt;</span><span class="n">line</span><span class="p">.</span><span class="n">status</span><span class="p">.</span><span class="n">code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* If the response is final, cancel both retransmission and timeout</span>
</span><span class='line'><span class="cm">  * timer.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">&gt;=</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Cancel retransmit timer (for non-INVITE transaction, the</span>
</span><span class='line'><span class="cm">      * retransmit timer will be rescheduled at T2.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* For provisional response, only cancel retransmit when this</span>
</span><span class='line'><span class="cm">      * is an INVITE transaction. For non-INVITE, section 17.1.2.1</span>
</span><span class='line'><span class="cm">      * of RFC 3261 says that:</span>
</span><span class='line'><span class="cm">      *  - retransmit timer is set to T2</span>
</span><span class='line'><span class="cm">      *  - timeout timer F is not deleted.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">PJSIP_INVITE_METHOD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Cancel timeout timer */</span>
</span><span class='line'>      <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">is_reliable</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">TIMER_ACTIVE</span><span class="p">;</span>
</span><span class='line'>          <span class="n">pjsip_endpt_schedule_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span>
</span><span class='line'>                         <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">retransmit_timer</span><span class="p">,</span>
</span><span class='line'>                         <span class="o">&amp;</span><span class="n">t2_timer_val</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_RESCHED</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Discard retransmission message if it is not INVITE.</span>
</span><span class='line'><span class="cm">  * The INVITE tdata is needed in case we have to generate ACK for</span>
</span><span class='line'><span class="cm">  * the final response.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* Keep last_tx for authorization. */</span>
</span><span class='line'>  <span class="c1">//blp: always keep last_tx until transaction is destroyed</span>
</span><span class='line'>  <span class="c1">//code = msg-&gt;line.status.code;</span>
</span><span class='line'>  <span class="c1">//if (tsx-&gt;method.id != PJSIP_INVITE_METHOD &amp;&amp; code!=401 &amp;&amp; code!=407) {</span>
</span><span class='line'>  <span class="c1">//    pjsip_tx_data_dec_ref(tsx-&gt;last_tx);</span>
</span><span class='line'>  <span class="c1">//    tsx-&gt;last_tx = NULL;</span>
</span><span class='line'>  <span class="c1">//}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Processing is similar to state Proceeding. */</span>
</span><span class='line'>  <span class="n">tsx_on_state_proceeding_uac</span><span class="p">(</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pj_assert</span><span class="p">(</span><span class="o">!</span><span class="s">&quot;Unexpected event&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PJ_EBUG</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">PJ_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>pjsip 事务相应状态改变函数：</p></p></blockquote>

<figure class='code'><figcaption><span>transation状态改变和改变相应处理函数 enum state  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Set transaction state, and inform TU about the transaction state change.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">tsx_set_state</span><span class="p">(</span> <span class="n">pjsip_transaction</span> <span class="o">*</span><span class="n">tsx</span><span class="p">,</span>
</span><span class='line'>             <span class="n">pjsip_tsx_state_e</span> <span class="n">state</span><span class="p">,</span>
</span><span class='line'>             <span class="n">pjsip_event_id_e</span> <span class="n">event_src_type</span><span class="p">,</span>
</span><span class='line'>                           <span class="kt">void</span> <span class="o">*</span><span class="n">event_src</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pjsip_tsx_state_e</span> <span class="n">prev_state</span> <span class="o">=</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* New state must be greater than previous state */</span>
</span><span class='line'>    <span class="n">pj_assert</span><span class="p">(</span><span class="n">state</span> <span class="o">&gt;=</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_LOG</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">obj_name</span><span class="p">,</span> <span class="s">&quot;State changed from %s to %s, event=%s&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">state_str</span><span class="p">[</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span><span class="p">],</span> <span class="n">state_str</span><span class="p">[</span><span class="n">state</span><span class="p">],</span>
</span><span class='line'>               <span class="n">pjsip_event_str</span><span class="p">(</span><span class="n">event_src_type</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">pj_log_push_indent</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Change state. */</span>
</span><span class='line'>    <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state</span> <span class="o">=</span> <span class="n">state</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Update the state handlers. */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">role</span> <span class="o">==</span> <span class="n">PJSIP_ROLE_UAC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state_handler</span> <span class="o">=</span> <span class="n">tsx_state_handler_uac</span><span class="p">[</span><span class="n">state</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">state_handler</span> <span class="o">=</span> <span class="n">tsx_state_handler_uas</span><span class="p">[</span><span class="n">state</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Before informing TU about state changed, inform TU about</span>
</span><span class='line'><span class="cm">     * rx event.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event_src_type</span><span class="o">==</span><span class="n">PJSIP_EVENT_RX_MSG</span> <span class="o">&amp;&amp;</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_rx_data</span> <span class="o">*</span><span class="n">rdata</span> <span class="o">=</span> <span class="p">(</span><span class="n">pjsip_rx_data</span><span class="o">*</span><span class="p">)</span> <span class="n">event_src</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pj_assert</span><span class="p">(</span><span class="n">rdata</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rdata</span><span class="o">-&gt;</span><span class="n">msg_info</span><span class="p">.</span><span class="n">msg</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">PJSIP_RESPONSE_MSG</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>         <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_rx_response</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_rx_response</span><span class="p">)(</span><span class="n">rdata</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Inform TU about state changed. */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span> <span class="o">&amp;&amp;</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_tsx_state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pjsip_event</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PJSIP_EVENT_INIT_TSX_STATE</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">tsx</span><span class="p">,</span> <span class="n">event_src_type</span><span class="p">,</span> <span class="n">event_src</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">prev_state</span><span class="p">);</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">tsx_user</span><span class="o">-&gt;</span><span class="n">on_tsx_state</span><span class="p">)(</span><span class="n">tsx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* When the transaction is terminated, release transport, and free the</span>
</span><span class='line'><span class="cm">     * saved last transmitted message.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_TERMINATED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pj_time_val</span> <span class="n">timeout</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* If we&#39;re still waiting for a message to be sent.. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;</span> <span class="n">TSX_HAS_PENDING_TRANSPORT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Disassociate ourselves from the outstanding transmit data</span>
</span><span class='line'><span class="cm">      * so that when the send callback is called we will be able</span>
</span><span class='line'><span class="cm">      * to ignore that (otherwise we&#39;ll get assertion, see</span>
</span><span class='line'><span class="cm">      * http://trac.pjsip.org/repos/ticket/1033)</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span><span class="o">-&gt;</span><span class="n">mod_data</span><span class="p">[</span><span class="n">mod_tsx_layer</span><span class="p">.</span><span class="n">mod</span><span class="p">.</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">pending_tx</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">transport_flag</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">TSX_HAS_PENDING_TRANSPORT</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Cancel timeout timer. */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pjsip_endpt_cancel_timer</span><span class="p">(</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">);</span>
</span><span class='line'>      <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">TIMER_ACTIVE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pjsip_endpt_schedule_timer</span><span class="p">(</span> <span class="n">tsx</span><span class="o">-&gt;</span><span class="n">endpt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tsx</span><span class="o">-&gt;</span><span class="n">timeout_timer</span><span class="p">,</span>
</span><span class='line'>                  <span class="o">&amp;</span><span class="n">timeout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">unlock_timer</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">PJSIP_TSX_STATE_DESTROYED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Unregister transaction. */</span>
</span><span class='line'>  <span class="n">mod_tsx_layer_unregister_tsx</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Destroy transaction. */</span>
</span><span class='line'>  <span class="n">tsx_destroy</span><span class="p">(</span><span class="n">tsx</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pj_log_pop_indent</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/regular-expression/"/>
    <updated>2013-09-26T22:44:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/regular-expression</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于pjsip函数的返回值用宏定义，Source Insight工具无法识别为函数，因此在阅读代码的时候难以找到函数的定义，给理解代码带来一定的麻烦。这正是考验自己的时候，其实遇到这样的问题很平常，解决也很简单，只是没碰到过，所以觉得无法入手。使用正则表达式，很好的解决这个问题，把宏替换，在Linux下的命令为：</p></p></blockquote>

<figure class='code'><figcaption><span>批量替换  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;*.[c|h]&quot;</span> | xargs perl -pi -e <span class="s2">&quot;s|PJ_DEF\(([^\(]*)\)|$1|g&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>批量地找c和h文件，替换PJ_DEF宏，但保留参数不变。掌握正则表达式，对提高工作效率有比较大的帮助。</p>
<!-- more -->
<p>掌握正则表达式，并且配合grep，sed，awk，perl，python等工具一起使用，对于文本处理，威力就无穷大了。</p></p></blockquote>

<figure class='code'><figcaption><span>一般的正则表达式匹配：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.代表的是任意字符，*代表的是多个，<span class="o">[</span>a-z|A-Z<span class="o">]</span>代表的是字母，^<span class="o">[</span>list<span class="o">]</span>代表的是以list开头，
</span><span class='line'><span class="o">[</span>^list<span class="o">]</span>代表的是不是list的，<span class="o">[</span>list<span class="o">]</span><span class="nv">$代</span>表的是以list为结尾，匹配一些特殊符号需要转义，
</span><span class='line'>如<span class="se">\(</span>, <span class="se">\t</span>;<span class="se">\{</span>1,15<span class="se">\}</span>代表的是1-15个。
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pjsip 初步分析]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/22/internet/"/>
    <updated>2013-09-22T19:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/22/internet</id>
    <content type="html"><![CDATA[<blockquote><p><p>pjsip是实现sip的协议栈。相对于其它的sip协议栈，pjsip实现相对稳定且跨平台。首先分析pjlib基本库，其这些库的实现都比较精湛，是深入学习编程的好材料。并且设计了很多的测试用例，对函数的接口进行测试。<p>
<p>pjlib库包含操作系统的抽象，具体是可移植性的线程，锁，信号量，事件，高精度时间等；网络I/O,具体为socket抽象，网络地址解析，select I/O复用；时间管理；多种数据结构，字符串的操作，数组帮助，哈希表，链表，红黑树等；内存池管理的实现较为精湛。
<!-- more -->
<p>如红黑树的代码实现：</p></p></blockquote>

<figure class='code'><figcaption><span>rbtree.h  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @file rbtree.h</span>
</span><span class='line'><span class="cm"> * @brief Red/Black Tree</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;pj/types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">PJ_BEGIN_DECL</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @defgroup PJ_RBTREE Red/Black Balanced Tree</span>
</span><span class='line'><span class="cm"> * @ingroup PJ_DS</span>
</span><span class='line'><span class="cm"> * @brief</span>
</span><span class='line'><span class="cm"> * Red/Black tree is the variant of balanced tree, where the search, insert, </span>
</span><span class='line'><span class="cm"> * and delete operation is \b guaranteed to take at most \a O( lg(n) ).</span>
</span><span class='line'><span class="cm"> * @{</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Color type for Red-Black tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">pj_rbcolor_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PJ_RBCOLOR_RED</span>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbcolor_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The type of the node of the R/B Tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">pj_rbtree_node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/** Pointers to the node&#39;s parent, and left and right siblings. */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">parent</span><span class="p">,</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** Key associated with the node. */</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** User data associated with the node. */</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">user_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The R/B Tree node color. */</span>
</span><span class='line'>    <span class="n">pj_rbcolor_t</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbtree_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The type of function use to compare key value of tree node.</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> *  0 if the keys are equal</span>
</span><span class='line'><span class="cm"> * &lt;0 if key1 is lower than key2</span>
</span><span class='line'><span class="cm"> * &gt;0 if key1 is greater than key2.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">pj_rbtree_comp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Declaration of a red-black tree. All elements in the tree must have UNIQUE</span>
</span><span class='line'><span class="cm"> * key.</span>
</span><span class='line'><span class="cm"> * A red black tree always maintains the balance of the tree, so that the</span>
</span><span class='line'><span class="cm"> * tree height will not be greater than lg(N). Insert, search, and delete</span>
</span><span class='line'><span class="cm"> * operation will take lg(N) on the worst case. But for insert and delete,</span>
</span><span class='line'><span class="cm"> * there is additional time needed to maintain the balance of the tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">pj_rbtree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="n">null_node</span><span class="p">;</span>   <span class="cm">/**&lt; Constant to indicate NULL node.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span><span class="p">;</span>       <span class="cm">/**&lt; Constant to indicate NULL node.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>       <span class="cm">/**&lt; Root tree node.                    */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>              <span class="cm">/**&lt; Number of elements in the tree.    */</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span><span class="p">;</span>       <span class="cm">/**&lt; Key comparison function.           */</span>
</span><span class='line'><span class="p">}</span> <span class="n">pj_rbtree</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Guidance on how much memory required for each of the node.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define PJ_RBTREE_NODE_SIZE      (sizeof(pj_rbtree_node))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Guidance on memory required for the tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define PJ_RBTREE_SIZE           (sizeof(pj_rbtree))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Initialize the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree to be initialized.</span>
</span><span class='line'><span class="cm"> * @param comp key comparison function to be used for this tree.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">pj_rbtree_init</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the first element in the tree.</span>
</span><span class='line'><span class="cm"> * The first element always has the least value for the key, according to</span>
</span><span class='line'><span class="cm"> * the comparison function.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @return the tree node, or NULL if the tree has no element.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_first</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the last element in the tree.</span>
</span><span class='line'><span class="cm"> * The last element always has the greatest key value, according to the</span>
</span><span class='line'><span class="cm"> * comparison function defined for the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @return the tree node, or NULL if the tree has no element.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_last</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the successive element for the specified node.</span>
</span><span class='line'><span class="cm"> * The successive element is an element with greater key value.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node.</span>
</span><span class='line'><span class="cm"> * @return the successive node, or NULL if the node has no successor.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_next</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The the previous node for the specified node.</span>
</span><span class='line'><span class="cm"> * The previous node is an element with less key value.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node.</span>
</span><span class='line'><span class="cm"> * @return the previous node, or NULL if the node has no previous node.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_prev</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Insert a new node. </span>
</span><span class='line'><span class="cm"> * The node will be inserted at sorted location. The key of the node must </span>
</span><span class='line'><span class="cm"> * be UNIQUE, i.e. it hasn&#39;t existed in the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node to be inserted.</span>
</span><span class='line'><span class="cm"> * @return zero on success, or -1 if the key already exist.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pj_rbtree_insert</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Find a node which has the specified key.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param key the key to search.</span>
</span><span class='line'><span class="cm"> * @return the tree node with the specified key, or NULL if the key can not</span>
</span><span class='line'><span class="cm"> *         be found.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_find</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Erase a node from the tree.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node to be erased.</span>
</span><span class='line'><span class="cm"> * @return the tree node itself.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_erase</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the maximum tree height from the specified node.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node, or NULL to get the root of the tree.</span>
</span><span class='line'><span class="cm"> * @return the maximum height, which should be at most lg(N)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_max_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Get the minumum tree height from the specified node.</span>
</span><span class='line'><span class="cm"> * @param tree the tree.</span>
</span><span class='line'><span class="cm"> * @param node the node, or NULL to get the root of the tree.</span>
</span><span class='line'><span class="cm"> * @return the height</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_min_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><p>红黑树的具体实现：</p></p></blockquote>

<figure class='code'><figcaption><span>rbtree.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">left_rotate</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">rnode</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rnode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rnode</span> <span class="o">==</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">rnode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">rnode</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">right_rotate</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">lnode</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lnode</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lnode</span> <span class="o">==</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">lnode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">lnode</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">insert_fixup</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>         <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">delete_fixup</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>          <span class="n">left_rotate</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
</span><span class='line'>          <span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>          <span class="n">right_rotate</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">pj_rbtree_init</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">null_node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">user_data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span> <span class="o">=</span> <span class="n">comp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_first</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_last</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_next</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>      <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="n">null</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">==</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_prev</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">node</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>     <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">register</span> <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="o">!=</span><span class="n">null</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">pj_rbtree_insert</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">element</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">,</span>
</span><span class='line'>         <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>   
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rv</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">comp</span><span class="p">)(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* found match, i.e. entry with equal key already exist */</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">element</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_RED</span><span class="p">;</span>
</span><span class='line'>    <span class="n">element</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">element</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">element</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_fixup</span><span class="p">(</span> <span class="n">tree</span><span class="p">,</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>    <span class="o">++</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_find</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rv</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_comp</span> <span class="o">*</span><span class="n">comp</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">comp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rv</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">comp</span><span class="p">)(</span><span class="n">key</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">rv</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">node</span> <span class="o">=</span> <span class="n">rv</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">node</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pj_rbtree_node</span><span class="o">*</span> <span class="nf">pj_rbtree_erase</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">null</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">null</span> <span class="o">||</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">succ</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">succ</span><span class="o">=</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">!=</span><span class="n">null</span><span class="p">;</span> <span class="n">succ</span><span class="o">=</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span>
</span><span class='line'>     <span class="cm">/* void */</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">?</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">:</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>    <span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">child</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">==</span> <span class="n">succ</span><span class="p">)</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>     <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">child</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">succ</span> <span class="o">!=</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class='line'>        <span class="n">succ</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">==</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>          <span class="n">parent</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">=</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>     <span class="k">else</span>
</span><span class='line'>      <span class="n">parent</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">=</span><span class="n">succ</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>     <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>      <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">==</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>     <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">succ</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">==</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">child</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span>
</span><span class='line'>      <span class="n">delete_fixup</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">child</span><span class="p">);</span>
</span><span class='line'>        <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="o">-&gt;</span><span class="n">color</span> <span class="o">=</span> <span class="n">PJ_RBCOLOR_BLACK</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">--</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_max_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span> <span class="o">=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="o">?</span> <span class="n">l</span> <span class="o">:</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="nf">pj_rbtree_min_height</span><span class="p">(</span> <span class="n">pj_rbtree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">pj_rbtree_node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PJ_CHECK_STACK</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="n">node</span><span class="o">=</span><span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">null</span><span class="p">)</span> <span class="o">?</span> <span class="n">pj_rbtree_max_height</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="o">?</span> <span class="n">r</span> <span class="o">:</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生无常 尽力而为]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/08/nothing/"/>
    <updated>2013-09-08T00:18:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/08/nothing</id>
    <content type="html"><![CDATA[<blockquote><p><p>有时候现实变化突然，难以让人接受，但事实已经摆在眼前。无论怎样叹气惋惜，捶背呕心，现实依然不为所动，正所谓“举杯消愁愁更愁”，唯有忙羊补牢，坦然面对，方为上策。</p>
<p>到深圳不到十几日，父亲真是为儿女担忧而呕心沥血，到医院查出患有支气管扩张，住院两个多星期，才告诉其儿子，为的是不想打扰他工作。自己最亲近的人发生这样的事情，还处处为自己着想，情何以堪呢？可能这儿子也是多愁善感之人，对事实看得不够透彻，其自己因为一些琐碎且不幸的事情（自以为是）而愁眉满面，不见得有阳光的一面。不过，事情已经过了这么久，也不必总是挂在心里，正所谓：“同是天涯沦落人，相逢何必曾相识”，并且是两父子，更应该互相鼓励，相濡以沫，相依为命。哥哥在父亲住院期间，付出了很多的心血和精力，这就是中国传统文化中养儿防老的精髓。辛辛苦苦地将儿子养大，也是在这个时候能充分体现其作用。对于身在深圳，也就在另外一方面努力，希望能在资金上提供保障。</p>
<!-- more -->
<p>事物的发展并没有停下，无论是向好的方向，还是不好的方向，人还是要坚强面对。一个人面对很难，但一起去面对，就比较容易。家庭是一个单位，一个团结的家庭去面对一些困难，就势如破竹，高屋建瓴，且相互之间感情真挚，促膝相谈。但一个不团结的家庭，互相埋怨对方的不是，那么每个人都活在水深火热之中，且根本没有强烈的求生欲望和解决问题的意向。智慧的人都会选择前者，让每一个家庭的成员都担负家庭的责任，互相鼓励，共同进退，方为上上之策。四年前，我没有意识到这一点，四年后的今天，我的家庭正朝着这样的方向发展，我很庆幸自己的家庭已经在这一方面有很大的进步。</p>
<p>不单单是家庭是需要这样，平时需要多点交流，增进感情，互相之间保持信任的关系。同住的舍友，同时也需要维持一种信任，和谐的关系，如同他说：“举案齐眉，相濡以沫“，这种关系也需要不断地沟通和互相尊重去维持的。同样自己的自行车，也蛮不错的，但同时也需要保养它，不能随便让它日晒雨淋，平时还需要给链条上油，保持其润滑，这样自行车的使用周期才能延长且使用舒服。同样与自己同学的关系，也需要去保持，或者深一步去了解，平时多走动，拜访一下他们，这样才会觉得有一群人和自己一起在生活，奋斗。同样对于自己，也需要照顾好自己，多饮白开水，多吃水果，多吃点稀粥和蔬菜，让自己的身体好起来，而不是随便去伤害。</p>
<p>中秋佳节，打了两场羽毛球，真是人生一乐事，不能为了炫耀，且自己也就那水平，要多点虚心学习，从中寻找快乐。自己身边的人在没有人陪自己打球的时候，他们总是会到的，维持与他们之间的关系显得更为重要。一起打边炉，一起聊天，堂哥还带上女朋友，也够热闹的。人生这条路，看似很平常，但其中点点滴滴其实都可以很精彩，就看个人如何去阐释或度过这个人生。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[井底之蛙 自筑围城 作茧自缚 自取灭亡]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/08/nineteenth-day/"/>
    <updated>2013-08-08T23:59:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/08/nineteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>下班后，由于忘记了拿打印的资料，于是再次上楼去拿，但下来的时候，班车已经满座了。于是和同事一起时跑时走， 去总部，路上我不够注意安全，意外总是不经意发生的，大意、自以为是都是罪魁祸首，所以千万不可掉以轻心。不过，总部的班车也基本上满人了，只剩下一个座位，但我们有三个人，没有猜拳，因为一个同事好主动地将其让给我了，因为他们两个是住在一起的，没理由拆开他们，当然我欣然接受这个提议，大家欢喜。</p>
<!-- more -->
<p>这两日比较坑，居然流量用完了，被广州移动扣了80元，显示为-64元，真是妈妈地呀！，明明都扣到我没钱了，还继续扣，打10086，说我充了30元，毫无反应，还在负支付状态，不得不再充50元，终于显示余额16元。这就是广州移动的策略，还说我老客户，信用值高，不知不觉地就我屌丝的钱就进入那大腹便便的人的口袋。亏了钱，看见街边摆摊的充100送60，又心动了，其实又是挂羊头卖狗肉，骗人的伎俩。幸运遇到我这样的蠢人，他才有挣钱的生意做。就在我被骗的时候，穿着制服的城管在我身边经过，他们漠不关心，让其招摇撞骗，难道他们又是一伙的？不过活在这个社会只有互相勾结，才有暴利，官商勾结。不过对于我这些生活在社会底层的人士来说，就是坑，移动坑，骗子坑，政府也坑。本来成熟的VOIP技术在国外已经相当成熟，就如我们公司的产品都是外销到国外，因为政府禁止，因为通过ip来打电话，中国移动，电信，联通，它们所挣的利润将大大减少。国外打电话，上网都相当便宜，因为通过ip电话通信便宜。只有国企在中饱私囊。读书也坑，浪费了这么多的光阴来学习政治，所谓的历史，原来都是一个个坑，出来社会根本不是那回事。谁会坑别人，才是真本事。我们生活在技术的社会，但有时都是在别人的操控下，活得像一条狗。朝鲜这样的国家就是一个典型的例子。</p>
<p>吐槽完了吗？出现问题不从自身找问题，先抱怨外界，有用吗？快乐吗？有效果吗？之前为什么不关心一下流量？充话费的时候为什么不考虑清楚？对待问题，能否心平气和，不要让主观情绪影响客观判断。那这个晚上不就费了吗？什么事情的都没干？</p>
<p>有时候，过得不开心，会想本来自己是不属于这个世界，却降临到这个世界，这么不如意的活着。这就说明自己还没有走出自己的世界，还在自己的围城里面。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[路漫漫其修远兮 吾将上下而求索]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/08/eighteenth-day/"/>
    <updated>2013-08-08T00:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/08/eighteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>自己的一些观念其实是错误的，例如对人生或对自身的看法，选择。等自己明白，其实这个观念是错的，我根本不要为这个而纠结，迈开一步，海阔天空。之前的问题可能不是问题，而将来出现的问题，那真是问题。如果被这些所假象蒙骗，而导致了将来的问题，那才是糊涂虫。</p>
<!-- more -->
<p>今日听802.11n局域网的硬件基础，不用多加陈述，我又是去见周公了。不过，我的感悟就是人一定要有一技之长，不然走到哪，就在哪碰壁。天啊，我现在只是一个庸才，能养家糊口，三餐温饱已经是谢天谢地了，更别谈成家立业。所以说，成为一个庸才是人生的根本问题。</p>
<p>Debuglog模块完成了，用了两个共享内存，有名信号量，还忘记在异常退出时释放信号量，导致程序再次运行的时候出现了问题。也增加了好多的异常处理。同时昨天就已经明白大小端问题，网络用的是大端，x86用的小端，在进行网络传输的时候需要转换。也弄懂了字节对齐问题，强制转换所导致字节不对齐的问题，字节不对齐可以通过LWL、LWR来提取到寄存器。mips 3000 跳转延迟槽和加载延迟槽。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[屡败屡战 岁月如梭]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/07/seventeenth-day/"/>
    <updated>2013-08-07T00:05:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/07/seventeenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于之前听讲座，觉得邮件发得不好是很令人尴尬的事情，越是这样认为，我发邮件越是心有余悸。这两日发了三封邮件都是丢三落四，不是漏了附件，就是写错了主题，一紧张，又忘了带附件，搞到灰常尴尬。那我是否死定定啦，给领导这么坏的印象，试用期之后第一个棒走我。好吧，又有机会“采菊东篱下，悠然见南山”，乐得逍遥。</p>
<!-- more -->
<p>之前的问题稍微改善，动态链接库初始化已经开始，但是输入的参数初始化还没实现。没办法，又想用内存共享，到时候，又挨批，写出来的程序又占内存，又效率低，十八个不是。实在没什么思路，妈妈地呀！怎样改善啊，难道我又要改成内核模块，和其它同事一样，我不。反正我都写出来了，被批多一次不多，少一次不少。来吧，哥，站着给你批！人生有几多个十年，被人批亦是一种福分，哥才不怕呢？反而胆小如鼠，畏首畏脚更不是男人大丈夫所为。我迎接批评，敢于面对它，正所谓“海纳百川有容乃大”。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[南柯黄粱梦终醒 人生恰似一浮萍]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/06/sixteenth-day/"/>
    <updated>2013-08-06T00:23:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/06/sixteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>早上的以太网基础，硬件知识，迷迷糊糊已经睡着了，因为都不懂的，本来是安排给硬件工程师，又叫软件工程师来了解下，方知一点摸不着头脑，反而赐予了两个小时的吹眠时间。睡醒后，还飘飘然的感觉，一点羞耻之感都没有。</p>
<!-- more -->
<p>下午编程实现了进程间共享存储的信号互斥，使用的sem_open函数，之前找来找去都不知道用什么来实现，原来是用Posix的信号灯。规整化了时间的输出，还加了Delog输出的类型。就这样时间就无声无色地过去了。</p>
<p>没有实现的要求是，在模块系统的时候，输入参数初始化，方知道我是用动态链接库的，都不知道怎样进行初始化，所以又卡在这里了。看来我的效率很低，今天才做了那么一点点事情。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[锲而舍之，朽木不折]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/04/shenzhen-library/"/>
    <updated>2013-08-04T22:32:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/04/shenzhen-library</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于昨天打球比较激烈，今天仍然有点头晕，于是就决定睡多几个钟头。这让我怀疑是否我有病，怎么打了两个钟头的羽毛球就变成这样？下次再验证一下。</p>
<!-- more -->
<p>睡得天昏地暗，起来也把自己要做的事情忘得一干二净。还是要听从同学的建议，虽然做大计划是不必要的，但小计划还是需要的，不然有时候茫然不知所措。于是就在电脑旁无聊地坐着，突然想起某个高一的女生，不知道她现在怎样呢？我记得我刚来培英的时候，她坐在我前面，她当时和我说的话很少，或者有时候我觉得她看不起我。不过分班之后，就基本上没怎么见过她。高三的时候，她有次碰到我，居然好亲切地叫了我“达哥”，令我受宠若惊。我思前思后，总结出：<strong>要努力，别人才会瞧得起自己。</strong>我在电脑旁用尽所有的搜索工具，都找不到其相关信息，百度，Google，人人网，朋友网，新浪微博&#8230;见到许多高中同学的信息，就是见不到她的，最终我也觉得自己够无聊的,于是决定出去走走。</p>
<p>老地方，深圳科技图书馆。发现之前自己苦苦寻找的shell编程书就在书架上，由于之前自己反应迟钝，被别人抢占先机，都怪自己先知后觉。于是走到英文杂志栏，发现有许多之前想看的杂志，就货真价实地摆在眼前，从高一的时候，我就想看《Scientific American》，但我找遍我们的图书馆都没有，但现在一叠叠都是，却失去了之前的热情。还有《Economist》、《Fortune》、《Science》、《Nature》、《Time》还有许多的杂志，翻看了一下，感觉看得非常吃力，英文没学好，好多单词都不认识，阻碍阅读。想不到学了十几年的英语是如此不堪一击，愧对列祖列宗，愧对天地神灵，愧对十几年的青春光阴。不知曾几何时，就告诉自己，学知识不要囫囵吞枣，浅尝辄止，事实摆在眼前，半桶水的英语只能匍匐前进，随时遭到炮轰，死无全尸，灰飞烟灭。<strong>想要Difference，就要凭真本事，那不是一时一刻就可以练就的，忌好高骛远，心浮气躁，毫无主见，漂移不定。</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日新月异 与时俱进]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday/"/>
    <updated>2013-08-03T23:34:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/03/peaceful-holiday</id>
    <content type="html"><![CDATA[<blockquote><p><p>假期，早上比平时睡多两个钟头，起床，吃了很不错的breakfast。然后大致看了下《深入linux的内核架构》的这本书，想不到里面还有网络层的实现分析，我想找的是模块和设备驱动来解决我现在遇到的问题，发现这本书偏理论，应该先实践，对其有所了解，再从理论上分析，这样的过程才符合学习的规律。</p>
<!-- more -->
<p>中午的lunch也不错，哈工大的饭堂比华工的饭堂好多了，如果能够在这里读研究生，其实也是一件挺好的事情。睡个午觉，就去羽毛球了，来的人比较少，无人替换，于是采取省力策略，柔中带刚，刚中带柔，这果然奏效，坚持打了两个小时。不过回来后，整个人虚脱了，睡了三个小时才恢复元气。拿出本《量子物理史话》来看，又进入了波粒二象说的世界，三百年之争，到近代还是乌云密布，晴天霹雳。量子力学理论能够造出量子计算机，如果这个成的话，世界将再一次进行大洗牌。</p>
<p>现在的科技发展好快，无人驾驶汽车就要面世，以后的人都会觉得人驾驶车是荒谬的。Google glass的进展也不错，它的面世将会逐步替代手机，因为带上的眼镜已经包含手机的所有功能，并且使用方便，不需要低头看手机。IBM的量子计算机，现代的高铁，私人飞行物，3G->4G时代，智能家居，这一切都在改变人类的生活，使人的步伐越来越快，也越来越舒适。在这样的大环境下，许多的问题就不成问题，但始终是那一句留得青山在不愁没柴烧。</p>
<p>《量子物理史话》还分析了牛顿的苹果，瓦特的茶壶等脍炙人口的故事，其实并不真实，只是为了神化他们，或者通过这些来掩饰他们的理论是受到他人的启示的。真实的一面才是真实的生活，伟大的想法又怎会一蹴而就呢？其实通过长期的与人交流，摩擦产生。牛顿和胡克二十年来的恩恩怨怨难分难解，这才表明其实牛顿也是一个血肉之人。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手高眼低 迎刃而解]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/02/fifteenth-day/"/>
    <updated>2013-08-02T23:14:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/02/fifteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天主要是把之前写的DebugLog模块转变为可以多进程调用的共享模块，基本上测试成功，但还不知道怎样对共享内存区域进行加锁。另外，还要尝试将DebugLog模块做成内核模块，就如printf函数一样的模块。好多知识要学，踏实点，不要眼高手低。</p>
<!-- more -->
<p>将DebugLog模块编译成动态链接库，各个进程使用是独立的，包括模块中的全局变量，只有内存映射才是公共的，但各个进程来说，其地址又是不一样的，因为是进程使用的虚拟地址，所以存储在共享内存的数据,包含链表，都只能使用相对的地址，所有的操作都是利用指针进行相对地址的操作。</p>
<p>今天有个关于MIPS架构的讲座，讲师很厉害，不过我也有几个不明白的地方，一：大小端问题，二：字节对齐问题 三：cache问题，以后还要慢慢弄懂这些问题，不要犯一些低级错误。如近期经常在while，或for循环后面加个“；”，其后面的代码根本就发挥不了作用，只执行了仅仅一次，就退出了。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感激涕零 不知所云]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/fourteenth-day/"/>
    <updated>2013-08-01T23:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/fourteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天没有training,arrange time by ourselves. 发现之前写的代码太没水平了，找素数的居然筛选法比传统方法还要慢，重复赋值太多和没有利用CPU的流水线。模式替换，发现自己居然整数选择时没有用switch代替if-else语句。memmove内存复制的字节对齐理解错误，是地址，而不是长度，一般用汇编写比较能提高效率，且可以利用流水线加速。每一条编程题都有改进的空间。</p>
<!-- more -->
<p>I spent two hours learning how to write Makefile. 懂得如何递归地执行Makefile文件和递归地删除目标文件，学习的时候需要带着问题去学习，这样效果会比较好。</p>
<p>晚上回来还是不断地查找关于共享库全局变量的问题，原来每个进程执行的时候都有自己的副本。关于链接库，共享内存实现的机制，还有虚拟存储的理解又加深了，还要继续深究这些问题，因为还没有弄明白究竟是怎么一回事，不能糊里糊涂地让其过去。我受不了还没有理解，我受不了效率这么低。</p>
<p><strong>PS:感谢张韵婷同学对我的help。同时自己要积极进取，努力去解决问题。keep optimistic and working hard to solve the facing problem.</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[麻雀虽小 五脏俱全]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/thirteenth-day/"/>
    <updated>2013-08-01T00:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/thirteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天有个讲座是IAD硬件基础，其实IAD是Integrated Access Device(综合接入设备），包含ADSL，route, VoIP(网络电话），USB，无线wifi。重点是说了网络IP电话（VOIP）技术，音频的编码，语音的控制（SIP协议），语音的传输（RTP，底层还是使用UDP协议），语音质量的保证（消除回声）等。</p>
<!-- more -->
<p>这些功能都整合到路由器上，可惜中国都法定规定不允许使用IP电话，不然打电话就便宜了。这产品是外销到外国的。但从其配置上看，比较复杂，需要专业人士，不过外国人接触的东西比较多，按照说明书的指示，应该还是能够配置成功。其配置中可以通过传统的PSTN电信的通信网通信，也可以通过互联网（VOIP）语音聊天，就是语音质量会比传统的PSTN稍微差一些。增加了一个语音模块，就增加了五个芯片，布线也变得复杂，接口也增加了好几个。</p>
<p>下午还是编程，主要是把代码改成符合编程规范，写单元测试用例，继续优化代码。还跟导师讨论了多进程的通信问题，引起了我的兴趣，我不断地看这进程通信，有很多东西还没理解，如mmap的实现机制是怎样的，如何正确地使用。</p>
<p>要学如何写Makefile文件，不然怎么对得起自己呢？</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循序渐进 步步为营]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/31/twelveth-day/"/>
    <updated>2013-07-31T00:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/31/twelveth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天写了memmove这样的函数，首先要检测内存覆盖问题，然后是考虑怎样加快移动的效率.因为传统的做法是以char一个字节的传送，而现在可以通过四个字节对齐的方式，通过int整型一次四个字节的传送。可以大大地加快了传送的效率，因为一次传送一个字节和一次传送四个字节是一样的。</p>
<!-- more -->
<p>另外是一个debuglog的模块，用链表实现，之前思路一直都不正确，之前写代码的经验又少，弄了好久才写出一个基本模型，以后要多多训练一下了，这么简单的问题都纠结了这么久，效率实在太低了。</p>
<p>我要狂练代码。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阳春白雪 下里巴人]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/29/eleventh-day/"/>
    <updated>2013-07-29T23:49:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/29/eleventh-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的讲座是编程规范，统一的代码规格有利于后面的阅读和维护。我们的组长是我们没有按照规范来写代码的话，就是能力，工作态度都不行的人。因为那些规范只要用心注意下，就应该不会出什么问题。</p>
<!-- more -->
<p>今天写代码发现写代码的能力好低，大学写的代码太少了，并且经常颓废，都不是一心一意地去解决问题，而是让问题积累。要努力写代码啦！ </p>
<p>今天总算见识了shell的厉害，以前一直都不愿意学，原来其作用还是好大的。与makeFile文件，svn和平时的工作都有密切的关系，特别是利用shell可以提高工作的效率。一步步来，一定行的，功夫不负有心人。</p>
<p>看了乔布斯的之前的采访，发现我们董事长跟我们说的话许多都是来自乔爷爷。看来乔爷爷是我们的好榜样，乔爷爷说要有点taste（品味）的，而不是什么都是随众的。乔爷爷也是很有好奇心的，并且也好有想法去解决问题。不过乔爷爷也善于学习，其实好多也都是不是乔爷爷做出来的，如图形界面，面向对象，但乔爷爷都察觉到这就是未来的方向。乔爷爷说，跟优秀的人工作很happy，也不会有太多烦恼。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[江山易改 本性难移]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/25/eighth-day/"/>
    <updated>2013-07-25T00:46:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/25/eighth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的培训讲座分别是实验室管理的规章制度和嵌入式linux的开发。我有点担心我不会使用设备，这说明我不够自信心，也不够进取，单单使用设备都学不会，那不是简直笨得无法救药，如示波器。嵌入式开发之前也接触过一点，但是知识懂点皮毛，没有耐心地去学习。</p>
<!-- more -->
<p>初略地学习shell编程，没有一本很好的书，让自己学习。那就应该要积极解决问题，从家里寄来了几本不错的书，其中有《鸟哥linux私房菜》,那就应该没借口说自己没好书学习了。</p>
<p>星期六也去打羽毛球了，虽然其中有些挫折，甚至不注意安全，这是非常不好的，又是犯一个老毛病，事前没有做好功课，连球拍的线都还没拉，就匆匆忙忙地去拉线和打球，足足迟到了一个小时，换做是另外的事情，也是这样。做事情没一点筹谋和策划，注定是没什么好结果的。</p>
<P>星期六打完球后，真是累的，可能一天吃了七个香蕉的缘故，没有消化好，都怪我没有自控能力。但是有一点是肯定的，那就是我发现我的脚痛发作了，运动会导致之前受过伤但没医好的病发作，这个就一直都是我的心病了，不过，人要看开点，小小问题也就不足挂齿。</p>
<p>星期日就要挨批了，买的书和送来的书都到了，一直在盼望，可惜到了，就什么兴奋都没有，并且也不去看了，反而看起电影来了，反而觉得电影还挺好看的，简直是愚蠢至极。现在是什么时候啦，看起《七宗罪》来啦，看起《大话西游》来啦，其实踏实做人，电影里的事情美好的事情还是会发生在现实中的，同时不好的事情也可以避免的。</p>
<p><strong>如果自己真要选择颓废的话，那我就要想想如何面对他人的嘲笑，讽刺和鄙视，还将自己看得连狗都不如，自己却无力回击，甚至他们是不学无术之人。人争一口气佛争一炷香。你能吞得下这口气？</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[惜时如金 谈笑风生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/24/seventh-day/"/>
    <updated>2013-07-24T00:02:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/24/seventh-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天的培训内容是时间管理和有效沟通。说起时间管理，如谈虎色变，心落千仗，因为之前我给自己制定目标，但是一个都没有做到，导致心情极其低落，恨透了什么时间管理，还不如没什么计划，见步走步，这样心理也踏踏实实，没有这么大的情绪起伏。其实我这种想法是错误的，因为我制定的目标是不切实际的，好高骛远的，不是可衡量的，违反了制定的目标的基本规则，反而受到时间管理的反效果，还不如顺其自然。</p>
<!-- more -->
<p>第二个内容就是有效沟通。在大学，我的说话方式就会令人误解，其实是语调和重音放得不对，说多就好了。有效沟通的关键在于听，说，问。</p>
<p>今天粗略地看了《深入理解计算机系统》的虚拟存储器，其主要功能：1.它在主存中自动缓存最近使用的存放磁盘上的虚拟地址空间的内容，对磁盘上页的引用会触发缺页，缺页将控制转移到操作系统的一个缺页处理程序。缺页处理程序将页面从磁盘拷贝到主存缓存，如果必要，将写回被驱逐的页。2.虚拟存储器简化了存储管理，进而简化了链接，在进程间共享数据，进程的存储器分配以及程序加载。3.虚拟存储器通过在每条页表条目中加入保护位，从而简化了存储器保护。</p>
<p>管理和使用虚拟存储器是一件困难和容易出错的任务。常见的错误事例：间接引用坏指针，读取未初始化的存储器，允许栈缓冲区溢出，假设指针和它们的指向的对象相同，引用指针而不是它所指向的对象，误解指针运算，引用不存在的变量，以及引起存储器泄漏。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有条不紊 处变不惊]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/22/sixth-day/"/>
    <updated>2013-07-22T23:50:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/22/sixth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今日是在tp-link的第六日，讲座的内容是邮件的使用规范。听到这个题目就有点掉以轻心，其实这个不但与自己的工作息息相关，而且很容易犯一些低级的错误。今天总算仔细学习下了，不懂地就问一下同事，涉及到使用<strong>过滤器对邮件进行分类</strong>，<strong>个人签名模版</strong>，<strong>纯文本txt与HTML格式的区别与使用</strong>，段落的格式，还有宏的使用。最终这些基础的工作都顺利完成了。</p>
<!-- more -->
<p>这一天主要是看了《深入理解计算机系统》的第五章优化程序性能，主要提到性能提高技术：1）为遇到的问题选择适当的算法和数据结构；2）避免限制优化的因素：a.消除连续的函数调用。在可能时，将计算移到循环体外；b.消除不必要的存储器引用。引入临时变量来保存结果，只有在最后的值计算出来时，才将结果存放到数组或全局变量中。3）低级优化：a.展开循环，降低开销，使进一步的优化成为可能；b.通过使用例如<strong>多个累积变量和重新组合</strong>等技术，找到方法提高指令级的并行；c.用功能的风格重写条件操作，使得编译采用条件数据传送。</p>
<p>第六章存储器层次结构，理解存储器层次结构本质，且利用它编写出更有效的程序。特别是以下技术:1)将注意力集中在<strong>内循环</strong>上，大部分计算和存储访问都发生在这里；2）通过按照数据对象存储在存储中的顺序、步长为1的来读数据，从而使得程序中的<strong>空间局部性</strong>最大；3）一旦从存储器中读入了一个数据对象，就尽可能多地使用它，从而使得程序中的<strong>时间局部性</strong>最大。</p>
<p>第七章链接。链接器主要是符号解析和重定位。符号解析将目标文件中的每个全局符号都绑定到唯一的定义，而重定位确定每个符号的最终存储地址，并修改对那些目标的引用。</p>
<p>第八章异常控制流，分为中断、故障、终止和陷阱。中断是异步发生的，是来自处理器外部的I/O设备的信号的结果。应用程序通过使用一个叫做陷阱或者系统调用的ECF形式，向操作系统请求服务。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何为系统 何为人生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知甘苦 近情理 心平气和]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/20/be-happy/"/>
    <updated>2013-07-20T23:51:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/20/be-happy</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天是星期六不用上班，在科技图书馆度过。不过，大概只看了半日的时间，又想起过去的事情来了。因为我在看的《深入理解计算机系统》，许多知识都是大学学过的，似曾相识，可惜我都没有掌握。越想，心情越不能平静下来，当想到大学居然没一件事做对的时候，自己就快要崩溃了。一直有个疑问，为什么那时候会犯这样的弥天大错？</p>
<!-- more -->
<p>过去的事情想得清楚当然去想，但不要影响自己的情绪，做一个积极的悲观主义者，Be Happy，积极去解决问题。</p>
<p>《深入理解计算机系统》的优化程序性能，存储体系结构，虚拟存储器这几章都是从程序员的角度看待计算机硬件的工作原理，利用其实现的原理，写出更加高效的程序。这几章与计算机硬件打交道，一定要看懂，作为以后工作的突破点。这本书将其作为计算机的圣经也不为过。</p>
<p>今天也有看《量子物理史话》，似乎现在没有之前那么好看了。因为我似乎心不在焉，那就先看计算机相关的吧。</p>
<p>无论日子怎么样，都要保持愉悦的心态。</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
