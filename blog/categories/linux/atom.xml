<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-10-17T04:34:25+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/regular-expression/"/>
    <updated>2013-09-26T22:44:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/regular-expression</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于pjsip函数的返回值用宏定义，Source Insight工具无法识别为函数，因此在阅读代码的时候难以找到函数的定义，给理解代码带来一定的麻烦。这正是考验自己的时候，其实遇到这样的问题很平常，解决也很简单，只是没碰到过，所以觉得无法入手。使用正则表达式，很好的解决这个问题，把宏替换，在Linux下的命令为：</p>
{% codeblock 批量替换 lang:bash %}
find . -name "<em>.[c|h]" | xargs perl -pi -e "s|PJ_DEF(([<sup>(]*))|$1|g"</sup>
{% endcodeblock %}
批量地找c和h文件，替换PJ_DEF宏，但保留参数不变。掌握正则表达式，对提高工作效率有比较大的帮助。</p>
<!-- more -->
<p>掌握正则表达式，并且配合grep，sed，awk，perl，python等工具一起使用，对于文本处理，威力就无穷大了。</p>
{% codeblock 一般的正则表达式匹配： lang:bash %}
.代表的是任意字符，</em>代表的是多个，[a-z|A-Z]代表的是字母，<sup>[list]代表的是以list开头，</sup>
[<sup>list]代表的是不是list的，[list]$代表的是以list为结尾，匹配一些特殊符号需要转义，</sup>
如(, \t;{1,15}代表的是1-15个。
{% endcodeblock %}</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何为系统 何为人生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Malloc内存管理]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/12/malloc/"/>
    <updated>2013-07-12T01:16:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/12/malloc</id>
    <content type="html"><![CDATA[<blockquote><p><p>malloc并不是从一个编译时就确定的固定大小的数组中分配空间，而是在需要的时向操作系统申请空间。因为程序中的某些地方可能不通过malloc调用申请空间（通过其它方式申请空间），因此，malloc管理的空间不一定是连续的。这样空闲存储空间以空闲块链表的方式组织，每个块包含一个长度、一个指向下一块的指针以及一个指向自身存储空间的指针。</p>
<!-- more -->
<p>当有申请请求时，malloc将扫描空闲块链表，直到找到一个足够大的块为止。该算法称为“首次适应”（first fit）；与之相对应的算法是“最佳适应”（best fit），它寻找满足条件的最小块。如果该块恰好与请求的大小相符合，则将它从链表中移走并返回给用户。如果该块太大，则将它分成两部分；大小合适的块返回给用户，剩下的部分留在空闲块链表中。如果找不到一个足够大的块，则向操作系统申请一个大块并加入到空闲块链表中。</p>
{% codeblock malloc lang:c %}
typedef long Align;     /<em>按照long类型的边界对齐</em>/</p></blockquote>

<p>union header {          /<em>块的头部</em>/</p>

<pre><code>struct {
    union header *ptr; /*空闲块链表的下一块*/
    unsigned size;        /*本块的大小*/
    }s;
Align x;                    /*强制块对齐*/
</code></pre>

<p>};</p>

<p>typedef union header Header;</p>

<p>static Header base;       /<em>从空链表开始</em>/
static Header <em>freep = NULL /</em>空闲链表的初始指针*/</p>

<p>/<em>malloc函数:通用存储分配函数</em>/
void *malloc( unsigned nbytes)
{</p>

<pre><code>Header *p, *prevp;
Header *morecore(unsigned);
unsigned nunits;

nunits = (nbytes + sizeof(Header)-1)/sizeof(Header) + 1;
if( (prevp = freep) == NULL)    /*没有空闲链表*/
    {
        base.s.ptr = freep = prevp = &amp;base;
        base.s.size = 0;
    }
for(p = prevp-&gt;s.ptr; ; prevp=p,p = p-&gt;s.ptr)
    {
        if( p-&gt;s.size &gt;= nunits)                /*足够大*/
            {
                if( p-&gt;s.size == nunits)        /*正好*/
                    prevp-&gt;s.ptr = p-&gt;s.ptr;
                else                                    /*分配末尾部分*/
                    {
                        p-&gt;s.size -= nunits;
                        p += p-&gt;s.size;
                        p-&gt;s.size = nunits;
                    }
                freep = prevp;
                return (void*)(p+1);
            }
        if(p == freep)                              /*闭环的空闲链表*/
            if((p = morecore(nunits)) == NULL)
                return NULL;                        /*没有剩余的存储空间*/
    }
</code></pre>

<p>}
{% endcodeblock %}</p>

<blockquote><p><p>函数morecore用于向操作系统请求存储空间。在设置完size字段后，morecore函数调用free函数把多余的存储空间插入到空闲区域中。</p>
{% codeblock morecore lang:c %}</p>

<h1>define NALLOC 1024</h1>

<p>/<em>morecore函数:向系统申请更多的存储空间</em>/
static Header *morecore(unsigned nu)
{</p>

<pre><code>char *cp, *sbrk(int);
Header *up;
</code></pre></blockquote>

<pre><code>cp = sbrk(nu*sizeof(Header));
if ( cp == (char *) - 1)    /*没有空间*/
    return NULL;
up = (Header *)cp;
up-&gt;s.size = nu;
free((void*)(up+1));
return freep;
</code></pre>

<p>}
{% endcodeblock %}</p>

<blockquote><p><p>free函数从freep指向的地址开始，逐个扫描空闲块链表，寻找可以插入空闲块的地方。该位置可能在两个空闲块之间，也可能在链表的末尾。在任何一种情况下，如果被释放的块与另一空闲块相邻，则将这两个块合并起来。合并两个块的操作很简单，只需要设置指针指向正确的位置，并设置正确的块大小就可以了。</p>
{% codeblock free lang:c %}
/<em>free函数:将块ap放入空闲块链表中</em>/
void free(void *ap)
{</p>

<pre><code>Header *bp, *p;
</code></pre></blockquote>

<pre><code>bp = (Header *)ap -1;                   /*指向块头*/
for ( p = freep; !(bp &gt; p &amp;&amp; bp &lt; p-&gt;s.ptr); p = p-&gt;s.ptr)
    if( p &gt;= p-&gt;s.ptr &amp;&amp; (bp &gt;p || bp &lt; p-&gt;s.ptr))
        break;                                /*被释放的块在链表的开头或末尾*/

if( bp + bp-&gt;s.size == p-&gt;s.ptr)   /*与上一相邻块合并*/
    {
        bp-&gt;s.size += p-&gt;s.ptr-&gt;s.size;
        bp-&gt;s.ptr = p-&gt;s.ptr-&gt;s.ptr;
    }
else
    bp-&gt;s.ptr = p-&gt;s.ptr;
if(p + p-&gt;s.size == bp)             /*与下一相邻块合并*/
    {
        p-&gt;s.size += bp-&gt;s.size;
        p-&gt;s.ptr = bp-&gt;s.ptr;
    }
else
    p-&gt;s.ptr = bp;
freep = p;
</code></pre>

<p>}
{% endcodeblock %}</p>

<blockquote><p><p>typedef和union的使用解决了地址对齐（假定sbrk返回的是合适的指针)问题</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/11/linux-command/"/>
    <updated>2013-07-11T00:39:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/11/linux-command</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux的命令种类繁多，但掌握方法和规则，记住常用的命令，不懂的用man来查询。</p>
<p>1.解压.tar.xz:        tar Jxvf xxx.tar.xz</p>
<p>2.解压7z：       7z x filename.7z</p>
<!-- more -->
<p>3.统计源代码的行数：</p>
{% codeblock  lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>find . -name '<em>.c' -o -name '</em>.h' | xargs wc -l
find . -name '<em>.c' -o -name '</em>.h' | xargs cat | sed '/<sup>\s*$/d'</sup> | wc -l
cloc ./
{% endcodeblock %}
<p>4.grep命令：grep (regular pattern) (input file)</p>
<p>使用 grep 抓取匹配关键字附近的行, 有时我们会对 grep 匹配关键字附近的行感兴趣（这有点上下文的味道），使用 -A、-B、以及 -C 选项可以满足我们的愿望。</p>
<p>grep -A <n> 'keyword' file # 匹配 keyword 的下 n 行</p>
<p>grep -B <n> 'keyword' file # 匹配 keyword 的上 n 行</p>
<p>grep -C <n> 'keyword' file # 匹配 keyword 的上 n 行及下 n 行</p>
<p>5.apt-get命令</p>
{% codeblock  lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>apt-cache search ‹name› # find package ‹name› for install by “apt-get”
apt-cache show ‹name›   # describe package ‹name›
apt-get install ‹name›  # install a new program. (usually used with sudo in front)
apt-get remove ‹name›   # remove (un-install) a program.
apt-get purge ‹name›    # remove a program and its config files.
dpkg -l # list all installed packages
{% endcodeblock %}
<p>6.反向解析域名:host 0.0.0.0</p>
<p>7.得到本机ip:</p>
{% codeblock  lang:bash %}
ifconfig | awk '/inet addr:/ {print $2}' | awk -F: '{if ($2 != "127.0.0.1") print $2}'
ifconfig | sed -rn 's/.<em>r:([^ ]+) .</em>/\1/p'
{% endcodeblock %}
<p>8.创建目录：mkdir {1..50}；创建文件：touch {1..50}；</p>
<p>9.对打开端口进行检查：netstat -an | grep --color -i -E 'listen|listening'</p>
<p>netstat -tlnp</p>
<p>10.找到超过100M的文件：find . -type f -size +100M</p>
<p>11.删除文件：rm !(<em>.foo|</em>.bar|*.baz)</p>
<p>12.快速重命名：mv filename.{old,new} </p>
<p>13.终止进程：killall -KILL 进程名称 | killall -signal process | kill -SIGKILL processID</p>
<p>14.成为Ubuntu超级用户：sudo passwd root 新建root用户</p>
<p>15.寻找文件：find 路径名（path） 参数（根据文件名称-name、类型-type、权限-perm、修改世间-atime） 模式匹配</p>
<p>16.使某个配置文件立即生效：source /etc/profile</p>
<p>17.打开或关闭某项服务:service 某项服务（iptables） on|stop</p>
<p>18.查看系统进程占用资源的工具：top,ps,free,vmstat,iostat,pmap</p>
<p>19.找到某个进程的ID：ps -aux | grep processname </p>
<p>20.根据目录下文件的大小排序输出：du -hs * | sort -h </p>
<p>21.查看当前目录下文件的个数：ls -l | grep "<sup>-"</sup> | wc -l 查看当前目录下文件的个数，包括子目录里的：ls -lR | grep "<sup>-"</sup> | wc -l 查看某目录下文件夹（目录）的个数，包括子目录里的：ls -lR | grep "<sup>d"</sup> | wc -l</p>
<p>22.设置文件及文件夹权限：chmod -R 664 文件夹名称 （赋予文件属主和同组用户读、写权限，其他用户只读权限),文件夹和其目录下的文件都被设置了相同的664权限,u代表的是与文件属主拥有一样的权限</p>
<p>23.Shell删除目录下的无效链接</p>
{% codeblock  lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>link=<code>find . -type l</code>
echo $link
for i in $link;</p>

<pre><code>do
if [ ! -f $i ]; then
    rm $i ;
fi ;
done
</code></pre>

<p>{% endcodeblock %}
<p>24.shell给可执行的文件创建链接</p>
{% codeblock  lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>mkdir -p  ./exelink
cd exelink
link=<code>find ../ -type f -perm -111 </code>
for i in $link ;</p>

<pre><code>do
if [  -f $i ] ; then
    echo $i
    link  $i `echo $i | sed 's,.*/,,'` 
fi ;
done
</code></pre>

<p>{% endcodeblock %}
<p>25.根据不同的时段输出不一样的欢迎词</p>
{% codeblock  lang:bash %}</p>

<h1>!/bin/bash</h1>

<p>HH=<code>date +%k</code>
echo $HH
if [ ${HH} -ge 0 ]&amp;&amp;[ ${HH} -lt 12 ] ; then</p>

<pre><code>  echo "Good Morning `whoami`";
</code></pre>

<p>elif [ ${HH} -ge 12 ]&amp;&amp;[ ${HH} -l 18 ]; then</p>

<pre><code>  echo "Good Afternoon `whoami`"
</code></pre>

<p>else</p>

<pre><code>  echo "Good Evening `whoami`"
</code></pre>

<p>fi;
{% endcodeblock %}</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread线程同步]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/10/thread/"/>
    <updated>2013-07-10T15:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/10/thread</id>
    <content type="html"><![CDATA[<blockquote><p><p>线程包含了表示进程内执行环境必需的信息，其中包含进程中标识线程的线程ID、一组寄存器、栈、调度优先级和策略、信号屏蔽字、errno变量以及线程私有数据。进程的所有信息对该进程的所有线程都是共享的，包括可执行的程序文本、程序的全局内存和堆内存、栈以及文件描述符。</p>
<!-- more -->
<p>进程原语和线程原语的比较:</p>
<p><table border="1">
<tr><th>进程原语       |</th><th>  线程原语        |</th><th>描述        </th></tr>
<tr><td>fork       |</td><td>pthread_create    |</td><td>创建新的控制流 </td></tr>
<tr><td>exit       |</td><td>pthread_exit      |</td><td>从现有的控制流退出   </td></tr>
<tr><td>waitpid        |</td><td>pthread_join  |</td><td>从控制流中得到退出的状态  </td></tr>
<tr><td>atexit     |</td><td>pthread_cleanup_push|</td><td>注册在退出控制流时调用的函数  </td></tr>
<tr><td>getpid     |</td><td>pthread_self      |</td><td>获取控制流的ID  </td></tr>
<tr><td>abort      |</td><td>pthread_cancel    |</td><td>请求控制流的非正常退出 </td></tr>
</table></p>
<p>当多个控制进程共享相同的内存时，就需要线程同步机制，以保证它们在访问变量的存储内容时不会访问到无效的数值。线程同步机制：</p>
<p><strong>1.互斥量</strong>,互斥量从本质上来说是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量上的锁。</p>
{% codeblock 互斥量 lang:c %}</p>

<h1>include &lt;pthread.h></h1>

<p>int pthread_mutex_init(pthread_mutex_t *restrict mutex,</p>

<pre><code>            const pthread_mutexattr_t *restrict attr);
</code></pre>

<p>int pthread_mutex_destroy(pthread_mutex_t <em>mutex);
int pthread_mutex_lock(pthread_mutex_t </em>mutex);
int pthread_mutex_trylock(pthread_mutex_t <em>mutex);
int pthread_mutex_unlock(pthread_mutex_t  </em>mutex);
{% endcodeblock %}
<p><strong>2.读写锁</strong>,当读操作比较频繁时，读写锁可以改善性能。 </p>
{% codeblock 读写锁例子 lang:c %}</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;pthread.h></h1>

<p>struct job {</p>

<pre><code>struct job *j_next;
struct job *j_prev;
pthread_t    j_id;          /*告诉哪条线程在操作任务*/
/*...更多的定义在后面*/
</code></pre>

<p>};</p></blockquote>

<p>struct queue {</p>

<pre><code>struct job *q_head;
struct job *q_tail;
pthread_rwlock_t q_lock;
</code></pre>

<p>};</p>

<p>/<em>初始化队列</em>/
int queue_init(struct queue *qp)
{</p>

<pre><code>int err;

qp-&gt;q_head = NULL;
qp-&gt;q_tail =  NULL;
err = pthread_rwlock_init(&amp;qp-&gt;q_lock, NULL);
if ( err != 0)
    return (err);
/*...继续初始化*/
return (0);
</code></pre>

<p>}</p>

<p>/<em>在队列的前面插入一个任务</em>/
void job_insert( struct queue <em>qp, struct job </em>jp)
{</p>

<pre><code>pthread_rwlock_wrlock(&amp;qp-&gt;q_lock);
jp-&gt;j_next = qp-&gt;q_head;
jp-&gt;j_prev = NULL;
if( qp-&gt;q_head != NULL)
    qp-&gt;q_head-&gt;j_prev = jp;
else 
    qp-&gt;q_tail = jp;     /*队列是空的*/
qp-&gt;q_head = jp;
pthread_rwlock_unlock(&amp;qp-&gt;q_lock);
</code></pre>

<p>}</p>

<p>/<em>在队列的尾部添加一个任务</em>/
void job_append(struct queue <em>qp, struct job </em>jp)
{</p>

<pre><code>pthread_rwlock_wrlock(&amp;qp-&gt;q_lock);
jp-&gt;j_next = NULL;
jp-&gt;j_prev = qp-&gt;q_tail;
if( qp-&gt;q_tail != NULL)
    qp-&gt;q_tail-&gt;j_next = jp;
else
    qp-&gt;q_head = jp;   /*队列是空的*/
qp-&gt;tail = jp;
pthread_rwlock_unlock(&amp;qp-&gt;q_lock);
</code></pre>

<p>}</p>

<p>/<em>在队列中删除一个任务</em>/
void job_remove(struct queue <em>qp, struct job </em>jp)
{</p>

<pre><code>pthead_rwlock_wrlock(&amp;qp-&gt;q_lock);
if( jp == qp-&gt;q_head)
    {
        qp-&gt;q_head = jp-&gt;j_next;
        if( qp-&gt;tail == jp)
            qp-&gt;q_tail = NULL;
    }
else if( jp == qp-&gt;q_tail)
    {
        qp-&gt;q_tail = jp-&gt;j_prev;
        if( qp-&gt;q_head == jp)
            qp-&gt;q_head = NULL;
    }
else
    {
        jp-&gt;j_prev-&gt;j_next = jp-&gt;j_next;
        jp-&gt;j_next-&gt;j_prev = jp-&gt;j_prev;
    }
   pthread_rwlock_unlock(&amp;qp-&gt;q_lock);
</code></pre>

<p>}</p>

<p>/<em>在队列中根据线程找到任务</em>/
struct job <em>job_find( struct queue </em>qp, pthread_t id)
{</p>

<pre><code>struct job *jp;

if ( pthread_rwlock_rdlock(&amp;qp-&gt;q_lock) != 0)
    return (NULL);

for( jp = qp-&gt;q_head; jp != NULL; jp = jp-&gt;j_next)
    if( pthread_equal(jp-&gt;j_id, id))
        break;

pthread_rwlock_unlock(&amp;qp-&gt;q_lock);
return (jp);
</code></pre>

<p>}
{% endcodeblock %}</p>

<blockquote><p><p><strong>3.条件变量</strong>，条件变量与互斥量一起使用，允许线程以无竞争的方式等待特定的条件发生。</p>
{% codeblock 互斥量 lang:c %}</p>

<h1>include &lt;pthread.h></h1>

<p>int pthread_cond_init(pthread_cond_t *restrict cond,</p>

<pre><code>                  pthread_condattr_t *restrict attr);
</code></pre>

<p>int pthread_cond_destroy(pthread_cond_t <em>cond);
int pthread_cond_wait(pthread_cond_t </em>restrict cond, pthread_mutex_t <em>restrict mutex);
int pthread_cond_signal(pthread_cond_t </em>cond);
int pthread_cond_broadcast(pthread_cond_t *cond);
{% endcodeblock %}
<p>线程的基本的同步机制：互斥、读写锁及条件变量,了解如何使用它们保护共享资源。</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
