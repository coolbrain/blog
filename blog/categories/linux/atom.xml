<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2014-03-07T23:26:28+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux防止僵尸进程]]></title>
    <link href="http://coolbrain.github.com/blog/2014/03/07/zombie-process/"/>
    <updated>2014-03-07T22:37:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/03/07/zombie-process</id>
    <content type="html"><![CDATA[<blockquote><p><p>平时如果不太注意创建子进程的处理，有可能会导致僵尸进程，以至于有一天系统无法创建进程，超过系统允许的最大进程数。如果不捕捉SIGCHLD信号，子进程退出时，系统默认释放进程的内核结构。如果捕捉了，但父进程没有调用wait或waitpid等函数获取子进程的退出状态，那么在父进程还没有退出时，子进程就会成为僵尸进程。另外一种情况，由于linux信号不等待，可能丢失了信号，父进程也没有获取子进程的退出状态。</p>
<!-- more -->
{% codeblock linux防止僵尸进程的代码 lang:c %}</p>

<h1>include &lt;sys/wait.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;errno.h></h1></blockquote>

<p>void sig_child(int signo)
{</p>

<pre><code>pid_t pid;
</code></pre>

<p>//解决信号不排队的状况，假如两个子进程同时退出，信号SIGCHLD只有一个，通过while俩防止出现这种情况</p>

<pre><code>while ((pid = waitpid(-1, NULL, 0)) &gt; 0)
{
    printf("Handler reaped child %d\n", (int)pid);
}

if (errno != ECHILD)
{
    printf("waitpid error\n");
}
sleep(2);

return;
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>int index, n;
char buf[1024];
pid_t pid;
</code></pre>

<p>//建立SIGCHLD信号处理函数，获取子进程的退出状态，防止出现僵尸进程</p>

<pre><code>if(signal(SIGCHLD, sig_child) == SIG_ERR)
{
    printf("signal error\n");
}

for (index = 0; index &lt; 3; index++)
{
    if((pid = fork()) == 0)
    {
        printf("Hello from child %d\n", (int)getpid());
        sleep(1);
        exit(0);
    }
}
</code></pre>

<p>//处理慢系统调用被信号打断的情况</p>

<pre><code>while ((n = read(STDIN_FILENO, buf, sizeof(buf))) &lt; 0)
{
    if (errno != EINTR)
    {
        printf("read error\n");

    }
}

printf("Parent processing input\n");

while (1);
exit(0);
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[popen函数执行程序]]></title>
    <link href="http://coolbrain.github.com/blog/2014/03/07/popen/"/>
    <updated>2014-03-07T22:37:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/03/07/popen</id>
    <content type="html"><![CDATA[<blockquote><p><p>使用linux定时器可以定时的处理一些事务或者定时的发出一些信号，如SIGALRM，SIGINT，SIGQUIT等信号。</p>
<!-- more -->
{% codeblock popen函数代码 lang:c %}</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;sys/wait.h></h1></blockquote>

<h1>define     MAX_FD      1024</h1>

<p>static pid_t *childPid = NULL;</p>

<p>FILE <em>popen_cmd(const char </em>pCmd, const char *pType)
{</p>

<pre><code>int index;
pid_t pid;
int pipeFd[2];
FILE *pFile;

if (pCmd != NULL &amp;&amp; *pType != 'r' &amp;&amp; *pType != 'w' &amp;&amp; pType[1] != '\0')
{
    errno = EINVAL;
    return NULL;
}

if (childPid == NULL)
{
    childPid = (pid_t *)calloc(MAX_FD, sizeof(pid_t));
    if (childPid == NULL)
    {
        return NULL;
    }
}

if (pipe(pipeFd) &lt; 0)
{
    return NULL;
}

if ((pid = fork()) &lt; 0)
{
    return NULL;
}
else if (pid == 0)
{
    //type是对父进程而言，当为'r'时，子进程应该关闭读端.
    if (*pType == 'r')
    {
        close(pipeFd[0]);
        // 把STDOUT_FILENO重定向pipeFd[1]
        dup2(pipeFd[1], STDOUT_FILENO);
        close(pipeFd[1]);
    }
    else 
    {
        close(pipeFd[1]);
        dup2(pipeFd[0], STDIN_FILENO);
        close(pipeFd[0]);
    }

    for (index = 0; index &lt; MAX_FD; index++)
    {
        if (childPid[index] &gt; 0)
        {
            close(index);
        }
    }

    execl("/bin/sh", "sh", "-c", pCmd, (char *)0);
    _exit(127);
}
else
{
    if (*pType == 'r')
    {
        close(pipeFd[1]);
        if ((pFile = fdopen(pipeFd[0], pType)) == NULL)
        {
            return NULL;
        }
    }
    else
    {
        close(pipeFd[0]);
        if ((pFile = fdopen(pipeFd[1], pType)) == NULL)
        {
            return NULL;
        }
    }
}
childPid[fileno(pFile)] = pid;

return pFile;
</code></pre>

<p>}</p>

<p>int pclose_cmd(FILE *pFile)
{</p>

<pre><code>int fd, status;
pid_t pid;

if (childPid == NULL || pFile == NULL)
{
    goto error;

}

fd = fileno(pFile);
if ((pid = childPid[fd]) == 0)
{
    goto error;
}

childPid[fd] = 0;
if (fclose(pFile) == EOF)
{
    return -1;
}

while (waitpid(pid, &amp;status, 0) &lt; 0)
{
    if (errno != EINTR)
    {
        return -1;
    }
}
</code></pre>

<p>error:</p>

<pre><code>errno = EINVAL;
return -1;
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>char line[256] = {0};
FILE *pFile;

pFile = popen_cmd("ifconfig eth0", "r");
if (pFile != NULL)
{
    while (fgets(line, 256, pFile) != NULL)
    {
        printf("%s", line);
    }
    pclose_cmd(pFile);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux定时器]]></title>
    <link href="http://coolbrain.github.com/blog/2014/03/07/timer/"/>
    <updated>2014-03-07T22:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/03/07/timer</id>
    <content type="html"><![CDATA[<blockquote><p><p>使用linux定时器可以定时的处理一些事务或者定时的发出一些信号，如SIGALRM，SIGINT，SIGQUIT等信号。</p>
<!-- more -->
{% codeblock linux定时器的代码 lang:c %}</p></blockquote>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;time.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;sys/time.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); } while (0)</h1>

<p>static void sig_handler(int sig, siginfo_t <em>si, void </em>uc)
{</p>

<pre><code>printf("Caught signal %d\n", sig);
</code></pre>

<p>}</p>

<p>int main(int argc, char *argv[])
{</p>

<pre><code>timer_t timerid;
struct sigevent sev;
struct itimerspec its;
sigset_t newMask, oldMask;
struct sigaction sa;

sa.sa_flags = SA_SIGINFO;
sa.sa_sigaction = sig_handler;
sigemptyset(&amp;sa.sa_mask);
if (sigaction(SIGINT, &amp;sa, NULL) == -1)
{
   errExit("sigaction");
}

sigemptyset(&amp;newMask);
sigaddset(&amp;newMask, SIGINT);
if (sigprocmask(SIG_BLOCK, &amp;newMask, &amp;oldMask) == -1)
{
   errExit("sigprocmask");
}

sev.sigev_notify = SIGEV_SIGNAL;
sev.sigev_signo = SIGINT;
sev.sigev_value.sival_ptr = &amp;timerid;
if (timer_create(CLOCK_REALTIME, &amp;sev, &amp;timerid) == -1)
{
   errExit("timer_create");
}

its.it_value.tv_sec = 1;
its.it_value.tv_nsec = 0;
its.it_interval.tv_sec = its.it_value.tv_sec;
its.it_interval.tv_nsec = its.it_value.tv_nsec;

if (timer_settime(timerid, 0, &amp;its, NULL) == -1)
{
    errExit("timer_settime");
}

if (sigprocmask(SIG_SETMASK, &amp;oldMask, NULL) == -1)
{
   errExit("sigprocmask");
}
while(1)
{
    sleep(10);
}
return 0;
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux信号处理的应用]]></title>
    <link href="http://coolbrain.github.com/blog/2014/03/07/system-sleep/"/>
    <updated>2014-03-07T22:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/03/07/system-sleep</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux的system和sleep都涉及到信号的处理，以下是关于在实现system函数和sleep所涉及到的原理。</p>
<p>1.每个进程只有一个闹钟时钟，alarm；且alarm和setitimer共享一个定时器，因此它们会互相干扰。不过通过timer_create和timer_settime可以创建定时器和设置定时器，同时所发送的信号不限定于SIGALRM，可以是其它的SIGINT，SIGQUIT等信号。</p>
<!-- more -->
<p>2.sigsuspend(sigset_t *set)阻塞等待不再集合set的信号，并且调用对应的信号处理函数。sigsuspending保留发生的信号；</p>
<p>3.sigprocmask屏蔽信号集或打开信号集，返回之前的信号集，以用于未来还原到原来的状态。</p>
<p>4.sigaction设置信号对应的信号处理函数，和返回之前的信号处理函数，以便于未来还原到原来的处理信号处理函数</p>
<p>5.sleep可以被各种信号打断</p>
<p>6.信号实现父子进程间的同步，sigsuspend</p>
<p>7.popen创建管道，fork产生一个子进程，关闭管道的不使用端，执行一个shell以运行命令，然后等待命令结束</p>
<p>8.pipe(fd)管道是半双工的，socketpair域套接字是全双工的</p>
{% codeblock system和sleep函数 lang:c %}</p>

<h1>include &lt;signal.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;time.h></h1>

<h1>include &lt;sys/wait.h></h1>

<h1>include &lt;sys/time.h></h1></blockquote>

<p>void sig_alarm(int signo)
{</p>

<pre><code>printf("catch SIGALRM in sleep_cmd\n");
</code></pre>

<p>}</p>

<p>void sig_real_alarm(int signo)
{</p>

<pre><code>printf("catch real SIGALRM\n");
</code></pre>

<p>}</p>

<p>int system_cmd(const char *pCmd)
{</p>

<pre><code>pid_t pid;
int status;
sigset_t newMask, oldMask;
struct sigaction currAction, oldAction;

if (pCmd == NULL)
{
    return 1;
}
currAction.sa_handler = SIG_IGN;
currAction.sa_flags = 0;
sigemptyset(&amp;currAction.sa_mask);

if (sigaction(SIGINT, &amp;currAction, &amp;oldAction) &lt; 0)
{
    return (-1);
}
if (sigaction(SIGQUIT,&amp;currAction, &amp;oldAction) &lt; 0)
{
    return (-1);
}

sigemptyset(&amp;newMask);
sigemptyset(&amp;oldMask);
sigaddset(&amp;newMask, SIGCHLD);
if (sigprocmask(SIG_BLOCK, &amp;newMask, &amp;oldMask) &lt; 0)
{
    return (-1);
}

if ( (pid = fork()) &lt; 0)
{
    status = -1;
}
else if (pid == 0)
{
    sigaction(SIGINT, &amp;oldAction, NULL);
    sigaction(SIGQUIT, &amp;oldAction, NULL);
    sigprocmask(SIG_SETMASK, &amp;oldMask, NULL);
    execl("/bin/bash", "sh", "-c", pCmd, (char*)0);
    _exit(127);
}
else 
{
    while (waitpid(pid, &amp;status, 0) &lt; 0)
    {
        if (errno != EINTR)
        {
            status = -1;
            break;
        }
    }
}

if (sigaction(SIGINT, &amp;oldAction, NULL) &lt; 0)
{
    return (-1);
}
if (sigaction(SIGQUIT, &amp;oldAction, NULL) &lt; 0)
{
    return (-1);
}
if (sigprocmask(SIG_SETMASK, &amp;oldMask, NULL) &lt; 0)
{
    return (-1);
}
return (status);
</code></pre>

<p>}</p>

<p>//sleep_cmd未处理与以前设置的闹钟的交互作用, 现在的处理会使之前设置的闹钟失效
unsigned int sleep_cmd(unsigned int nsec)
{</p>

<pre><code>sigset_t newMask, oldMask, suspendMask;
struct sigaction newAction, oldAction;
unsigned int uslept;

newAction.sa_handler = sig_alarm;
sigemptyset(&amp;newAction.sa_mask);
newAction.sa_flags = 0;
if (sigaction(SIGALRM, &amp;newAction, &amp;oldAction) &lt; 0)
{
    printf("set SIGALRM new action error\n");
}

sigemptyset(&amp;newMask);
sigaddset(&amp;newMask, SIGALRM);
sigprocmask(SIG_BLOCK, &amp;newMask, &amp;oldMask);

alarm(nsec);

suspendMask = oldMask;
sigdelset(&amp;suspendMask, SIGALRM);   //不阻塞SIGALRM
sigsuspend(&amp;suspendMask);

uslept = alarm(0);

if (sigaction(SIGALRM, &amp;oldAction, NULL) &lt; 0)
{
    printf("set SIGALRM old Action error\n");
}
sigprocmask(SIG_SETMASK, &amp;oldMask, NULL);

return uslept;
</code></pre>

<p>}</p>

<p>int main(int argc, char **argv)
{</p>

<pre><code>int index = 1;
int cmdLen = 0;
unsigned int remainSec = 0;
char cmdBuff[1024] = {0};
//struct itimerval its;
struct itimerspec itms;
struct sigaction sigAction;
timer_t timerid;
struct sigevent sev;

if (argc &lt;= 1)
{
    printf("no cmd of argv\n");
    return 0;
}
for (index = 1; index &lt; argc; index++)
{
    sprintf(cmdBuff + cmdLen, "%s ", argv[index]);
    cmdLen += strlen(argv[index]) + 1;
}
cmdBuff[cmdLen] = '\0';
printf("%s\n", cmdBuff);

system_cmd(cmdBuff);

sigAction.sa_handler = sig_real_alarm;
sigemptyset(&amp;sigAction.sa_mask);
sigAction.sa_flags = 0;
sigaction(SIGALRM, &amp;sigAction, NULL);

/*
its.it_value.tv_sec = 1;
its.it_value.tv_usec = 0;
its.it_interval.tv_sec = 1;
its.it_interval.tv_usec = 0;
if (setitimer(ITIMER_REAL, &amp;its, NULL)) 
{
    printf("set timer error\n");
}*/
//setitimer 与 alarm共用一个定时器，互相干扰。
//创建定时器，发送的信号为SIGALRM
sev.sigev_notify = SIGEV_SIGNAL;
sev.sigev_signo = SIGALRM;
sev.sigev_value.sival_ptr = &amp;timerid;
if (timer_create(CLOCK_REALTIME, &amp;sev, &amp;timerid) == -1)
{
   printf("timer_create error\n");
}

itms.it_value.tv_sec = 1;
itms.it_value.tv_nsec = 0;
itms.it_interval.tv_sec = itms.it_value.tv_sec;
itms.it_interval.tv_nsec = itms.it_value.tv_nsec;

//设置定时器
if (timer_settime(timerid, 0, &amp;itms, NULL) == -1)
{
    printf("timer_settime error\n");
}

remainSec = sleep_cmd(5);
printf("remain second: %d\n", remainSec);

/*setitimer(ITIMER_REAL, &amp;its, NULL);*/

while(1)
{
    sleep(10);
    raise(SIGKILL);
}
return 0;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[shell自动打包修改文件]]></title>
    <link href="http://coolbrain.github.com/blog/2014/03/07/get-changed-file/"/>
    <updated>2014-03-07T22:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/03/07/get-changed-file</id>
    <content type="html"><![CDATA[<blockquote><p><p>每一次写完代码，都需要将代码发给项目负责人合入到svn上。但时间一长，自己就连修改了哪些源文件也不知道了。于是思来想去，还是写一个靠谱的脚本好一些，这样可以减轻脑力的负担，以后这样繁琐的工作就留给脚本去做了，不亦乐哉，所谓穷则思变。</p>
<!-- more -->
{% codeblock 查找修改的文件 lang:bash %}</p>

<h1>!/bin/bash</h1></blockquote>

<h1>查找在一段时间内修改过的.c和.h文件，并把其导出到对应的目录下</h1>

<p>read -p "please input the file which you want to search the modified: "   searchFile
read -p "please input the file which you want to save: "    modifydir
read -p "please input the range day of the file modified: "  withinDay</p>

<p>if [ "$searchFile" == "" ]; then</p>

<pre><code>searchFile=linux_bcm9970v1
</code></pre>

<p>fi</p>

<p>if [ "$modifydir" == "" ]; then</p>

<pre><code>modifydir=linux_work
</code></pre>

<p>fi</p>

<p>if [ "$withinDay" == "" ]; then</p>

<pre><code>withinDay=2
</code></pre>

<p>fi</p>

<p>[ -d $modifydir ] &amp;&amp; rm -rf $modifydir &amp;&amp; rm -rf $modifydir.tar.gz
mkdir -p $modifydir
current_dir=$(pwd)</p>

<p>findlist=$(find $current_dir/$searchFile -name "*.[ch]" -mtime  -$withinDay -print)</p>

<p>for list in $findlist
do</p>

<pre><code>realPath=$(echo $list | sed s/$searchFile/$modifydir/g | sed 's/\/[a-zA-Z0-9_]*\.[ch]//g' )
[ -d $realPath ] || mkdir -p $realPath
cp $list $realPath
</code></pre>

<p>done</p>

<p>tar -zcvf $modifydir.tar.gz $modifydir
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
