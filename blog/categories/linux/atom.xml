<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2014-02-23T16:06:04+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[nginx服务器 性能至上]]></title>
    <link href="http://coolbrain.github.com/blog/2014/02/23/nginx-web-server/"/>
    <updated>2014-02-23T11:31:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/02/23/nginx-web-server</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iptables 瑞士军刀]]></title>
    <link href="http://coolbrain.github.com/blog/2014/02/23/iptables-firewall/"/>
    <updated>2014-02-23T11:30:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/02/23/iptables-firewall</id>
    <content type="html"><![CDATA[<blockquote><p><p>netfilter/iptables可以配置有状态的防火墙。iptables设置filter过滤表，nat转发表，mangle修改数据包的表。</p>
<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>iptables设置的防火墙规则  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;! /bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;1.输入相关参数&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;EXTIF<span class="o">=</span><span class="s2">&quot;eth0&quot;</span>
</span><span class='line'><span class="nv">INIF</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">INNET</span><span class="o">=</span><span class="s2">&quot;&quot;</span>&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;export EXTIF INIF INNET&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;2.设置内核的网络功能&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo <span class="s2">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/tcp_syncookies
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &gt; /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;3.清除规则，设置默认策略和开放lo&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;iptables -F
</span><span class='line'>iptables -X
</span><span class='line'>iptables -Z
</span><span class='line'>iptables -P INPUT DROP
</span><span class='line'>iptables -P OUTPUT ACCEPT
</span><span class='line'>iptables -P FORWARD ACCEPT
</span><span class='line'>iptables -A INPUT -i lo -j ACCEPT
</span><span class='line'>iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;4.启动额外的防火墙script模块&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> -f /usr/local/iptables/iptables.deny <span class="o">]</span> ; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sh /usr/local/iptables/iptables.deny
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;5.允许其它类型的icmp包进入&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AICMP<span class="o">=</span><span class="s2">&quot;0 3 3/4 4 11 12 14 16 18&quot;</span>
</span><span class='line'><span class="k">for </span>typeicmp in <span class="nv">$AICMP</span>
</span><span class='line'><span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;iptables -A INPUT -i <span class="nv">$EXTIF</span> -p icmp --icmp-type <span class="nv">$typeicmp</span> -j ACCEPT
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;6.允许某些服务进入&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 21 --sport 1024:65535 -j ACCEPT  <span class="c">#FTP</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 22 --sport 1024:65535 -j ACCEPT  <span class="c">#SSH</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 25 --sport 1024:65535 -j ACCEPT  <span class="c">#SMTP</span>
</span><span class='line'>iptables -A INPUT -p UDP -i <span class="nv">$EXTIF</span> --dport 53 --sport 1024:65535 -j ACCEPT  <span class="c">#DNS</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 53 --sport 1024:65535 -j ACCEPT  <span class="c">#DNS</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 80 --sport 1024:65535 -j ACCEPT  <span class="c">#WWW</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 110 --sport 1024:65535 -j ACCEPT  <span class="c">#POP3</span>
</span><span class='line'>iptables -A INPUT -p TCP -i <span class="nv">$EXTIF</span> --dport 443 --sport 1024:65535 -j ACCEPT  <span class="c">#HTTPS&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;7.先加载有用的模块&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;modules<span class="o">=</span><span class="s2">&quot;ip_tables iptable_nat ip_nat_ftp ip_nat_irc ip_conntrack ip_conntrack_ftp ip_conntrack_irc&quot;</span>
</span><span class='line'><span class="k">for </span>mod in <span class="nv">$modules</span>
</span><span class='line'><span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;testmod<span class="o">=</span><span class="sb">`</span>lsmod | grep <span class="s2">&quot;^${mod}&quot;</span> | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$testmod&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>modprobe <span class="nv">$mod</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;8.清除nat table的规则&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;iptables -F -t nat
</span><span class='line'>iptables -X -t nat
</span><span class='line'>iptables -Z -t nat
</span><span class='line'>iptables -t nat -P PREROUTING ACCEPT
</span><span class='line'>iptables -t nat -P POSTROUTING ACCEPT
</span><span class='line'>iptables -t nat -P OUTPUT ACCEPT&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;9.若有内部接口的存在（双网卡）开放成为路由器，且为ip分享器&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[</span> <span class="s2">&quot;$INIF&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> ; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;iptables -A INPUT -i <span class="nv">$INIF</span> -j ACCEPT
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &amp;gt;  /proc/sys/net/ipv4/ip_forward
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$INNET&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">    for </span>innet in <span class="nv">$INNET</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'><span class="k">        </span>iptables -t nat -A POSTROUTING -s <span class="nv">$innet</span> -o <span class="nv">$EXTIF</span> -j MASQUERADE
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初入门规 shell编程]]></title>
    <link href="http://coolbrain.github.com/blog/2014/02/23/shell-programme/"/>
    <updated>2014-02-23T11:29:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2014/02/23/shell-programme</id>
    <content type="html"><![CDATA[<blockquote><p><p>shell脚本在工作中可以大大提高工作的效率。因此学习shell是非常有必要的。</p>
<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>常见的linux命令  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;! /bin/bash&lt;/h1&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;find / -name *.sh -exec wc -c <span class="o">{}</span> <span class="se">\;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-exec 执行简单的命令，最好还是使用xargs来代替&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find . -type f -perm 664 -exec ls -l <span class="o">{}</span> <span class="se">\;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find . -type f -print | xargs grep <span class="s2">&quot;module&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find . -size +1000000c -print&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;获取ipv4和ipv6的ip地址&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ifconfig eth0 | grep inet | sed <span class="s1">&#39;s/&lt;sup&gt;.*&lt;/sup&gt; addr://g&#39;</span> | sed <span class="s1">&#39;s/Bcast.&lt;em&gt;$//g&#39;</span> | sed <span class="s1">&#39;s/Scope.&lt;/em&gt;$//g&#39;</span> | sed <span class="s1">&#39;s/&lt;sup&gt;[&lt;/sup&gt; ]*//g&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;获取ipv4的地址&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ifconfig eth0 | grep <span class="s2">&quot;inet addr:&quot;</span> | awk <span class="s1">&#39;{ print $2 }&#39;</span> | cut -c 6- | sed <span class="s1">&#39;s/[0-9|.]*/ipv4 addr:\n&amp;amp;/g&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/regular-expression/"/>
    <updated>2013-09-26T22:44:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/regular-expression</id>
    <content type="html"><![CDATA[<blockquote><p><p>由于pjsip函数的返回值用宏定义，Source Insight工具无法识别为函数，因此在阅读代码的时候难以找到函数的定义，给理解代码带来一定的麻烦。这正是考验自己的时候，其实遇到这样的问题很平常，解决也很简单，只是没碰到过，所以觉得无法入手。使用正则表达式，很好的解决这个问题，把宏替换，在Linux下的命令为：</p>
<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>批量替换  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s2">&quot;&lt;em&gt;.[c|h]&quot;</span> | xargs perl -pi -e <span class="s2">&quot;s|PJ_DEF(([&lt;sup&gt;(]*))|$1|g&quot;</span>&lt;/sup&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
批量地找c和h文件，替换PJ_DEF宏，但保留参数不变。掌握正则表达式，对提高工作效率有比较大的帮助。</p>
<p>掌握正则表达式，并且配合grep，sed，awk，perl，python等工具一起使用，对于文本处理，威力就无穷大了。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>一般的正则表达式匹配：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.代表的是任意字符，&lt;/em&gt;代表的是多个，<span class="o">[</span>a-z|A-Z<span class="o">]</span>代表的是字母，&lt;sup&gt;<span class="o">[</span>list<span class="o">]</span>代表的是以list开头，&lt;/sup&gt;
</span><span class='line'><span class="o">[</span>&lt;sup&gt;list<span class="o">]</span>代表的是不是list的，<span class="o">[</span>list<span class="o">]</span><span class="nv">$代</span>表的是以list为结尾，匹配一些特殊符号需要转义，&lt;/sup&gt;
</span><span class='line'>如<span class="o">(</span>, <span class="se">\t</span>;<span class="o">{</span>1,15<span class="o">}</span>代表的是1-15个。
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>匹配host的IP地址的方式：</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>匹配host的IP地址的方式：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;/http:\/\/([\d.]&lt;em&gt;):[\d]&lt;/em&gt;\/\S*/&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s1">&#39;http://192.168.1.100:8080/tr069&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">ip</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何为系统 何为人生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
