<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-08-07T00:34:40+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[何为系统 何为人生]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/21/processor-architecture/"/>
    <updated>2013-07-21T23:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/21/processor-architecture</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天看了《深入了解计算机系统》的处理器体系结构，这一章完成了一个Y86简单处理器的设计。从指令的执行开始说起，一个指令的执行需要几个阶段：取指、译码、执行、访存、写回和更新PC。还详细分析了rmmovl,subl,pushl,popl,je,call和ret指令这五个阶段执行的分解操作。之后讲到SEQ硬件结构、时序和实现。最后讲到的SEQ流水线的实现和对流水线固有问题的解决。如用暂停和转发来避免数据冒险。还说到流水线控制逻辑：1.处理ret；2.加载/使用冒险；3.预测错误的分支；4.异常。同时指出Y86处理器未完成的实现：1.多周期指令；2.与存储系统的接口。</p>
<!-- more -->
<p>大概看了这一章，我问自己，何为系统？如现实的处理器就是很复杂的系统，有其基本执行的流程，如加法、乘法，也有提高其吞吐量的流水线管道，但同时也有其反馈机制和异常处理，保证其正确地执行和反应真实的运行情况。如初中生物学到人体的八大系统，有其正常的运作，也有其反馈机制和与其它系统沟通的接口。系统，我觉得是一个由内部机制控制运行的物体，同时提供与外部交流的接口。</p>
<p>今天还去表姨妈家里吃饭，虽然没有请教她什么问题，但可以体验一下城市人的生活，让我这样的乡巴佬见识下，但不要认为自己丢脸，乡巴佬又怎会有脸皮的？豁出去吧！</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Malloc内存管理]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/12/malloc/"/>
    <updated>2013-07-12T01:16:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/12/malloc</id>
    <content type="html"><![CDATA[<blockquote><p><p>malloc并不是从一个编译时就确定的固定大小的数组中分配空间，而是在需要的时向操作系统申请空间。因为程序中的某些地方可能不通过malloc调用申请空间（通过其它方式申请空间），因此，malloc管理的空间不一定是连续的。这样空闲存储空间以空闲块链表的方式组织，每个块包含一个长度、一个指向下一块的指针以及一个指向自身存储空间的指针。</p>
<!-- more -->
<p>当有申请请求时，malloc将扫描空闲块链表，直到找到一个足够大的块为止。该算法称为“首次适应”（first fit）；与之相对应的算法是“最佳适应”（best fit），它寻找满足条件的最小块。如果该块恰好与请求的大小相符合，则将它从链表中移走并返回给用户。如果该块太大，则将它分成两部分；大小合适的块返回给用户，剩下的部分留在空闲块链表中。如果找不到一个足够大的块，则向操作系统申请一个大块并加入到空闲块链表中。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>malloc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="n">Align</span><span class="p">;</span>     <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">按照</span><span class="kt">long</span><span class="err">类型的边界对齐</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">union</span> <span class="n">header</span> <span class="p">{</span>          <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">块的头部</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">union</span> <span class="n">header</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="cm">/*空闲块链表的下一块*/</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>        <span class="cm">/*本块的大小*/</span>
</span><span class='line'>    <span class="p">}</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="n">Align</span> <span class="n">x</span><span class="p">;</span>                    <span class="cm">/*强制块对齐*/</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">union</span> <span class="n">header</span> <span class="n">Header</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">Header</span> <span class="n">base</span><span class="p">;</span>       <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">从空链表开始</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">freep</span> <span class="o">=</span> <span class="nb">NULL</span> <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="err">空闲链表的初始指针*/</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">malloc</span><span class="err">函数</span><span class="o">:</span><span class="err">通用存储分配函数</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">malloc</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="n">nbytes</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Header</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">prevp</span><span class="p">;</span>
</span><span class='line'><span class="n">Header</span> <span class="o">*</span><span class="nf">morecore</span><span class="p">(</span><span class="kt">unsigned</span><span class="p">);</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">nunits</span> <span class="o">=</span> <span class="p">(</span><span class="n">nbytes</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">prevp</span> <span class="o">=</span> <span class="n">freep</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>    <span class="cm">/*没有空闲链表*/</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">base</span><span class="p">;</span>
</span><span class='line'>        <span class="n">base</span><span class="p">.</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">prevp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span> <span class="p">;</span> <span class="n">prevp</span><span class="o">=</span><span class="n">p</span><span class="p">,</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">nunits</span><span class="p">)</span>                <span class="cm">/*足够大*/</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">nunits</span><span class="p">)</span>        <span class="cm">/*正好*/</span>
</span><span class='line'>                    <span class="n">prevp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>                                    <span class="cm">/*分配末尾部分*/</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">p</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nunits</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="n">freep</span> <span class="o">=</span> <span class="n">prevp</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">freep</span><span class="p">)</span>                              <span class="cm">/*闭环的空闲链表*/</span>
</span><span class='line'>            <span class="k">if</span><span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="n">morecore</span><span class="p">(</span><span class="n">nunits</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>                        <span class="cm">/*没有剩余的存储空间*/</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>函数morecore用于向操作系统请求存储空间。在设置完size字段后，morecore函数调用free函数把多余的存储空间插入到空闲区域中。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>morecore  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NALLOC</span> <span class="mi">1024</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">morecore</span><span class="err">函数</span><span class="o">:</span><span class="err">向系统申请更多的存储空间</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="n">Header</span> <span class="o">*</span><span class="n">morecore</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">nu</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">cp</span><span class="p">,</span> <span class="o">*</span><span class="n">sbrk</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">Header</span> <span class="o">*</span><span class="n">up</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cp</span> <span class="o">=</span> <span class="n">sbrk</span><span class="p">(</span><span class="n">nu</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Header</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">cp</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>    <span class="cm">/*没有空间*/</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">up</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">cp</span><span class="p">;</span>
</span><span class='line'><span class="n">up</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">nu</span><span class="p">;</span>
</span><span class='line'><span class="n">free</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="n">up</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="k">return</span> <span class="n">freep</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>free函数从freep指向的地址开始，逐个扫描空闲块链表，寻找可以插入空闲块的地方。该位置可能在两个空闲块之间，也可能在链表的末尾。在任何一种情况下，如果被释放的块与另一空闲块相邻，则将这两个块合并起来。合并两个块的操作很简单，只需要设置指针指向正确的位置，并设置正确的块大小就可以了。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>free  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">free</span><span class="err">函数</span><span class="o">:</span><span class="err">将块</span><span class="n">ap</span><span class="err">放入空闲块链表中</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ap</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Header</span> <span class="o">*</span><span class="n">bp</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">bp</span> <span class="o">=</span> <span class="p">(</span><span class="n">Header</span> <span class="o">*</span><span class="p">)</span><span class="n">ap</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>                   <span class="cm">/*指向块头*/</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="n">p</span> <span class="o">=</span> <span class="n">freep</span><span class="p">;</span> <span class="o">!</span><span class="p">(</span><span class="n">bp</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">bp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">bp</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p</span> <span class="o">||</span> <span class="n">bp</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>                                <span class="cm">/*被释放的块在链表的开头或末尾*/</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">bp</span> <span class="o">+</span> <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">)</span>   <span class="cm">/*与上一相邻块合并*/</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>        <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="n">bp</span><span class="p">)</span>             <span class="cm">/*与下一相邻块合并*/</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">s</span><span class="p">.</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">bp</span><span class="p">;</span>
</span><span class='line'><span class="n">freep</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>typedef和union的使用解决了地址对齐（假定sbrk返回的是合适的指针)问题</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/11/linux-command/"/>
    <updated>2013-07-11T00:39:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/11/linux-command</id>
    <content type="html"><![CDATA[<blockquote><p><p>linux的命令种类繁多，但掌握方法和规则，记住常用的命令，不懂的用man来查询。</p>
<p>1.解压.tar.xz:        tar Jxvf xxx.tar.xz</p>
<p>2.解压7z：       7z x filename.7z</p>
<!-- more -->
<p>3.统计源代码的行数：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find . -name <span class="s1">&#39;&lt;em&gt;.c&#39;</span> -o -name <span class="s1">&#39;&lt;/em&gt;.h&#39;</span> | xargs wc -l
</span><span class='line'>find . -name <span class="s1">&#39;&lt;em&gt;.c&#39;</span> -o -name <span class="s1">&#39;&lt;/em&gt;.h&#39;</span> | xargs cat | sed <span class="s1">&#39;/&lt;sup&gt;\s*$/d&#39;</span>&lt;/sup&gt; | wc -l
</span><span class='line'>cloc ./
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>4.grep命令：grep (regular pattern) (input file)</p>
<p>使用 grep 抓取匹配关键字附近的行, 有时我们会对 grep 匹配关键字附近的行感兴趣（这有点上下文的味道），使用 -A、-B、以及 -C 选项可以满足我们的愿望。</p>
<p>grep -A <n> 'keyword' file # 匹配 keyword 的下 n 行</p>
<p>grep -B <n> 'keyword' file # 匹配 keyword 的上 n 行</p>
<p>grep -C <n> 'keyword' file # 匹配 keyword 的上 n 行及下 n 行</p>
<p>5.apt-get命令</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;apt-cache search ‹name› <span class="c"># find package ‹name› for install by “apt-get”</span>
</span><span class='line'>apt-cache show ‹name›   <span class="c"># describe package ‹name›</span>
</span><span class='line'>apt-get install ‹name›  <span class="c"># install a new program. (usually used with sudo in front)</span>
</span><span class='line'>apt-get remove ‹name›   <span class="c"># remove (un-install) a program.</span>
</span><span class='line'>apt-get purge ‹name›    <span class="c"># remove a program and its config files.</span>
</span><span class='line'>dpkg -l <span class="c"># list all installed packages</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>6.反向解析域名:host 0.0.0.0</p>
<p>7.得到本机ip:</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ifconfig | awk <span class="s1">&#39;/inet addr:/ {print $2}&#39;</span> | awk -F: <span class="s1">&#39;{if ($2 != &quot;127.0.0.1&quot;) print $2}&#39;</span>
</span><span class='line'>ifconfig | sed -rn <span class="s1">&#39;s/.&lt;em&gt;r:([^ ]+) .&lt;/em&gt;/\1/p&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>8.创建目录：mkdir {1..50}；创建文件：touch {1..50}；</p>
<p>9.对打开端口进行检查：netstat -an | grep --color -i -E 'listen|listening'</p>
<p>netstat -tlnp</p>
<p>10.找到超过100M的文件：find . -type f -size +100M</p>
<p>11.删除文件：rm !(<em>.foo|</em>.bar|*.baz)</p>
<p>12.快速重命名：mv filename.{old,new} </p>
<p>13.终止进程：killall -KILL 进程名称 | killall -signal process | kill -SIGKILL processID</p>
<p>14.成为Ubuntu超级用户：sudo passwd root 新建root用户</p>
<p>15.寻找文件：find 路径名（path） 参数（根据文件名称-name、类型-type、权限-perm、修改世间-atime） 模式匹配</p>
<p>16.使某个配置文件立即生效：source /etc/profile</p>
<p>17.打开或关闭某项服务:service 某项服务（iptables） on|stop</p>
<p>18.查看系统进程占用资源的工具：top,ps,free,vmstat,iostat,pmap</p>
<p>19.找到某个进程的ID：ps -aux | grep processname </p>
<p>20.根据目录下文件的大小排序输出：du -hs * | sort -h </p>
<p>21.查看当前目录下文件的个数：ls -l | grep "<sup>-"</sup> | wc -l 查看当前目录下文件的个数，包括子目录里的：ls -lR | grep "<sup>-"</sup> | wc -l 查看某目录下文件夹（目录）的个数，包括子目录里的：ls -lR | grep "<sup>d"</sup> | wc -l</p>
<p>22.设置文件及文件夹权限：chmod -R 664 文件夹名称 （赋予文件属主和同组用户读、写权限，其他用户只读权限),文件夹和其目录下的文件都被设置了相同的664权限,u代表的是与文件属主拥有一样的权限</p>
<p>23.Shell删除目录下的无效链接</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;link<span class="o">=</span>&lt;code&gt;find . -type l&lt;/code&gt;
</span><span class='line'><span class="nb">echo</span> <span class="nv">$link</span>
</span><span class='line'><span class="k">for </span>i in <span class="nv">$link</span>;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;do
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -f <span class="nv">$i</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>rm <span class="nv">$i</span> ;
</span><span class='line'><span class="k">fi</span> ;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>24.shell给可执行的文件创建链接</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mkdir -p  ./exelink
</span><span class='line'><span class="nb">cd </span>exelink
</span><span class='line'><span class="nv">link</span><span class="o">=</span>&lt;code&gt;find ../ -type f -perm -111 &lt;/code&gt;
</span><span class='line'><span class="k">for </span>i in <span class="nv">$link</span> ;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;do
</span><span class='line'><span class="k">if</span> <span class="o">[</span>  -f <span class="nv">$i</span> <span class="o">]</span> ; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="nv">$i</span>
</span><span class='line'>    link  <span class="nv">$i</span> <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$i</span> | sed <span class="s1">&#39;s,.*/,,&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">fi</span> ;
</span><span class='line'><span class="k">done</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>25.根据不同的时段输出不一样的欢迎词</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;HH<span class="o">=</span>&lt;code&gt;date +%k&lt;/code&gt;
</span><span class='line'><span class="nb">echo</span> <span class="nv">$HH</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -ge 0 <span class="o">]</span>&amp;amp;&amp;amp;<span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -lt 12 <span class="o">]</span> ; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  <span class="nb">echo</span> <span class="s2">&quot;Good Morning `whoami`&quot;</span>;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;elif <span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -ge 12 <span class="o">]</span>&amp;amp;&amp;amp;<span class="o">[</span> <span class="k">${</span><span class="nv">HH</span><span class="k">}</span> -l 18 <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  <span class="nb">echo</span> <span class="s2">&quot;Good Afternoon `whoami`&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;else&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  <span class="nb">echo</span> <span class="s2">&quot;Good Evening `whoami`&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi;
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread线程同步]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/10/thread/"/>
    <updated>2013-07-10T15:53:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/10/thread</id>
    <content type="html"><![CDATA[<blockquote><p><p>线程包含了表示进程内执行环境必需的信息，其中包含进程中标识线程的线程ID、一组寄存器、栈、调度优先级和策略、信号屏蔽字、errno变量以及线程私有数据。进程的所有信息对该进程的所有线程都是共享的，包括可执行的程序文本、程序的全局内存和堆内存、栈以及文件描述符。</p>
<!-- more -->
<p>进程原语和线程原语的比较:</p>
<p><table border="1">
<tr><th>进程原语       |</th><th>  线程原语        |</th><th>描述        </th></tr>
<tr><td>fork       |</td><td>pthread_create    |</td><td>创建新的控制流 </td></tr>
<tr><td>exit       |</td><td>pthread_exit      |</td><td>从现有的控制流退出   </td></tr>
<tr><td>waitpid        |</td><td>pthread_join  |</td><td>从控制流中得到退出的状态  </td></tr>
<tr><td>atexit     |</td><td>pthread_cleanup_push|</td><td>注册在退出控制流时调用的函数  </td></tr>
<tr><td>getpid     |</td><td>pthread_self      |</td><td>获取控制流的ID  </td></tr>
<tr><td>abort      |</td><td>pthread_cancel    |</td><td>请求控制流的非正常退出 </td></tr>
</table></p>
<p>当多个控制进程共享相同的内存时，就需要线程同步机制，以保证它们在访问变量的存储内容时不会访问到无效的数值。线程同步机制：</p>
<p><strong>1.互斥量</strong>,互斥量从本质上来说是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量上的锁。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>互斥量  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">mutex</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="k">const</span> <span class="n">pthread_mutexattr_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">attr</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pthread_mutex_destroy</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_trylock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span>  <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mutex</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2.读写锁</strong>,当读操作比较频繁时，读写锁可以改善性能。 </p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>读写锁例子  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">job</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'><span class="n">pthread_t</span>    <span class="n">j_id</span><span class="p">;</span>          <span class="cm">/*告诉哪条线程在操作任务*/</span>
</span><span class='line'><span class="cm">/*...更多的定义在后面*/</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">queue</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">q_head</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">q_tail</span><span class="p">;</span>
</span><span class='line'><span class="n">pthread_rwlock_t</span> <span class="n">q_lock</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">初始化队列</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">queue_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">*</span><span class="n">qp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span> <span class="o">=</span>  <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">err</span> <span class="o">=</span> <span class="n">pthread_rwlock_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">err</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*...继续初始化*/</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">在队列的前面插入一个任务</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">job_insert</span><span class="p">(</span> <span class="k">struct</span> <span class="n">queue</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pthread_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span><span class="p">;</span>
</span><span class='line'><span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>     <span class="cm">/*队列是空的*/</span>
</span><span class='line'><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'><span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">在队列的尾部添加一个任务</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">job_append</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pthread_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>   <span class="cm">/*队列是空的*/</span>
</span><span class='line'><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">jp</span><span class="p">;</span>
</span><span class='line'><span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">在队列中删除一个任务</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">job_remove</span><span class="p">(</span><span class="k">struct</span> <span class="n">queue</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">job</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">jp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pthead_rwlock_wrlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">jp</span> <span class="o">==</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">tail</span> <span class="o">==</span> <span class="n">jp</span><span class="p">)</span>
</span><span class='line'>            <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">jp</span> <span class="o">==</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_tail</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">==</span> <span class="n">jp</span><span class="p">)</span>
</span><span class='line'>            <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_prev</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">在队列中根据线程找到任务</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">struct</span> <span class="n">job</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">job_find</span><span class="p">(</span> <span class="k">struct</span> <span class="n">queue</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">qp</span><span class="p">,</span> <span class="n">pthread_t</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">jp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">pthread_rwlock_rdlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">jp</span> <span class="o">=</span> <span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_head</span><span class="p">;</span> <span class="n">jp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">jp</span> <span class="o">=</span> <span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_next</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">pthread_equal</span><span class="p">(</span><span class="n">jp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">j_id</span><span class="p">,</span> <span class="n">id</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pthread_rwlock_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">qp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">q_lock</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">jp</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>3.条件变量</strong>，条件变量与互斥量一起使用，允许线程以无竞争的方式等待特定的条件发生。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>互斥量  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pthread_cond_init</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">cond</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                  <span class="n">pthread_condattr_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">attr</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pthread_cond_destroy</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cond</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="kr">restrict</span> <span class="n">cond</span><span class="p">,</span> <span class="n">pthread_mutex_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="kr">restrict</span> <span class="n">mutex</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_signal</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">cond</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">pthread_cond_broadcast</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>线程的基本的同步机制：互斥、读写锁及条件变量,了解如何使用它们保护共享资源。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traceroute源码]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/09/traceroute/"/>
    <updated>2013-07-09T12:31:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/09/traceroute</id>
    <content type="html"><![CDATA[<blockquote><p><p>Traceroute允许确定IP数据报从本地主机游历到某个远程主机所经过的路径。traceroute使用IPv4的TTL字段或IPv6的跳限字段以及两种ICMP消息。它一开始向目的地发送一个TTL(或跳限）为1的数据报。这个数据报导致第一跳路由器返送一个ICMP“time exceeded in transmit"(传输中超时）错误。接着它递增TTL一次发送一个UDP数据报，从而逐步确定下一跳路由器。当某个UDP数据报到达最终目的地时，目标是由这个主机返送一个ICMP“port unreachable(端口不可达）“错误。这个目标通过向一个随机选取的（但愿）未被目的主机使用的端口发送UDP数据报得以实现。</p>
<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>traceroute  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">in_systm</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">ip</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">ip_icmp</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">udp</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">BUFSIZE</span>  <span class="mi">1500</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">rec</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">u_short</span> <span class="n">rec_seq</span><span class="p">;</span>
</span><span class='line'><span class="n">u_short</span> <span class="n">rec_ttl</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">timeval</span>  <span class="n">rec_tv</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">recvbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">sendbuf</span><span class="p">[</span><span class="n">BUFSIZE</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>     <span class="n">datalen</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'><span class="n">u_short</span> <span class="n">sport</span><span class="p">,</span> <span class="n">dport</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">nsent</span><span class="p">;</span>
</span><span class='line'><span class="n">pid_t</span>  <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">probe</span><span class="p">,</span> <span class="n">nprobes</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">sendfd</span><span class="p">,</span> <span class="n">recvfd</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">ttl</span><span class="p">,</span> <span class="n">max_ttl</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">verbose</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>     <span class="n">gotalarm</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">icmpcode_v4</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">icmpcode_v6</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v4</span><span class="p">(</span><span class="kt">int</span> <span class="p">,</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">recv_v6</span><span class="p">(</span><span class="kt">int</span> <span class="p">,</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_alrm</span><span class="p">(</span><span class="kt">int</span> <span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">traceloop</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">tv_sub</span><span class="p">(</span><span class="k">struct</span> <span class="n">timeval</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">proto</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">icmpcode</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span>             <span class="p">(</span><span class="o">*</span><span class="n">recv</span><span class="p">)(</span><span class="kt">int</span> <span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sasend</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sarecv</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">salast</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span>        <span class="n">sockaddr</span> <span class="o">*</span><span class="n">sabind</span><span class="p">;</span>
</span><span class='line'><span class="n">socklen_t</span>    <span class="n">salen</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>             <span class="n">icmpproto</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>             <span class="n">ttllevel</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>             <span class="n">ttloptname</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">*</span><span class="n">pr</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span>  <span class="n">IPV6</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">ip6</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">netinet</span><span class="o">/</span><span class="n">icmp6</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v4</span> <span class="o">=</span> <span class="p">{</span> <span class="n">icmpcode_v4</span><span class="p">,</span> <span class="n">recv_v4</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">IPPROTO_ICMP</span><span class="p">,</span> <span class="n">IPPROTO_IP</span><span class="p">,</span> <span class="n">IP_TTL</span><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">IPV6</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">proto</span> <span class="n">proto_v6</span> <span class="o">=</span><span class="p">{</span><span class="n">icmpcode_v6</span><span class="p">,</span> <span class="n">recv_v6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">IPPROTO_ICMPV6</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">IPV6_UNICAST_HOPS</span><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">datalen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">rec</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">max_ttl</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nprobes</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">u_short</span> <span class="n">dport</span> <span class="o">=</span> <span class="mi">32768</span> <span class="o">+</span> <span class="mi">666</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">h</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;m:v&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;m&#39;</span>:
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">max_ttl</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">optarg</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;invalid -m value&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;v&#39;</span>:
</span><span class='line'>                    <span class="n">verbose</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unrecognized option:%c&quot;</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">optind</span> <span class="o">!=</span> <span class="n">argc</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage : traceroute [ -m &amp;lt;maxttl&amp;gt; -v] &amp;lt;hostname&amp;gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">optind</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'><span class="n">signal</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">sig_alrm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ai</span> <span class="o">=</span> <span class="n">host_serv</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">h</span> <span class="o">=</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;traceroute to %s (%s): %d hops max, %d data bytes </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_canonname</span><span class="o">?</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_canonname</span><span class="o">:</span><span class="n">h</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span><span class="n">max_ttl</span><span class="p">,</span> <span class="n">datalen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET</span>  <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">proto_v4</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span>  <span class="n">IPV6</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_family</span> <span class="o">==</span> <span class="n">AF_INET6</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">pr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">proto_v6</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">IN6_IS_ADDR_V4MAPPED</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(((</span><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="o">*</span><span class="p">)</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addr</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sin6_addr</span><span class="p">)))</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;cannot traceroute IPV4-mapped IPV6 address&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unknown address family  %d&quot;</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_family</span><span class="p">);</span>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span> <span class="o">=</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_addr</span><span class="p">;</span>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salast</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sabind</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addrlen</span><span class="p">);</span>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span> <span class="o">=</span><span class="n">ai</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ai_addrlen</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">traceloop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">exit</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">traceloop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">rtt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">rec</span> <span class="o">*</span><span class="n">rec</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">timeval</span> <span class="n">tvrecv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">recvfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sa_family</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmpproto</span><span class="p">);</span>    <span class="cm">/*创建两个套接字*/</span>
</span><span class='line'><span class="n">setuid</span><span class="p">(</span><span class="n">getuid</span><span class="p">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">IPV6</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sa_family</span> <span class="o">==</span> <span class="n">AF_INET6</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">verbose</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>                  <span class="cm">/*设置ICMPv6接收过滤器*/</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">icmp6_filter</span> <span class="n">myfilt</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ICMP6_FILTER_SETBLOCKALL</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ICMP6_FILTER_SETPASS</span><span class="p">(</span><span class="n">ICMP6_TIME_EXCEEDED</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ICMP6_FILTER_SETPASS</span><span class="p">(</span><span class="n">ICMP6_DST_UNREACH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">myfilt</span><span class="p">);</span>
</span><span class='line'>        <span class="n">setsockopt</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">IPPROTO_IPV6</span><span class="p">,</span> <span class="n">ICMP6_FILTER</span><span class="p">,</span>
</span><span class='line'>                <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">myfilt</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">myfilt</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sendfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sa_family</span><span class="p">,</span><span class="n">SOCK_DGRAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>               <span class="cm">/*给UDP套接字捆绑源端口*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sabind</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sa_family</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sa_family</span><span class="p">;</span>
</span><span class='line'><span class="n">sport</span> <span class="o">=</span> <span class="p">(</span><span class="n">getpid</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mh">0xffff</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">;</span>
</span><span class='line'><span class="n">sock_set_port</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sabind</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">,</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">));</span>
</span><span class='line'><span class="n">bind</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sabind</span><span class="p">,</span>  <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">sig_alrm</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">);</span>        <span class="cm">/*建立SIGALRM的信号处理函数*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">seq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">ttl</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">ttl</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">max_ttl</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">done</span> <span class="o">==</span><span class="mi">0</span><span class="p">;</span> <span class="n">ttl</span> <span class="o">++</span><span class="p">)</span>        <span class="cm">/*主循环,设置TTL或跳限并发送3个探测分组*/</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">setsockopt</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ttllevel</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ttloptname</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ttl</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>        <span class="n">bzero</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salast</span> <span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%2d&quot;</span><span class="p">,</span> <span class="n">ttl</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="n">probe</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">probe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nprobes</span><span class="p">;</span> <span class="n">probe</span> <span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">rec</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">rec</span><span class="o">*</span><span class="p">)</span> <span class="n">sendbuf</span><span class="p">;</span>
</span><span class='line'>                <span class="n">rec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rec_seq</span> <span class="o">=</span> <span class="o">++</span><span class="n">seq</span><span class="p">;</span>
</span><span class='line'>                <span class="n">rec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rec_ttl</span> <span class="o">=</span> <span class="n">ttl</span><span class="p">;</span>
</span><span class='line'>                <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rec_tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">sock_set_port</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">,</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span><span class="o">+</span> <span class="n">seq</span><span class="p">));</span>     <span class="cm">/*设置目的端口并发送UDP数据报*/</span>
</span><span class='line'>                <span class="n">sendto</span><span class="p">(</span><span class="n">sendfd</span><span class="p">,</span> <span class="n">sendbuf</span><span class="p">,</span><span class="n">datalen</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sasend</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">code</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recv</span><span class="p">)(</span><span class="n">seq</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">tvrecv</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">3</span><span class="p">)</span>    <span class="cm">/*读取ICMP消息*/</span>
</span><span class='line'>                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; * &quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">else</span>                     <span class="cm">/*显示应答*/</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="n">NI_MAXHOST</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="n">sock_cmp_addr</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salast</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">{</span>
</span><span class='line'>                                <span class="k">if</span><span class="p">(</span> <span class="n">getnameinfo</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">str</span><span class="p">),</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">{</span>
</span><span class='line'>                                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %s (%s)&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">));</span>
</span><span class='line'>                                    <span class="p">}</span>
</span><span class='line'>                                <span class="k">else</span>
</span><span class='line'>                                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">));</span>
</span><span class='line'>                                <span class="n">memcpy</span><span class="p">(</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salast</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="n">tv_sub</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">tvrecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rec</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rec_tv</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">rtt</span> <span class="o">=</span> <span class="n">tvrecv</span><span class="p">.</span><span class="n">tv_sec</span><span class="o">*</span><span class="mf">1000.0</span> <span class="o">+</span> <span class="n">tvrecv</span><span class="p">.</span><span class="n">tv_usec</span><span class="o">/</span><span class="mf">1000.0</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %.3f ms&quot;</span><span class="p">,</span> <span class="n">rtt</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="n">code</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">done</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">code</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (ICMP %s)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmpcode</span><span class="p">)(</span><span class="n">code</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">recv_v4</span><span class="p">(</span><span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">hlen1</span><span class="p">,</span> <span class="n">hlen2</span><span class="p">,</span> <span class="n">icmplen</span> <span class="p">,</span><span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="n">socklen_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="n">ip</span><span class="p">,</span> <span class="o">*</span><span class="n">hip</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="n">icmp</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="n">udp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">alarm</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>           <span class="cm">/*设置报警时钟并读入每个ICMP消息*/</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">gotalarm</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">;</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">recvbuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">recvbuf</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="nf">printf</span><span class="p">(</span><span class="s">&quot;recvfrom error&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">ip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)</span> <span class="n">recvbuf</span><span class="p">;</span>                <span class="cm">/*获取ICMP首部指针*/</span>
</span><span class='line'>        <span class="n">hlen1</span> <span class="o">=</span> <span class="n">ip</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_hl</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">icmp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">icmplen</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">hlen1</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_TIMXCEED</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_code</span> <span class="o">==</span> <span class="n">ICMP_TIMXCEED_INTRANS</span><span class="p">)</span>   <span class="cm">/*处理ICMP传输中超时错误*/</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">hip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                <span class="n">hlen2</span> <span class="o">=</span> <span class="n">hip</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_hl</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">hip</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_p</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_type</span> <span class="o">==</span> <span class="n">ICMP_UNREACH</span><span class="p">)</span><span class="cm">/*处理ICMP传输中不可达错误*/</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">icmplen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">hip</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip</span> <span class="o">*</span><span class="p">)(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                <span class="n">hlen2</span> <span class="o">=</span> <span class="n">hip</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_hl</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">icmplen</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span> <span class="o">+</span> <span class="n">hlen1</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">hip</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip_p</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                                    <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_code</span> <span class="o">==</span> <span class="n">ICMP_UNREACH_PORT</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_code</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (from %s: type = %d, code = %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_type</span><span class="p">,</span> <span class="n">icmp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp_code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="n">tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">sig_alrm</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">recv_v6</span><span class="p">(</span><span class="kt">int</span> <span class="n">seq</span><span class="p">,</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="o">*</span><span class="n">tv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">IPV6</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span>  <span class="n">hlen2</span><span class="p">,</span> <span class="n">icmp6len</span> <span class="p">,</span><span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="n">socklen_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="kt">ssize_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ip6_hdr</span>  <span class="o">*</span><span class="n">hip6</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">icmp6_hdr</span>  <span class="o">*</span><span class="n">icmp6</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="n">udp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gotalarm</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">alarm</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="p">;)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">gotalarm</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">;</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">recvfrom</span><span class="p">(</span><span class="n">recvfd</span><span class="p">,</span> <span class="n">recvbuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">recvbuf</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="nf">printf</span><span class="p">(</span><span class="s">&quot;recvfrom error&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">icmp6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">icmp6_hdr</span> <span class="o">*</span><span class="p">)</span> <span class="n">recvbuf</span> <span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">icmp6len</span> <span class="o">=</span> <span class="n">n</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_type</span> <span class="o">==</span> <span class="n">ICMP6_TIME_EXCEEDED</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_code</span> <span class="o">==</span> <span class="n">CMP6_TIME_EXCEEDED_INTRANS</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">icmp6len</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">hip6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span><span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                <span class="n">hlen2</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span>  <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">hip6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip6_nxt</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_type</span> <span class="o">==</span> <span class="n">ICMP6_DST_UNREACH</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">icmp6len</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>               <span class="n">hip6</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">ip6_hdr</span> <span class="o">*</span><span class="p">)(</span> <span class="n">recvbuf</span><span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>                <span class="n">hlen2</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">ip6_hdr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">udp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">udphdr</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">recvbuf</span>  <span class="o">+</span> <span class="mi">8</span> <span class="o">+</span> <span class="n">hlen2</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">hip6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ip6_nxt</span> <span class="o">==</span> <span class="n">IPPROTO_UDP</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_sport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">sport</span><span class="p">)</span>
</span><span class='line'>                            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">udp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">uh_dport</span> <span class="o">==</span> <span class="n">htons</span><span class="p">(</span><span class="n">dport</span> <span class="o">+</span> <span class="n">seq</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_code</span> <span class="o">==</span> <span class="n">ICMP6_DST_UNREACH_NOPORT</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">ret</span> <span class="o">=</span> <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_code</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">verbose</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">printf</span><span class="p">(</span><span class="s">&quot; (from %s: type = %d, code = %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sock_ntop_host</span><span class="p">(</span><span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">sarecv</span><span class="p">,</span> <span class="n">pr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">salen</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_type</span><span class="p">,</span> <span class="n">icmp6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">icmp6_code</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">gettimeofday</span><span class="p">(</span><span class="n">tv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>原始套接字提供3个能力：1.进程可以读写ICMPv4、IGMPv4和ICMPv6等分组； 2.进程可以读写内核不处理其协议字段的IP数据报； 3.进程可以自行构造IPv4首部，通常用于诊断目的（亦或不幸地被黑客们所利用).</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
