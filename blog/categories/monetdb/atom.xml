<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MonetDB | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/monetdb/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-09-26T00:16:04+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MonetDB VS PostgreSQL数据库]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/28/monetdb-vs-postgresql/"/>
    <updated>2013-04-28T19:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/28/monetdb-vs-postgresql</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB与PostgreSQL数据库的架构比较，虽然它们存储结构有本质的区别，一个以列存储，一个以行存储；一个没有索引，一个有多种类型的索引，B+树索引，Hash索引，GiST索引等。但它们也有很多的类似之处。</p>
<!-- more -->
<p><strong>PostgreSQL的进程结构：</strong></p>
<p>PostgreSQL系统的主要功能都集中于Postgres程序，其入口是Main模块中的main函数，在初始化数据集簇，启动数据库服务器时，都将从这里开始。Main模块主要的工作是确定当前的操作系统平台，并据此做一些平台相关的环境变量设置和初始化。然后通过对命令行参数的判断，将控制转到相应的模块中去。图是PostgreSQL系统主函数main的流程.</p>
<img src="/assets/images/PostgresqlProcess.jpg" alt="&quot;postgresqlProcess&quot;" />
<p>PostgreSQL使用一种专用服务器进程体系结构，其中，最主要的两个进程就是守护进程Postmaster和服务进程Postgres。从本质上来说，Postmaster和Postgres都是通过装入Postgres程序而形成的进程，只是在运行时所处的分支不同而已。守护进程Postmaster负责整个系统的启动和关闭。它监听并接受客户端的连接请求，为其分配服务进程Postgres.服务进程Postgres接受并执行客户端发送的命令。它在底层模块（如存储，事务管理，索引等）之上调用各个主要的功能模块（如编译器，优化器，执行器等）(如下图所示），完成客户端的各种数据库操作，并返回执行结果。</p>
<img src="/assets/images/postgresql.jpg" alt="&quot;postgresql&quot;" />
<p>PostgreSQL守护进程Postmaster（单用户模式的Postgres进程）除为用户连接请求分配后台Postgres服务进程外，还将启动相关的后台辅助进程。守护进程Postmaster在完成基本环境初始化，创建接受用户请求的监听端口后，顺序启动如下系统辅助进程：SysLogger（系统日志进程）、PsStat（统计数据收集进程）、AutoVacuum（系统自动清理进程）。在守护进程Postmaster进入到循环监听中启动如下进程：BgWriter（后台写进程）、WalWriter（预写式日志写进程），PgArch（预写式日志归档进程）。</p>
<p><strong>守护进程PostMaster：</strong></p>
<p>Postmaster就像一个处理客户端请求的调度中心。当客户端程序需要对数据库进行操作时，首先会发出一个起始消息给Postmaster进行请求。Postmaster将根据这个起始消息中的信息对客户端进行验证，如果身份验证通过，Postmaster就为该客户端新建一个服务进程Postgres。随后Postmaster将与客户端的交互工作转交给Postgres服务进程，由Postgres来完成客户端所需要的数据库操作。</p>
<p>PostgreSQL请求--响应模型</p>
<img src="/assets/images/postmaster.jpg" alt="&quot;postmaster&quot;" />
<p>Postmaster也负责管理整个系统范围的操作，例如中断等操作，Postmaster本身不进行这些操作，它只是指派一个子进程在适当的时间去处理它们。同时它要在数据库崩溃的时候重启系统。Postmaster进程在起始时会建立共享内存和信号库，<strong>Postmaster及其子进程的通信就通过共享内存和信号</strong>来实现。这种多进程设计使得整个系统的稳定性更好，即使某个后台进程崩溃也不会影响系统中其他进程的工作，Postmaster只需要重置共享内存即可从单个后台进程的崩溃中恢复。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Memo-based(日志)的查询执行]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/26/memo-based-query-execution/"/>
    <updated>2013-04-26T22:57:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/26/memo-based-query-execution</id>
    <content type="html"><![CDATA[<blockquote><p><p>现代以代价为基础的查询优化器使用备忘录结构为一个有效的查询运行计划组织搜索空间。例如，考虑一个oid连接路径‘A.B.C.D’.我们可以在这条路径任何点启动计算。它的备忘录结构可以用一个（大）MAL程序来表示。备忘录的水平用choice运算封装。第二个参数指示哪些指令去被考虑代价计算。</p>
<!-- more -->
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">T2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T1</span><span class="p">,</span><span class="n">T2</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T5:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T2</span><span class="p">);</span>
</span><span class='line'><span class="nl">T6:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T7:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T8:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T4</span><span class="p">,</span><span class="n">T5</span><span class="p">,</span><span class="n">T6</span><span class="p">,</span><span class="n">T7</span><span class="p">,</span><span class="n">T8</span><span class="p">);</span>
</span><span class='line'><span class="nl">T9:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T10:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T5</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span><span class='line'><span class="nl">T11:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T6</span><span class="p">);</span>
</span><span class='line'><span class="nl">T12:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">T7</span><span class="p">);</span>
</span><span class='line'><span class="nl">T13:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="n">T8</span><span class="p">);</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="s">&quot;getVolume&quot;</span><span class="p">,</span><span class="n">T9</span><span class="p">,</span><span class="n">T10</span><span class="p">,</span><span class="n">T11</span><span class="p">,</span><span class="n">T12</span><span class="p">,</span><span class="n">T13</span><span class="p">);</span>
</span><span class='line'><span class="nl">answer:</span><span class="o">=</span> <span class="n">scheduler</span><span class="p">.</span><span class="n">pick</span><span class="p">(</span><span class="n">T9</span><span class="p">,</span> <span class="n">T10</span><span class="p">,</span> <span class="n">T11</span><span class="p">,</span> <span class="n">T12</span><span class="p">,</span> <span class="n">T13</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>scheduler.choice()操作为每个目标变量调用内置的getVolume且期待一个整数值代价。在这个事例里它返回总共参数使用的字节数。具有最低代价的目标变量被选择运行和剩余的变量被变成临时NOOP操作（你可能想重用备忘录）。它们会被解析器遗漏，同时在接下的调用中被调度器忽略。它减少了替换当我们在计划中处理时。一个内置朴素的代价函数会被使用。使用者可以提供一个私有的代价函数被定义为目标和a :lng结果带有多态参数的模式。它的实现可以使用完全的上下文信息去做决定。如，它可以跟踪在接下的语句中对目标变量的潜在使用去决定总代价当这一步被考虑到最后的结果。</p>
<p>在达到下个选择点前，一个完整计划很可能包含其他表达式去准备或使用目标变量。choice运算的任务是避免不必要的操作。MAL块应该被调用者私有拥有，这样确保了scheduler.isolation()。模式的细化也组成部分计划代价分析。然后你不再需要包含一个固定的代价函数。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">Acost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span><span class='line'><span class="nl">Bcost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">Ccost:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1cost:</span><span class="o">=</span> <span class="n">Acost</span><span class="o">+</span><span class="n">Bcost</span><span class="p">;</span>
</span><span class='line'><span class="nl">T2cost:</span><span class="o">=</span> <span class="n">Bcost</span><span class="o">+</span><span class="n">Ccost</span><span class="p">;</span>
</span><span class='line'><span class="nl">T3cost:</span><span class="o">=</span> <span class="n">Ccost</span><span class="o">+</span><span class="n">Dcost</span><span class="p">;</span>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">T1cost</span><span class="p">,</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2cost</span><span class="p">,</span><span class="n">T2</span><span class="p">,</span> <span class="n">T3cost</span><span class="p">,</span><span class="n">T3</span><span class="p">);</span>
</span><span class='line'><span class="nl">T1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">);</span>
</span><span class='line'><span class="nl">T2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">);</span>
</span><span class='line'><span class="nl">T3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">C</span><span class="p">,</span><span class="n">D</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB中RunChoice的实现代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">THe</span> <span class="n">choice</span> <span class="n">operator</span> <span class="n">first</span> <span class="n">searches</span> <span class="n">the</span> <span class="n">next</span> <span class="n">one</span> <span class="n">to</span> <span class="n">identify</span>
</span><span class='line'>  <span class="n">the</span> <span class="n">fragment</span> <span class="n">to</span> <span class="n">be</span> <span class="n">optimized</span> <span class="n">and</span> <span class="n">to</span> <span class="n">gain</span> <span class="n">access</span> <span class="n">to</span> <span class="n">the</span> <span class="n">variables</span>
</span><span class='line'>  <span class="n">without</span> <span class="n">the</span> <span class="n">need</span> <span class="n">to</span> <span class="n">declare</span> <span class="n">them</span> <span class="n">upfront</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">str</span>  <span class="n">RUNchoice</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">target</span><span class="p">;</span>
</span><span class='line'><span class="n">lng</span> <span class="n">cost</span><span class="p">,</span> <span class="n">mincost</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">nme</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">pc</span> <span class="o">=</span> <span class="n">getPC</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'><span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_int</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* choice pairs */</span>
</span><span class='line'>    <span class="n">mincost</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cost</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mincost</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">isVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mincost</span> <span class="o">=</span> <span class="n">cost</span><span class="p">;</span>
</span><span class='line'>            <span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">nme</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">str</span> <span class="o">*</span><span class="p">)</span> <span class="n">getArgReference</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* should be generalized to allow an arbitrary user defined function */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">nme</span><span class="p">,</span> <span class="s">&quot;getVolume&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">throw</span><span class="p">(</span><span class="n">MAL</span><span class="p">,</span> <span class="s">&quot;scheduler.choice&quot;</span><span class="p">,</span> <span class="n">ILLEGAL_ARGUMENT</span> <span class="s">&quot;Illegal cost function&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mincost</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">InstrPtr</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">cost</span> <span class="o">=</span> <span class="n">getVolume</span><span class="p">(</span><span class="n">stk</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mincost</span> <span class="o">||</span> <span class="n">mincost</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">mincost</span> <span class="o">=</span> <span class="n">cost</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">target</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_RUN_MEMORUN</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#function target %s cost %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">target</span><span class="p">),</span> <span class="n">mincost</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* remove non-qualifying variables */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">setVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="n">setVarDisabled</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">propagateNonTarget</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">pc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_RUN_MEMORUN</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#cost choice selected %s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">target</span><span class="p">),</span> <span class="n">mincost</span><span class="p">);</span>
</span><span class='line'><span class="n">printFunction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>1.合并表优化：</strong></p>
<p>一个合并相关表（MAT）描述符定义了一个可兼容BAT的有序的类型集合，它的并代表一个单一（虚）BAT。MAL可能代表一个分区的BAT（看BPM），也可以是一个在一个程序块中临时BATs的任意集合。MAL的定义存在于一个单代码块的范围。MAT优化简单地扩展计划去基于指令的基础上处理它的模块。只有当遇上一个blocking操作时，相关的BAT才会被实例化。当没有被实例化，MAL对象不能作为参数传入到任何函数。简单地说，因为MAL不被类型系统所知道和没有底层的操作意识到它的存在。</p>
<p>在MAL优化器的第一种方法中，我们假设在MAT序列中第一个BAT被使用累加器。进一步，没有语义知识被使用去减少可能无用的连接。然而，我们限制对一个简单参数的扩展。这在后阶段被改变当一个以代价为基础的计算被用于区分不同的。为了说明，考虑：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">m0:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">m1:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">m2:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="n">c0</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">j</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>选择和聚集操作可以使用MAT简单地重写：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">33</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">34</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">35</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">m2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">33</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">34</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="o">:</span><span class="kt">int</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">36</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">33</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">36</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">37</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">34</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">37</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">38</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">38</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>print操作还没有MAT语义。它需要一个在调用时不会产生头的函数。然而，在输出前，我们可以打包元素：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">33</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">34</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">35</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>对于连接，在不知道人和关于组件属性的情况下，我们必须生成所有可能的组合。当前的启发是限制扩展一个简单的参数。这导致：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">39</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c0</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">40</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">j</span> <span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">39</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">40</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这模式的不足是在MAL语句中隐藏爆炸。优化器的挑战从对MAT元素的属性的监测中找出最小的。如，在处理前，它可能尝试去部分地打包元素。这是一个运行调度的决定。相反的，在更复杂的程序分析中毕竟系统可以使用MAT迭代器去避免打包.</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">ji:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="n">b</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="n">c</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">ji</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">ji</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="n">c</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="n">b</span><span class="o">:=</span> <span class="n">mat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">m0</span><span class="p">,</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">);</span>
</span><span class='line'><span class="n">exit</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="n">exit</span> <span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB合并表优化实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTmergetableImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="n">mat_t</span> <span class="o">*</span><span class="n">mat</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">oldtop</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mtop</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="n">match</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">error</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* the number of MATs is limited to the variable stack*/</span>
</span><span class='line'><span class="n">mat</span> <span class="o">=</span> <span class="p">(</span><span class="n">mat_t</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mat_t</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">mat</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">oldtop</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">*</span> <span class="mf">1.2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span><span class="o">?</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="o">:</span><span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">*</span> <span class="mf">1.2</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">size</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">oldtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">o</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">matRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">packRef</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat_none</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batcalcRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mark_grpRef</span> <span class="o">||</span>
</span><span class='line'>       <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">dense_rank_grpRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Mergetable cannot handle </span>
</span><span class='line'><span class="cm">           order related batcalc operations */</span>
</span><span class='line'>        <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * If the instruction does not contain MAT references it can simply be added.</span>
</span><span class='line'><span class="cm">     * Otherwise we have to decide on either packing them or replacement.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">match</span> <span class="o">=</span> <span class="n">MATcount</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span><span class="o">||</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">propagateMarkProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oid_nil</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="o">||</span>
</span><span class='line'>                   <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="o">||</span>
</span><span class='line'>                       <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">propagateBinProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">propagateProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Here we handle horizontal aligned mats. This information is passed using</span>
</span><span class='line'><span class="cm">     * the properties hlb &amp;lt;= x &amp;lt; hub.</span>
</span><span class='line'><span class="cm">     * So if this is available, we can simplify</span>
</span><span class='line'><span class="cm">     * batcalc operations and for fetch joins we can use this information to do</span>
</span><span class='line'><span class="cm">     * per part joins only.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Also we should translate the mirror().join() (a groupby attribute) into</span>
</span><span class='line'><span class="cm">     * UNION(mirror().join()).</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* only handle simple joins, ie not range/band joins */</span>
</span><span class='line'>    <span class="cm">/* For range/band joins (argc == 4), the propagation of oids</span>
</span><span class='line'><span class="cm">       is different, ie result-head equals head-1st arg,    </span>
</span><span class='line'><span class="cm">                result-tail equals head-2nd/3rd arg */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* TODO:</span>
</span><span class='line'><span class="cm">       If a value join with mats on both sides fails (ie unknown</span>
</span><span class='line'><span class="cm">       how to handle) we should bail out, ie stop any further</span>
</span><span class='line'><span class="cm">       processing of any mats. This is needed because the needed </span>
</span><span class='line'><span class="cm">       mas-crossproduct handling of projections fails. </span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">match</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isMatJoinOp</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">||</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetajoinRef</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">om</span><span class="p">,</span> <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_none</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">om</span> <span class="o">=</span> <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">om</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* range join with parts on the right */</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isProjection</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">m</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">))</span>
</span><span class='line'>            <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_tpn</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isProjection</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">m</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">))</span>
</span><span class='line'>            <span class="n">tpe</span> <span class="o">=</span> <span class="n">mat_rdr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">m</span> <span class="o">=</span> <span class="n">mat_join</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* after topn projection we should merge */</span>
</span><span class='line'>        <span class="cm">/* slice marks the end of a sequence of topn&#39;s */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_tpn</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">sliceRef</span> <span class="o">||</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_slc</span><span class="p">))</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_tpn</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_topn_project</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* after sort projection we should mat.merge */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_rdr</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">tpe</span> <span class="o">==</span> <span class="n">mat_rdr</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat</span><span class="p">[</span><span class="n">om</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort_project</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">om</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* all map operations assume aligned bats */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">all_mats_and_aligned</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">isMapOp</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_map</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_union</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>         <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">match</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>          <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kdifferenceRef</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="n">mat_setop</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Now we handle group, derive and aggregation statements.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">groupRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">doneRef</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mi1</span> <span class="o">||</span> <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* group on finished group is fine */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="cm">/* two phase group.new on group result */</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_group_new</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">groupRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deriveRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">doneRef</span> <span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">o</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Found a derive after an aggr statement (distinct). */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_group_derive</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">aggrRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">countRef</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">count_no_nilRef</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">prodRef</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">o</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">mat_group_aggr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">o</span><span class="p">)){</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* median */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">aggrRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Aggregate handling is a prime target for optimization.</span>
</span><span class='line'><span class="cm">     * The simple cases are dealt with first.</span>
</span><span class='line'><span class="cm">     * Handle the rewrite v:=aggr.count(b) and sum()</span>
</span><span class='line'><span class="cm">     * And the min/max is as easy</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">((</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">aggrRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">countRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">count_no_nilRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>             <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">prodRef</span><span class="p">))</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">tuniqueRef</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mat_aggr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isTopn</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isSlice</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isTopn</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">n</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">mat_is_topn</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_topn2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_none</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* TODO: grp before sorting, isn&#39;t handled */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_grp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">);</span> <span class="cm">/* should be packed */</span>
</span><span class='line'>        <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isOrderby</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/*mat_is_orderby(mat[n].type) &amp;amp;&amp;amp;*/</span>
</span><span class='line'>        <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_sort2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">resultSetRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">mat_is_orderby</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_pack_sort</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * The slice operation can also be piggy backed onto the mat.pack using it</span>
</span><span class='line'><span class="cm">     * as a property of the MAT. Pushing it through</span>
</span><span class='line'><span class="cm">     * would be feasible as well, provided the start of the slice is a constant 0.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sliceRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* inject new mat.pack() operation */</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">MATpackAll</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* rename mat.pack() to mat.slice() */</span>
</span><span class='line'>        <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">sliceRef</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* insert bounds from algebra.slice() into mat.slice() */</span>
</span><span class='line'>        <span class="cm">/* (setArgument() seems to shift the remaining arguments,</span>
</span><span class='line'><span class="cm">         *  i.e., insert a new argument, not overwrite an existing one) */</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">setArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">setArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>        <span class="cm">/* reuse result variable of algebra.slice() for mat.slice() */</span>
</span><span class='line'>        <span class="cm">/* (we do not explicitly keep, and thus drop, the original algebra.slice()) */</span>
</span><span class='line'>        <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * The mark operators are a special case of apply on parts as we need to</span>
</span><span class='line'><span class="cm">     * correct the mark base oid&#39;s</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span> <span class="o">||</span>
</span><span class='line'>         <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">InstrPtr</span> <span class="n">mark</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mark</span> <span class="o">=</span> <span class="n">mat_mark</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">mark</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">useMatType</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Pack MAT arguments, except one, to limit plan explosion.</span>
</span><span class='line'><span class="cm">     * The preferred partitioned one is the first argment as it</span>
</span><span class='line'><span class="cm">     * often reflects a base table.</span>
</span><span class='line'><span class="cm">     * Look at the depth of the MAT definition to limit the explosion.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">fm</span><span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">fm</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="p">;</span> <span class="n">fm</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Not all instructions can be replaced by the sequence. We have to</span>
</span><span class='line'><span class="cm">     * group them and check for them individually.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isDiffOp</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">fm</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">InstrPtr</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">=</span> <span class="n">mat_apply1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat_none</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mat_update</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="n">isFragmentGroup</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">fm</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pack_mirror</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">InstrPtr</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;# %s.%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mirrorRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span> <span class="o">==</span> <span class="n">mat_grp</span><span class="cm">/* &amp;amp;&amp;amp; mat[m].mm */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">assert</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mm</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">pack_mirror</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">group_broken</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">type</span><span class="p">,</span> <span class="n">pack_mirror</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">r</span> <span class="o">=</span> <span class="n">mat_apply1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">fm</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>            <span class="n">mtop</span> <span class="o">=</span> <span class="n">mat_add</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">useMatType</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* packed group should include the mirror statement */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pack_mirror</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">m</span><span class="p">].</span><span class="n">mv1</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>  <span class="p">{</span>
</span><span class='line'>                <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="n">mat</span><span class="p">[</span><span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">type</span> <span class="o">=</span> <span class="n">mat_grp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">mat</span><span class="p">[</span><span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">type</span> <span class="o">=</span> <span class="n">mat_ext</span><span class="p">;</span>
</span><span class='line'>            <span class="n">mat_pack_group</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">mtop</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * All other instructions should be checked for remaining MAT dependencies.</span>
</span><span class='line'><span class="cm">     * It requires MAT materialization.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;# %s.%s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">match</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">m</span><span class="o">=</span><span class="n">isMATalias</span><span class="p">(</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">mat</span><span class="p">,</span> <span class="n">mtop</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">MATpackAll2</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">mat</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">mtop</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">error</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">propagateProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * @-</span>
</span><span class='line'><span class="cm"> * As a final optimization, we could remove the mal.new definitions,</span>
</span><span class='line'><span class="cm"> * because they are not needed for the execution.</span>
</span><span class='line'><span class="cm"> * For the time being, they are no-ops.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="n">chkTypes</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nspace</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">OPTDEBUGmergetable</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span><span class="s">&quot;#Result of multi table optimizer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">optimizerCheck</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span><span class="s">&quot;merge test&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printFunction</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">fail</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">error</span> <span class="o">||</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span><span class="p">){</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">OPTDEBUGmergetable</span>
</span><span class='line'>        <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span> <span class="s">&quot;## %s.%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">oldtop</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">InstrPtr</span> <span class="n">p</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">matRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">newRef</span><span class="p">){</span>
</span><span class='line'>            <span class="cm">/* simply drop this function, for the base binding is available */</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">=</span> <span class="n">NOOPsymbol</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">OPTDEBUGmergetable</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKout</span><span class="p">,</span><span class="s">&quot;Result of multi table optimizer FAILED</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_mergetable: %d merge actions</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pushed</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mi1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">mat</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>2.多道编译优化：</strong></p>
<p>MonetDB 操作多道概念是中轴的简单运用任何标量的函数的元素在一个容器里。任何操作CMD和它的多道转变【CMD】一起出现。给出CMD(T1，..,Tn)的标记：TR，它可以被使用同时【CMD】(bat[:any 1,:T1],...,bat[any 1,Tn]) :bat[any 1,Tr]。多道的语义在所有Bat值参数执行定位连接和对匹配的元组的每个组合执行CMD。所有的结果被收集在一个结果的BAT。所有但除一个参数外可能会被一个标量值替换。对多道操作通用的解决方案是把它们翻译成MAL循环。一个片段关于其行为：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span><span class="o">:=</span> <span class="n">mal</span><span class="p">.</span><span class="n">multiplex</span><span class="p">(</span><span class="s">&quot;calc.+&quot;</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">multiplex</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<P>当前的实现需要目标类型要被清晰地被提到。由优化器产生的结果：<p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">barrier</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">11</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">12</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">13</span><span class="p">)</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">newIterator</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">15</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">12</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'><span class="n">redo</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">11</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">12</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">13</span><span class="p">)</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">hasMoreElements</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="n">exit</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">11</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">12</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">8</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB多道优化的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTmultiplexImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">msg</span><span class="o">=</span> <span class="n">MAL_SUCCEED</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">msg</span> <span class="o">==</span> <span class="n">MAL_SUCCEED</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">malRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">multiplexRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">msg</span> <span class="o">=</span> <span class="n">OPTexpandMultiplex</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">stk</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">msg</span><span class="o">==</span> <span class="n">MAL_SUCCEED</span><span class="p">){</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_multiplex: %d expansions</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#mal program: %d MAL instr %d vars (&quot;</span> <span class="n">SZFMT</span> <span class="s">&quot; K)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">,</span>
</span><span class='line'>    <span class="p">((</span><span class="k">sizeof</span><span class="p">(</span> <span class="n">MalBlkRecord</span><span class="p">)</span> <span class="o">+</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrRecord</span><span class="p">)</span><span class="o">+</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">VarRecord</span><span class="p">)</span> <span class="o">+</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vsize</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">VarPtr</span><span class="p">)</span><span class="o">+</span><span class="mi">1023</span><span class="p">)</span><span class="o">/</span><span class="mi">1024</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span><span class="p">){</span>
</span><span class='line'>    <span class="cm">/* rollback */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span><span class="o">?</span> <span class="mi">0</span><span class="o">:</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>3.BAT分区优化</strong></p>
<p>在老的PC地址空间受限和分布的存储的需要使BATs理想地被看重作为更小的BATs的并集，在给定有限的内存中处理。带有支持性的bat分区库bmp的PARTITION()优化器用可适配的数据库分段算法解决这问题。它被递增地设计带有一个中心是支持SQL front-end。特别是，被考虑的操作被限制为MAL的子集。一个在这集合外面的操作的出现终止优化器的活动。OPTIMIZER.PARTITIONS()操作寻找SQL列BAT的绑定和为了使用分区版本而准备代码。</p>
<p>我们使用两种是吸纳。第一种尝试寻找线性依赖数据的片段和在其构造一个迭代器。这种方法有些棘手，因为你必须对特殊的情况进行关照。特别是，在顺序构建操作的语义造成一些问题。navie（）方法简单地看自个儿的操作和用迭代器围绕它们。一个别名的表被保留用来重用和探测已经分区的操作符。不足之处一个分区的BAT潜伏要读几次【这取决于变量可计算的重使用】和中间的读写。实验应该指明一个优化的一个。</p>
<p><strong>4.窥孔优化</strong></p>
<p>递归下降查询器很容易对产生更好的代码错失机会，因为有限的上下文被保留或向前看可用。窥孔优化器在这样递归的模式下建立和对优化器的‘错误’补救。窥孔模式的集合随着时间增长和front-end详细的变化应该可以预见。SQL frontend 严重依赖于一个中轴的生成oid序列的表。不幸的是，这是不能被看见和模式’$i := calc.oid(0@0); $j:= algebra.markT($k,$i);经常发生。这可以被’$j:= algebra.markT($k)’替换。另一个产生2-way指令序列例子是’$j:= algebra.markT($k); $l:= bat.reverse($j);’,这都可以用’$l:= algebra.markH($k);’替换。</p>
<p>reverse-reverse 操作也落入这个目录。相反的pairs 可能起因于front-end编译器的处理模式或者其它优化器步骤的副影响。这样的相反对应该越快去除越好，这样可以减小找到另外优化机会的复杂度。因所有的情况下我们应该保证被丢掉的中间结果不会被用于其他用途。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">r:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">o:</span><span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="mi">0</span><span class="err">@</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nl">z:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markT</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">o</span><span class="p">);</span>
</span><span class='line'><span class="nl">rr:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="n">t</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">peephole</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这被窥孔优化器转化为：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">r:</span><span class="n">bat</span><span class="p">[</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">]</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">rr</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5.查询执行计划</strong></p>
<p>一个普遍使用的数据结构去表示和操作一个查询是树(或图）。它的节点表示操作符和叶子表示操作数。这样的视图随手拈来当你要重组整块代码或者去建立一个从底到上建立优化计划，如使用备忘录结构。MAL优化器工具箱提供函数用树（图）结构覆盖任何的MAL块和线性化回MAL块。线性化顺序被一个递归调用的从支撑点遍历树的决定。为了说明，考虑下列代码块：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//T1:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T2:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T3:= bat.new(:int,:int);</span>
</span><span class='line'><span class="c1">//T4:= bat.new(:int,:int);</span>
</span><span class='line'><span class="nl">a:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">d:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">e:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">f:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="nl">h:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">dumpQEP</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这产生一个目的查询计划的结构</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">h</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="n">f</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">e</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">T1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">T3</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">f</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">T2</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">T4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>        <span class="n">T4</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>任何有效的MAL任务都可以被基于流依赖的树或图结构的视图覆盖，但不是所有的MAL程序都可以从一棵简单的树继承。如，上面的程序块片段被解释为线性的序列不能被表示除非执行指令自身成为操作符节点。然而，因为我们没有增加或者改变根源的MAL程序，qep.progagate任务产生原有的先行次序有优先级的程序。如果，然而，我们进入树的新的指令，它们会被放置到邻近的其它树的节点。对块的流控制给予特殊的关照，因为产生一个查询计划块不是很容易就能环绕。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB dumpQEP的实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">The</span> <span class="n">core</span> <span class="n">of</span> <span class="n">the</span> <span class="n">work</span> <span class="n">is</span> <span class="n">focused</span> <span class="n">on</span> <span class="n">building</span> <span class="n">the</span> <span class="n">tree</span> <span class="n">using</span> <span class="n">a</span> <span class="n">flow</span> <span class="n">analysis</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Building</span> <span class="n">the</span> <span class="n">tree</span> <span class="n">means</span> <span class="n">that</span> <span class="n">we</span> <span class="n">should</span> <span class="n">not</span> <span class="n">allow</span> <span class="n">the</span> <span class="n">same</span> <span class="n">variable</span> <span class="n">can</span> <span class="n">not</span> <span class="n">be</span> <span class="n">used</span> <span class="n">twice</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">LEAFNODE</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">TOPNODE</span> <span class="mi">3</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">QEP</span>
</span><span class='line'><span class="n">QEPbuilt</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">QEP</span> <span class="n">qroot</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">vq</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="o">*</span><span class="n">status</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">vq</span><span class="o">=</span> <span class="p">(</span><span class="n">QEP</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="n">QEP</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">vq</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">status</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">vq</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">status</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">q</span><span class="o">=</span> <span class="n">QEPnewNode</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>        <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span> <span class="n">LEAFNODE</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">QEPappend</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span> <span class="n">TOPNODE</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">We</span> <span class="n">may</span> <span class="n">end</span> <span class="n">up</span> <span class="n">with</span> <span class="n">multiple</span> <span class="n">variables</span> <span class="n">not</span> <span class="n">yet</span> <span class="n">bound</span> <span class="n">to</span> <span class="n">a</span> <span class="n">QEP</span><span class="p">.</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">qroot</span><span class="o">=</span> <span class="n">QEPnew</span><span class="p">(</span><span class="n">MAXPARENT</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="p">){</span>
</span><span class='line'>        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">QEPnewNode</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">status</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">==</span> <span class="n">TOPNODE</span><span class="p">){</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">vq</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>        <span class="n">QEPappend</span><span class="p">(</span><span class="n">qroot</span><span class="p">,</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">vq</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">qroot</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">It</span> <span class="n">may</span> <span class="n">be</span> <span class="n">handy</span> <span class="n">to</span> <span class="n">dump</span> <span class="n">the</span> <span class="n">graph</span> <span class="k">for</span> <span class="n">inspection</span>
</span><span class='line'> <span class="o">*</span> <span class="n">or</span> <span class="n">to</span> <span class="n">prepare</span> <span class="k">for</span> <span class="n">the</span> <span class="n">dot</span> <span class="n">program</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="n">QEPdump</span><span class="p">(</span><span class="n">stream</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="n">QEP</span> <span class="n">qep</span><span class="p">,</span> <span class="kt">int</span> <span class="n">indent</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">inc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">indent</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">s</span><span class="o">=</span> <span class="n">instruction2str</span><span class="p">(</span><span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_STMT</span> <span class="o">|</span> <span class="n">LIST_MAPI</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>    <span class="n">inc</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">climit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="n">QEPdump</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">qep</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">indent</span><span class="o">+</span> <span class="n">inc</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span>
</span><span class='line'><span class="n">OPTdumpQEPImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">QEP</span> <span class="n">qep</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">qep</span><span class="o">=</span> <span class="n">QEPbuilt</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="n">QEPdump</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="n">qep</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>6.范围传播 </strong></p>
<p>几乎所有的查询对表中的几个段有兴趣。如果用视图表示，查询计划经常含有对同一个列的选择。它们可能也修补了从碎片标准来的参数。 PUSHRANGES优化器的目的是最小化对表的范围的扫描。除非指令被移出计划。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">s1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nl">s2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">95</span><span class="p">);</span>
</span><span class='line'><span class="nl">s3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="n">nil</span><span class="p">);</span>
</span><span class='line'><span class="nl">s4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s3</span><span class="p">,</span><span class="n">nil</span><span class="p">,</span><span class="mi">75</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">pushranges</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这么长的序列可以被压缩成一条：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">s1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">75</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>从同一源码对两个范围的选择的并集可能是一个目标：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">t1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nl">t2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nl">t3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="k">union</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会变为：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="nl">t3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB范围传播的优化代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTpushrangesImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span><span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span>
</span><span class='line'><span class="n">Range</span> <span class="n">range</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="p">(</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">range</span><span class="o">=</span> <span class="p">(</span><span class="n">Range</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RangeRec</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">range</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">OPTDEBUGpushranges</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#Range select optimizer started</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* In phase I we collect information about constants*/</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span> <span class="cm">/* end of optimizer */</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">used</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastrange</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)].</span><span class="n">lastrange</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">uselectRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * The operation X:= algebra.select(Y,L,H,Li,Hi) is analysed.</span>
</span><span class='line'><span class="cm">         * First, we attempt to propagate the range known for Y onto the</span>
</span><span class='line'><span class="cm">         * requested range of X. This may lead to smaller range of</span>
</span><span class='line'><span class="cm">         * even the conclusion that X is necessarily empty.</span>
</span><span class='line'><span class="cm">         * Of course, only under the condition that Y has not been changed by a</span>
</span><span class='line'><span class="cm">         * side-effect since it was bound to X.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>            <span class="cm">/* merge lowerbound */</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span><span class="p">)),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span><span class="p">;</span>
</span><span class='line'>                <span class="n">z</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastupdate</span> <span class="o">==</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastrange</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>            <span class="cm">/* merge higherbound */</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span><span class="p">)),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)),</span>
</span><span class='line'>                     <span class="n">ATOMnilptr</span><span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span><span class="p">;</span>
</span><span class='line'>                <span class="n">z</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastupdate</span> <span class="o">==</span> <span class="n">range</span><span class="p">[</span><span class="n">z</span><span class="p">].</span><span class="n">lastrange</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * The second step is to assign the result of this exercise to the</span>
</span><span class='line'><span class="cm">         * result variable.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lcst</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastrange</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">hcst</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">srcvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastupdate</span><span class="o">=</span> <span class="n">range</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">lastrange</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * If both range bounds are constant, we can also detect empty results.</span>
</span><span class='line'><span class="cm">         * It is empty if L&amp;gt; H or when L=H and the bounds are !(true,true).</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">y</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>  <span class="p">){</span>
</span><span class='line'>            <span class="n">z</span> <span class="o">=</span><span class="n">ATOMcmp</span><span class="p">(</span> <span class="n">getVarGDKType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">x</span><span class="p">)),</span>
</span><span class='line'>                    <span class="n">VALptr</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">y</span><span class="p">)));</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span>  <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">));</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">4</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">btval</span><span class="p">;</span>
</span><span class='line'>            <span class="n">x</span><span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">btval</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">z</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">z</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">4</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="o">!</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">var</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="n">wrd</span> <span class="n">zero</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">ValRecord</span> <span class="n">v</span><span class="p">,</span> <span class="o">*</span><span class="n">vp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">vp</span> <span class="o">=</span> <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">v</span><span class="p">,</span> <span class="n">TYPE_wrd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">zero</span><span class="p">);</span>
</span><span class='line'>                <span class="n">varSetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">rowsProp</span><span class="p">,</span> <span class="n">op_eq</span><span class="p">,</span> <span class="n">vp</span><span class="p">);</span>
</span><span class='line'>                <span class="cm">/* create an empty replacement */</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span> <span class="n">batRef</span><span class="p">;</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span> <span class="n">newRef</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
</span><span class='line'>                <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">x</span><span class="p">)));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">OPTDEBUGpushranges</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">range</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">used</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">printRange</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span><span class="n">range</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Phase II, if we succeeded in pushing constants around and</span>
</span><span class='line'><span class="cm"> * changing instructions, we might as well try once more to perform</span>
</span><span class='line'><span class="cm"> * aliasRemoval, constantExpression, and pushranges.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">range</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p><strong>7.循环再生器</strong></p>
<p>在现有的数据库系统中查询优化和处理经常仍集中在各自的查询。查询分开地被分析和和内核赛跑不管并行或之前的调用提供的机遇。这种方法远离最优和两个方向被发现可以改善：物理化视图和（部分）结果集重使用。物理化视图从查询日志中继承。它们代表公共的子查询，其物理化改善接下来查询时间。重用部分结果被用于放大或导航应用处于危急关头的情况。循环再生优化器和模块扩展这with a middle out approach.它们利用MonetDB的materialize-all-intermediate方法来决定保留它们只要被认为有利。</p>
<p>采用的方法是在MAL程序中使用recycler优化器调用标记指令，以至它们的结果被保留在一个全局的再生寄宿于MAL解析器的缓冲。指令受Recycler管制如果至少它其中一个参数是BAT和其他不是常数或者变量，且在Recycler已知。在运行的时候，在没有代价下，Recycler被MAL解析器最里层的循环调用去检查一个更新的会被保留的结果。否则，它计算指令和调用policy functions去决定是否这值得保留。</p>
<p>Recycler有几个policy控制操作在具体的设置下实验它的效果。retain policy控制什么时候保留结果，reuse policy照看具体复制的指令或者使用语义知识在MAL指令去探测潜在的使用（例如，重用select 结果）。最后，cache policy照管中间结果pool的存储空间。具体的细节在重用模块描述：</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB Recycler代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span> <span class="n">The</span> <span class="n">variables</span> <span class="n">are</span> <span class="n">all</span> <span class="n">checked</span> <span class="k">for</span> <span class="n">being</span> <span class="n">eligible</span> <span class="n">as</span> <span class="n">a</span> <span class="n">variable</span>
</span><span class='line'> <span class="o">*</span> <span class="n">subject</span> <span class="n">to</span> <span class="n">recycling</span> <span class="n">control</span><span class="p">.</span> <span class="n">A</span> <span class="n">variable</span> <span class="n">may</span> <span class="n">only</span> <span class="n">be</span> <span class="n">assigned</span>
</span><span class='line'> <span class="o">*</span> <span class="n">a</span> <span class="n">value</span> <span class="n">once</span><span class="p">.</span> <span class="n">The</span> <span class="n">target</span> <span class="n">function</span> <span class="n">is</span> <span class="n">a</span> <span class="n">sql</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="o">-</span><span class="p">,</span><span class="o">-</span><span class="p">,</span><span class="o">-</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="n">or</span> <span class="n">all</span> <span class="n">arguments</span>
</span><span class='line'> <span class="o">*</span> <span class="n">are</span> <span class="n">already</span> <span class="n">recycle</span> <span class="n">enabled</span> <span class="n">or</span> <span class="n">constant</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">arguments</span> <span class="n">of</span> <span class="n">a</span> <span class="n">function</span> <span class="n">call</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">recycled</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">They</span> <span class="n">change</span> <span class="n">with</span> <span class="n">each</span> <span class="n">call</span><span class="p">.</span> <span class="n">This</span> <span class="n">does</span> <span class="n">not</span> <span class="n">mean</span>
</span><span class='line'> <span class="o">*</span> <span class="n">that</span> <span class="n">the</span> <span class="n">instructions</span> <span class="n">using</span> <span class="n">them</span> <span class="n">can</span> <span class="n">not</span> <span class="n">be</span> <span class="n">a</span>
</span><span class='line'> <span class="o">*</span> <span class="n">target</span> <span class="n">of</span> <span class="n">recycling</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Just</span> <span class="n">looking</span> <span class="n">at</span> <span class="n">a</span> <span class="n">target</span> <span class="n">result</span> <span class="n">kept</span> <span class="n">is</span> <span class="n">not</span> <span class="n">good</span> <span class="n">enough</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">You</span> <span class="n">have</span> <span class="n">to</span> <span class="n">sure</span> <span class="n">that</span> <span class="n">the</span> <span class="n">arguments</span> <span class="n">are</span> <span class="n">also</span> <span class="n">the</span> <span class="n">same</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">This</span> <span class="n">rules</span> <span class="n">out</span> <span class="n">function</span> <span class="n">arguments</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">recycler</span> <span class="n">is</span> <span class="n">targeted</span> <span class="n">towards</span> <span class="n">a</span> <span class="n">read</span><span class="o">-</span><span class="n">only</span> <span class="n">database</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">best</span> <span class="n">effect</span> <span class="n">is</span> <span class="n">obtained</span> <span class="k">for</span> <span class="n">a</span> <span class="n">single</span><span class="o">-</span><span class="n">user</span> <span class="n">mode</span> <span class="p">(</span><span class="n">sql_debug</span><span class="o">=</span><span class="mi">32</span> <span class="p">)</span>
</span><span class='line'> <span class="o">*</span> <span class="n">when</span> <span class="n">the</span> <span class="n">delta</span><span class="o">-</span><span class="n">bats</span> <span class="n">are</span> <span class="n">not</span> <span class="n">processed</span> <span class="n">which</span> <span class="n">allows</span> <span class="n">longer</span> <span class="n">instruction</span>
</span><span class='line'> <span class="o">*</span> <span class="n">chains</span> <span class="n">to</span> <span class="n">be</span> <span class="n">recycled</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Update</span> <span class="n">statements</span> <span class="n">are</span> <span class="n">not</span> <span class="n">recycled</span><span class="p">.</span> <span class="n">They</span> <span class="n">trigger</span> <span class="n">cleaning</span> <span class="n">of</span>
</span><span class='line'> <span class="o">*</span> <span class="n">the</span> <span class="n">recycle</span> <span class="n">cache</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">the</span> <span class="n">query</span><span class="p">.</span> <span class="n">Only</span> <span class="n">intermediates</span>
</span><span class='line'> <span class="o">*</span> <span class="n">derived</span> <span class="n">from</span> <span class="n">the</span> <span class="n">updated</span> <span class="n">columns</span> <span class="n">are</span> <span class="n">invalidated</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Separate</span> <span class="n">update</span> <span class="n">instructions</span> <span class="n">in</span> <span class="n">queries</span><span class="p">,</span> <span class="n">such</span> <span class="n">as</span> <span class="n">bat</span><span class="p">.</span><span class="n">append</span> <span class="n">implementing</span> <span class="err">&#39;</span><span class="n">OR</span><span class="err">&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="o">*</span> <span class="n">are</span> <span class="n">monitored</span> <span class="n">and</span> <span class="n">also</span> <span class="n">trigger</span> <span class="n">cleaning</span> <span class="n">the</span> <span class="n">cache</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;monetdb_config.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;opt_recycler.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="s">&quot;mal_instruction.h&quot;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">lng</span> <span class="n">recycleSeq</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">should</span> <span class="n">become</span> <span class="n">part</span> <span class="n">of</span> <span class="n">MAL</span> <span class="n">block</span> <span class="n">basics</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">static</span> <span class="n">bte</span> <span class="n">baseTableMode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>   <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">only</span> <span class="n">recycle</span> <span class="n">base</span> <span class="n">tables</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">OPTrecyclerImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">marks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">delta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">updstmt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">recycled</span><span class="p">;</span>
</span><span class='line'><span class="kt">short</span> <span class="n">app_sc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">ValRecord</span> <span class="n">cst</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">affectedRowsRef</span> <span class="o">||</span>
</span><span class='line'>             <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">exportOperationRef</span> <span class="o">||</span>
</span><span class='line'>             <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span> <span class="o">||</span>
</span><span class='line'>             <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">updateRef</span> <span class="o">||</span>
</span><span class='line'>             <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deleteRef</span><span class="p">))</span>
</span><span class='line'>        <span class="n">updstmt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* watch out, newly created instructions may introduce new variables */</span>
</span><span class='line'><span class="n">recycled</span> <span class="o">=</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">recycled</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">recycled</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recid</span> <span class="o">=</span> <span class="n">recycleSeq</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* create a handle for recycler */</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;prelude&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">in</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">recycleRef</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*don&#39;t inline recycle instr. */</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/*  update instructions are not recycled but monitored*/</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">TYPE_bat</span>
</span><span class='line'>                 <span class="o">||</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">app_sc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="n">app_sc</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cst</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">delta</span><span class="p">);</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">=</span> <span class="n">defConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>                <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">updateRef</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/* take care of SQL catalog update instructions */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">catalogRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">tp</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">getVarValue</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tp</span> <span class="o">==</span> <span class="mi">22</span> <span class="o">||</span> <span class="n">tp</span> <span class="o">==</span> <span class="mi">25</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">delta</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cst</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">delta</span><span class="p">);</span>
</span><span class='line'>                <span class="n">c</span> <span class="o">=</span> <span class="n">defConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_int</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>                <span class="n">q</span> <span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;reset&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">tp</span> <span class="o">==</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">            if (updstmt &amp;amp;&amp;amp; app_sc &amp;gt;= 0) {</span>
</span><span class='line'><span class="cm">                q = newFcnCall(mb, &quot;recycle&quot;, &quot;reset&quot;);</span>
</span><span class='line'><span class="cm">                pushArgument(mb, q, app_sc);</span>
</span><span class='line'><span class="cm">                pushArgument(mb, q, app_tbl);</span>
</span><span class='line'><span class="cm">            }</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="s">&quot;recycle&quot;</span><span class="p">,</span> <span class="s">&quot;epilogue&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">CMDcall</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* never save a barrier unless it is a command and side-effect free */</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* don&#39;t change instructions in update statements */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">updstmt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* skip simple assignments */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">octopusRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">bindidxRef</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>        <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* During base table recycling skip marking instructions other than octopus.bind */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">baseTableMode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* general rule: all arguments are constants or recycled,</span>
</span><span class='line'><span class="cm">       ignore C pointer arguments from mvc */</span>
</span><span class='line'>    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)]</span> <span class="o">||</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">ignoreVar</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)))</span>
</span><span class='line'>            <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">-</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OPTDEBUGrecycle</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#recycle instruction</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span> <span class="cm">/* this instruction is to be monitored */</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The expected gain is largest if we can re-use selections</span>
</span><span class='line'><span class="cm">     * on the base tables in SQL. These, however, are marked as</span>
</span><span class='line'><span class="cm">     * uselect() calls, which only produce the oid head.</span>
</span><span class='line'><span class="cm">     * For cheap types we preselect using select() and re-map uselect() back</span>
</span><span class='line'><span class="cm">     * over this temporary.</span>
</span><span class='line'><span class="cm">     * For the time being for all possible selects encountered</span>
</span><span class='line'><span class="cm">     * are marked for re-use.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="cm">/* take care of semantic driven recyling */</span>
</span><span class='line'>    <span class="cm">/* for selections check the bat argument only</span>
</span><span class='line'><span class="cm">       the range is often template parameter*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">antiuselectRef</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeselectRef</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeRef</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetaselectRef</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>        <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetauselectRef</span><span class="p">)</span>
</span><span class='line'>            <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ATOMvarsized</span><span class="p">(</span><span class="n">getGDKType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">))))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_any</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span><span class="p">)</span>
</span><span class='line'>                <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">selectRef</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nf">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">thetaselectRef</span><span class="p">);</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>            <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>            <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">projectRef</span><span class="p">);</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>        <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">pcreRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">)])</span> <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>            <span class="n">marks</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">likeuselectRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">TYPE_any</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">likeselectRef</span><span class="p">);</span>
</span><span class='line'>            <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>            <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>            <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">projectRef</span><span class="p">);</span>
</span><span class='line'>            <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">algebraRef</span><span class="p">);</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">recycleMaxInterest</span><span class="p">;</span>
</span><span class='line'>            <span class="n">marks</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="n">recycled</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The sql.bind instructions should be handled carefully</span>
</span><span class='line'><span class="cm">     * The delete and update BATs should not be recycled,</span>
</span><span class='line'><span class="cm">     * because they may lead to view dependencies that later interferes</span>
</span><span class='line'><span class="cm">     * with the transaction commits.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="cm">/* enable recycling of delta-bats</span>
</span><span class='line'><span class="cm">    if (getModuleId(p) == sqlRef &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="cm">            (((getFunctionId(p) == bindRef || getFunctionId(p) == putName(&quot;bind_idxbat&quot;, 11)) &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="cm">              getVarConstant(mb, getArg(p, 5)).val.ival != 0) ||</span>
</span><span class='line'><span class="cm">             getFunctionId(p) == binddbatRef)) {</span>
</span><span class='line'><span class="cm">        recycled[getArg(p, 0)] = 0;</span>
</span><span class='line'><span class="cm">        p-&amp;gt;recycle = REC_NO_INTEREST;</span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">sql</span><span class="p">.</span><span class="n">bind</span> <span class="n">instructions</span> <span class="n">should</span> <span class="n">be</span> <span class="n">handled</span> <span class="n">carefully</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">delete</span> <span class="n">and</span> <span class="n">update</span> <span class="n">BATs</span> <span class="n">should</span> <span class="n">not</span> <span class="n">be</span> <span class="n">recycled</span><span class="p">,</span>
</span><span class='line'> <span class="o">*</span> <span class="n">because</span> <span class="n">they</span> <span class="n">may</span> <span class="n">lead</span> <span class="n">to</span> <span class="n">view</span> <span class="n">dependencies</span> <span class="n">that</span> <span class="n">later</span> <span class="n">interferes</span>
</span><span class='line'> <span class="o">*</span> <span class="n">with</span> <span class="n">the</span> <span class="n">transaction</span> <span class="n">commits</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="cm">/* enable recycling of delta-bats&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    if (getModuleId(p)== sqlRef &amp;amp;&amp;amp; </span>
</span><span class='line'><span class="cm">        (((getFunctionId(p)==bindRef || getFunctionId(p) == putName(&quot;bind_idxbat&quot;,11)) &amp;amp;&amp;amp; </span>
</span><span class='line'><span class="cm">            getVarConstant(mb, getArg(p,5)).val.ival != 0) ||</span>
</span><span class='line'><span class="cm">            getFunctionId(p)== binddbatRef) ) {</span>
</span><span class='line'><span class="cm">            recycled[getArg(p,0)]=0;</span>
</span><span class='line'><span class="cm">            p-&amp;gt;recycle = REC_NO_INTEREST; </span>
</span><span class='line'><span class="cm">        }</span>
</span><span class='line'><span class="cm">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;*/</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">recycled</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">recycle</span> <span class="o">=</span> <span class="n">marks</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span> <span class="o">+</span> <span class="n">marks</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB 优化器]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/24/monetdb-optimizers/"/>
    <updated>2013-04-24T20:02:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/24/monetdb-optimizers</id>
    <content type="html"><![CDATA[<blockquote><p><p><strong>MonetDB 汇编语言优化器</strong></p>
<p>设计MonetDB中间语言的首要理由是能对数据库查询有一个高层次的描述，且这种语言容易被front-end编译器产生，容易编码，优化和解析。</p>
<!-- more -->
<p>一个有效的优化器需要几种机制保证。它可以执行对代码碎片的标志性评估和收集结果来帮助进一步的抉择。原型情况就是一个优化器估计选择操作结果的大小。另外主要的问题是可以产生和发掘替代评估计划的空间。这种发掘可以发生在前端，也可以在运行的时候对查询碎片。</p>
<p><strong>优化器的基础</strong></p>
<p>1.生命周期的分析</p>
<p>优化器为了做一个抉择可能对代码块的特性可能有兴趣。在代码块中变量都有生命周期，用属性beginLifespan，endLifespan来表示。beginLifespan表示指令在哪里得到其第一个值，endLifespan表示最后指令在哪里被使用作为操作数或目标。如果然而，最后的使用在BARRIER块里，我们不能确定它的生命状态的结束，因为代码块redo可能模糊地使用它。对于这些情况我们关联endLifespan到跳出代码块。</p>
<p>在许多的情况，我们需要决定是否生命周期干扰了一个预先准备好的优化决定。在优化器的开始序列中，生命周期被计算一次。它会被维持去反映最准确的情况当优化基础代码时。特别是，这意味着任何的 move/remove/addition MAL指令调用不是为了重现计算就是为了进一步的传播。不清楚什么会是最好的策略。暂时我们只是重新计算。</p>
<p>在点pc指令中提到里所有的参数都会在指令qc见到且不会同时更新。把变量可能在代码块内声明都考虑进来。这可能使用BARRIER/CATCH 和 EXIT对计算。对于每一个MAL函数安全的属性相对容易决定。这种调用是为了访问MAL函数块和监视签名的参数。</p>
<p>任何的指令可能阻碍公共子表达式的识别。他充分地阻碍一个其参数列表与目标指令有非空的交集的不安全的函数。为了说明，考虑序列：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">L1</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">G1</span> <span class="o">:=</span> <span class="n">g</span><span class="p">(</span><span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">l2</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'> <span class="n">L2</span> <span class="o">:=</span> <span class="n">h</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>指令G1：=g(D, E, F) 阻塞如过G1 是｛A,B，C｝的别名。换言之，函数g()可能不安全和｛D，E，F｝和｛A,B，C｝有非空的交集。一个别名在以后的使用只能是只读。</p>
<p>MonetDB的执行优化前，设定生命周期的代码。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>设置变量的生命周期setLifespan  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Lifespan</span> <span class="nf">setLifespan</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">pc</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">prop</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">blk</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="o">=</span> <span class="n">newLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">memset</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">span</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">LifespanRecord</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="n">prop</span> <span class="o">=</span> <span class="n">PropertyIndex</span><span class="p">(</span><span class="s">&quot;transparent&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">blk</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">pc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">pc</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">pc</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">pc</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">prop</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">beginLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">beginLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>            <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span><span class="o">=</span> <span class="n">depth</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">lastUpdate</span><span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">==</span> <span class="n">depth</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">blk</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">depth</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>   <span class="cm">/* declared in outer scope*/</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * At a block exit we can finalize all variables defined within that block.</span>
</span><span class='line'><span class="cm">     * This does not hold for dataflow blocks. They merely direct the execution</span>
</span><span class='line'><span class="cm">     * thread, not the syntactic scope.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">blk</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">==</span><span class="n">depth</span><span class="p">)</span>
</span><span class='line'>            <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">prop</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class='line'>            <span class="n">depth</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">span</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">endLifespan</span> <span class="o">=</span> <span class="n">pc</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="cm">/* generate them before the end */</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">blk</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>2.流分析 </p>
<p>在许多优化规则里，语句间的数据流依赖尤其重要。MAL语言编码一个多源，多节点的数据流网络。优化器特别提取部分的工作流和使用语言的属性去枚举语义相等的解决方案，在给定的代价模型这出现导致更好的性能。流图在许多优化步骤里面扮演着重要的角色。什么是原始的和什么存储结构是最足够的是不清楚的。暂时我们引入必要的操作和对程序直接的评估。</p>
<p>对于每个变量我们应该确定他稳定的范围。在流图中的终点描述为不会产生永久数据的dead-code。当你知道这没有影响时，可以把它去掉。Side-effect自由评估应该在前端被知的属性。暂时，我们假设对于系统所有操作都是已知的。属性“不安全”是保留去识别这靠不住的情况。特别的是，一个bun-insert操作是不安全的，因为它改变了其中一个参数。</p>
<p><strong>MonetDB优化器详解：</strong></p>
<p>1.累加器评估:</p>
<p>批量的算术运算相当昂贵，因为对于每个表达式new BATs被创建。这内存饥饿被减少通过探测累加处理的机会，如，一个（临时）的变量被重写。如</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>考虑下列程序片段：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="nl">t3:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'> <span class="nl">t4:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">,</span><span class="o">+</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span><span class="n">t3</span><span class="p">);</span>
</span><span class='line'> <span class="n">optimizer</span><span class="p">.</span><span class="n">accumulators</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果变量t2是临时变量且不会在以后的程序块用到，我们可以重用它的存储空间和在剩余的代码中传播其别名。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">batcalc</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'> <span class="nl">t4:</span><span class="o">=</span><span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这实现是直接的。它刚刚只是处理了在BATCALC可用的算术操作。这集合会慢慢地扩展的。关键的决定是去决定是否我们可以重写其中一个参数。在编译的时候，这是很难去检测的，如参数可能是绑定操作或代表一个通过永久BAT表示的视图的结果。因此，编译器注入调用ALGEBRA.REUSE()通过拷贝避免重写永久的BATs。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB 累加器优化器代码：  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTaccumulatorsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span><span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="n">Module</span> <span class="n">scope</span> <span class="o">=</span> <span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nspace</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">!=</span> <span class="n">batcalcRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">OPTDEBUGaccumulators</span>
</span><span class='line'>        <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* unary operation, avoid clash with binary */</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">!=</span> <span class="n">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* only consider the last update to this variable */</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b1</span> <span class="o">=</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b2</span> <span class="o">=</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">b1</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">b2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/* binary/unary operation, check arguments for being candidates */</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">b1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">b2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">typeChecker</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">typechk</span> <span class="o">==</span> <span class="n">TYPE_UNKNOWN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">OPTDEBUGaccumulators</span><span class="p">{</span>
</span><span class='line'>                <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;# Failed typecheck&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="cm">/* reset instruction error buffer */</span>
</span><span class='line'>            <span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errbuf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">errors</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="n">p</span><span class="o">=</span><span class="n">q</span><span class="p">;</span> <span class="cm">/* restore */</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>  <span class="p">{</span>
</span><span class='line'>            <span class="n">OPTDEBUGaccumulators</span><span class="p">{</span>
</span><span class='line'>                <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#Found accumulation candidate &quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;%d: %d(%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>                <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>            <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">OPTDEBUGaccumulators</span>
</span><span class='line'>            <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_accumulators:%d accumulations</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>2.别名的去除：</p>
<p>任务 OPTIMIZER.ALIASREMOVAL()浏览程序寻找简单赋值语句，如，V:=W，它用W替代了所有的接下来的V，条件是V只是被赋值一次和W在剩下的代码中不会改变。特殊的例子在迭代的代码块中，如下所示：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>     <span class="nl">b:</span><span class="o">=</span><span class="s">&quot;done&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">barrier</span>  <span class="n">go</span><span class="o">:=</span><span class="nb">true</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">c</span><span class="o">:=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>     <span class="nl">d:</span><span class="o">=</span><span class="s">&quot;step&quot;</span><span class="p">;</span>
</span><span class='line'>     <span class="nl">v:</span><span class="o">=</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>     <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>     <span class="nl">i:</span><span class="o">=</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">redo</span> <span class="n">go</span><span class="o">:=</span><span class="n">i</span> <span class="n">lower</span> <span class="n">than</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit</span> <span class="n">go</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>     <span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>字符常量被传入到PRINT()任务，当初始的赋值i：= 0 需要保留。代码块变成：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">barrier</span>  <span class="n">go</span><span class="o">:=</span><span class="nb">true</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">c</span><span class="o">:=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>     <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">step</span><span class="s">&quot;);</span>
</span><span class='line'>     <span class="nl">i:</span><span class="o">=</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">redo</span> <span class="n">go</span><span class="o">:=</span><span class="n">i</span> <span class="n">lower</span> <span class="n">than</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit</span> <span class="n">go</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span><span class='line'>     <span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>下面是MonetDB别名去除优化的代码：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTaliasesImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="n">span</span><span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">alias</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">OPTisAlias</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">i</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span><span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>            <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">k</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">OPTaliasRemap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>        <span class="n">OPTaliasRemap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * @-</span>
</span><span class='line'><span class="cm"> * The second phase is constant alias replacement should be implemented.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_aliases: %d removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>3.代码工厂化 ：</p>
<p>在大部分真正的情况，查询在它们的参数有稍微的差别被重复地调用。这种情况通过保持近期查询计划的缓存可以被查询优化器捕捉。在MonetDB上下文这样的查询被表示为参数化的MAL程序。进一步优化缓存函数将查询计划分成两块可能你有帮助。一个区域有不依赖于给定参数的操作和另一区域包含查询的核心使用所有的信息。这样的程序可以被MAL工厂表示，是一个可重入的查询计划。一个工厂化改变代码的例子如下：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">function</span> <span class="n">test</span><span class="p">(</span><span class="n">s</span><span class="o">:</span><span class="n">str</span><span class="p">)</span><span class="o">:</span><span class="n">lng</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">b</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nl">z:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="nl">i:</span><span class="o">=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">end</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">optimizer</span><span class="p">.</span><span class="n">factorize</span><span class="p">(</span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="s">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>转变为下面的代码</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">factory</span> <span class="n">user</span><span class="p">.</span><span class="n">test</span><span class="p">(</span><span class="n">s</span><span class="o">:</span><span class="n">str</span><span class="p">)</span><span class="o">:</span><span class="n">lng</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">barrier</span> <span class="n">always</span> <span class="o">:=</span> <span class="nb">true</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">z</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'><span class="n">yield</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">redo</span> <span class="n">always</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">exit</span> <span class="n">always</span><span class="p">;</span>
</span><span class='line'><span class="n">end</span> <span class="n">test</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>包含的工厂生成器是MAL工厂化的原型实现。被采用的方法是将程序分成两块和把其包装为MAL工厂。优化假设数据库表在工厂的生命时间中只访问一次不会改变。这样的变化应该被外面检测和接着是重启的工厂。一个重定义用户可以识别‘冻僵’的参数的模式会留给将来。因为查询会映射到人和可用的工厂去处理请求。暂时我们简单地重组计划的所有参数。工厂化的操作干扰OPTIMIZER.EXPRESSIONACCUMULATION() 因为这可能会重写参数。暂时，这在本地任务会被捕捉。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB工厂化优化代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTfactorizeImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span>  <span class="n">v</span><span class="p">,</span> <span class="n">noop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">se</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">mbnew</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">fk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">blk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">varused</span><span class="p">,</span> <span class="n">returnseen</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">retvar</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">second</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">varused</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">varused</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">varused</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* add parameters to use list */</span>
</span><span class='line'><span class="n">sig</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">sig</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">varused</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">first</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">first</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">second</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">second</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">first</span><span class="p">[</span><span class="n">fk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>   <span class="cm">/* to become a factory */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">se</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">varused</span><span class="p">[</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]])</span>
</span><span class='line'>            <span class="n">se</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* detect blocks they are moved to the second part */</span>
</span><span class='line'>    <span class="cm">/* a more clever scheme can be designed though */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">BARRIERsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">CATCHsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">blkstart</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">blkstart</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">blk</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">EXITsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">blk</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">blk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* beware, none of the target variables may live</span>
</span><span class='line'><span class="cm">       before the cut point.  */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">])</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span> <span class="o">||</span> <span class="o">!</span><span class="n">OPTallowed</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class='line'>            <span class="n">se</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">se</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">YIELDsymbol</span><span class="p">;</span>
</span><span class='line'>        <span class="n">returnseen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">retvar</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">se</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">blk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">first</span><span class="p">[</span><span class="n">fk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">blkstart</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* copy old block stuff */</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">blkstart</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>            <span class="n">fk</span> <span class="o">=</span> <span class="n">blkstart</span><span class="p">;</span>
</span><span class='line'>            <span class="n">blkstart</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">varused</span><span class="p">[</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">second</span><span class="p">[</span><span class="n">sk</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* detect need for factorization, assume so */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">noop</span> <span class="o">||</span> <span class="n">sk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* remove the FToptimizer request */</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">first</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">=</span> <span class="n">FACTORYsymbol</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mbnew</span> <span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">((</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">mbnew</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">mbnew</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">fk</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* added control block */</span>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="n">newVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">GDKstrdup</span><span class="p">(</span><span class="s">&quot;always&quot;</span><span class="p">),</span> <span class="n">TYPE_bit</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">ASSIGNsymbol</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span><span class="o">=</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">sk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">second</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* finalize the factory */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">returnseen</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">ASSIGNsymbol</span><span class="p">);</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">=</span> <span class="n">YIELDsymbol</span><span class="p">;</span>
</span><span class='line'>    <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">REDOsymbol</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span><span class="o">=</span> <span class="n">pushReturn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">EXITsymbol</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span><span class="o">=</span> <span class="n">pushReturn</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* return a nil value */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">retvar</span><span class="p">)</span> <span class="o">!=</span> <span class="n">TYPE_void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">newInstruction</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="n">RETURNsymbol</span><span class="p">);</span>
</span><span class='line'>    <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">retvar</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* add END statement */</span>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">second</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">varused</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">first</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">second</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>4.删除强制转换：
<p>一个简单的优化器去除不需要的强制转换。它们可能来源于草率的代码生成器或函数调用决议决定。如 v:= calc.int(32);
成为一个简单地赋值，不需要函数调用。最主要的角色是一个编码一个优化算法的说明。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB删除强制转换的代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">coercionOptimizerStep</span><span class="p">(</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">ATOMname</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">removeInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="cm">/* dead code */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="kt">int</span>  <span class="nf">OPTcoercionImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span><span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">calcRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;calc&quot;</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">calcRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">k</span><span class="o">=</span> <span class="n">coercionOptimizerStep</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span> <span class="o">+=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">k</span><span class="p">)</span> <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * This optimizer affects the flow, but not the type and declaration</span>
</span><span class='line'><span class="cm"> * structure. A cheaper optimizer is sufficient.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_coercion: %d coersions applied</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>5.消除公共子表达式: </p>
<p>消除公共子表达只涉及对程序块的扫描去检测重复出现的语句。最在说明最关键的问题是保证在重复指令里涉及到的参数都是不变的。对OPTIMIZER.COMMONTERMS()分析是相当简陋的。带有可能有side-effects的参数的所有函数应该被标志为‘不安全’。在MAL块中它们的使用跳出涉及所有对象的数据流图(BATs,所有的东西保存在盒子里）。消除子表达优化器位于相同指令的后面。只要发现相同的它就会停止。在我们用前面的变量代替表达式之前，我们假设我们还没有通过一个非空的代码块</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">b</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">d:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nl">e:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nl">k1:</span><span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span><span class='line'><span class="nl">k2:</span><span class="o">=</span> <span class="mi">27</span><span class="p">;</span>
</span><span class='line'><span class="nl">l:</span><span class="o">=</span> <span class="n">k1</span><span class="o">+</span><span class="n">k2</span><span class="p">;</span>
</span><span class='line'><span class="nl">l2:</span><span class="o">=</span> <span class="n">k1</span><span class="o">+</span><span class="n">k2</span><span class="p">;</span>
</span><span class='line'><span class="nl">l3:</span><span class="o">=</span> <span class="n">l2</span><span class="o">+</span><span class="n">k1</span><span class="p">;</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">commonTerms</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会被转换成代码块，开始的两个指令不是相同的，因为它们有side 影响</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">b</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">c</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">d</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span>
</span><span class='line'><span class="n">e</span> <span class="o">:=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'><span class="n">l</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="mi">27</span><span class="p">);</span>
</span><span class='line'><span class="n">l3</span> <span class="o">:=</span> <span class="n">calc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="mi">24</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB 消除公共子表达式的代码段  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTcommonTermsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">prop</span><span class="p">,</span> <span class="n">candidate</span><span class="p">,</span> <span class="n">barrier</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* link all final constant expressions in a list */</span>
</span><span class='line'><span class="cm">/* it will help to find duplicate sql.bind calls */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cstlist</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">vars</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="n">alias</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">);</span>
</span><span class='line'><span class="n">vars</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">vars</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">alias</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">vars</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Link the statement to the previous use, based on the last argument.*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">candidate</span> <span class="o">=</span> <span class="n">vars</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>            <span class="cm">/* all instructions with constant tail are linked */</span>
</span><span class='line'>            <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">cstlist</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cstlist</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>            <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">vars</span><span class="p">[</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">];</span>
</span><span class='line'>        <span class="n">vars</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="n">candidate</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">){</span>
</span><span class='line'>        <span class="cm">/* wrap up the remainder */</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Any non-empty barrier block signals the end of this optimizer,</span>
</span><span class='line'><span class="cm">     * the impact of the block can affect the common code.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">barrier</span> <span class="o">|=</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">==</span> <span class="n">BARRIERsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">==</span> <span class="n">CATCHsymbol</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">!=</span><span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * @-</span>
</span><span class='line'><span class="cm">     * Also block further optimization when you have seen an assert().</span>
</span><span class='line'><span class="cm">     * This works particularly for SQL, because it is not easy to track</span>
</span><span class='line'><span class="cm">     * the BAT identifier aliases to look for updates. The sql.assert</span>
</span><span class='line'><span class="cm">     * at least tells us that an update is planned.</span>
</span><span class='line'><span class="cm">     * Like all optimizer decisions, it is safe to stop.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">barrier</span> <span class="o">|=</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">assertRef</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span> <span class="o">||</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">||</span> <span class="n">barrier</span> <span class="cm">/* || p-&amp;gt;retc == p-&amp;gt;argc */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON SKIPPED[%d] %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span> <span class="n">barrier</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* from here we have a candidate to look for a match */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#CANDIDATE[%d] &quot;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">prop</span> <span class="o">=</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">?</span> <span class="n">cstlist</span><span class="o">:</span> <span class="n">candidate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cnt</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">/</span> <span class="mi">128</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">32</span><span class="o">?</span> <span class="mi">32</span> <span class="o">:</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">/</span><span class="mi">128</span><span class="p">;</span>   <span class="cm">/* limit search depth */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">prop</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">cnt</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">j</span> <span class="p">;</span> <span class="n">cnt</span><span class="o">--</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="o">=</span><span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="p">){</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#CANDIDATE %d, %d  %d %d &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span>
</span><span class='line'>            <span class="n">hasSameSignature</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">),</span>
</span><span class='line'>            <span class="n">hasSameArguments</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">));</span>
</span><span class='line'>            <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot; :%d %d %d=%d %d %d %d %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">ASSIGNsymbol</span> <span class="p">,</span>
</span><span class='line'>                <span class="n">list</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">)],</span><span class="n">i</span><span class="p">,</span>
</span><span class='line'>                <span class="o">!</span><span class="n">hasCommonResults</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">),</span>
</span><span class='line'>                <span class="o">!</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">),</span>
</span><span class='line'>                <span class="o">!</span><span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">),</span>
</span><span class='line'>                <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">q</span><span class="p">),</span>
</span><span class='line'>                <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * @-</span>
</span><span class='line'><span class="cm">             * Simple assignments are not replaced either. They should be</span>
</span><span class='line'><span class="cm">             * handled by the alias removal part. All arguments should</span>
</span><span class='line'><span class="cm">             * be assigned their value before instruction p.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">hasSameArguments</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">hasSameSignature</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="o">!</span><span class="n">hasCommonResults</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="o">!</span><span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">isLinearFlow</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'>               <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">safetyBarrier</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#safetybarrier reached</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;Found a common expression &quot;</span> <span class="s">&quot;%d &amp;lt;-&amp;gt; %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">clrFunction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)]</span> <span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON MODIFIED EXPRESSION %d -&amp;gt; %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>                <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span> <span class="cm">/* end of search */</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;COMMON SKIPPED %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">)</span> <span class="p">,</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>            <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">vars</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_commonTerms: %d statements catched</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span> <span class="n">DEBUG_OPT_COMMONTERMS_MORE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_commonTerms: %d statements catched</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>6.常量表达式评估：</p>
<p>由编译器产生只涉及常量的参数的表达式可以被评估一次。它特别是与经常被调用的函数相关。一次的查询不会从这额外的步骤得益。考虑下列的包含重复使用的常量参数的代码片段。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span><span class="o">:=</span> <span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="mi">2</span><span class="p">;</span>      <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="o">=</span> <span class="mi">3</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">d:</span><span class="o">=</span> <span class="n">calc</span><span class="p">.</span><span class="n">flt</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>    <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="nl">e:</span><span class="o">=</span> <span class="n">mmath</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>   <span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">aliasRemoval</span><span class="p">();</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">evaluate</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>会被转换成代码块</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="o">-</span><span class="mf">0.279415488</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">同样的我们尝试基于常量捕捉</span><span class="n">barrier</span><span class="err">块</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB常量表达式优化  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span>  <span class="nf">OPTconstantsImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fnd</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">,</span> <span class="o">*</span><span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="n">VarPtr</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span> <span class="o">*</span><span class="n">cst</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">OPTDEBUGconstants</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#OPT_CONSTANTS: MATCHING CONSTANTS ELEMENTS</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">alias</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="n">cst</span><span class="o">=</span> <span class="p">(</span><span class="n">VarPtr</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">VarPtr</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="n">index</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">cst</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">alias</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">cst</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">[</span> <span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isVarFixed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="n">x</span><span class="o">=</span> <span class="n">getVar</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fnd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>            <span class="n">y</span><span class="o">=</span> <span class="n">cst</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">==</span> <span class="n">y</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                 <span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span> <span class="o">==</span> <span class="n">y</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">ATOMcmp</span><span class="p">(</span><span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">,</span> <span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">),</span> <span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">y</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">OPTDEBUGconstants</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_constants: matching elements %s %d %d &quot;</span><span class="p">,</span> <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">),</span> <span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">ATOMprint</span><span class="p">(</span><span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">.</span><span class="n">vtype</span><span class="p">,</span><span class="n">VALptr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">x</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">value</span><span class="p">),</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="cm">/* re-use a constant */</span>
</span><span class='line'>                <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span> <span class="n">index</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>                <span class="n">fnd</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">fnd</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>            <span class="n">OPTDEBUGconstants</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;swith elements %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>            <span class="n">cst</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>            <span class="n">index</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">n</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_constants: %d constant duplicates removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">cst</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>7.代价模型方法:</p>
<p>代价模型是许多优化决定的基础。代价参数经常是（中间的）结果的大小和反应的时间。换言之，它们是运行聚集，如，从模拟运行中得到的最大的内存使用和总共的运行时间。当前的实现包含一个框架和对自身以代价为基础的例子。OPTIMIZER.COSTMODEL（）以自己的方式在MAL程序中运行寻找关系运算和估计它们结果的大小。估计的大小被置后作为属性ROWS。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">r</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">1000</span><span class="p">}</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="nl">rs:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nl">rr:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="nl">j:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">rs</span><span class="p">,</span><span class="n">rr</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">costModel</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>该表指令的属性如下：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">r</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">s</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">1000</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">rs</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">501</span><span class="p">}</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">rr</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
</span><span class='line'><span class="n">j</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">100</span><span class="p">}</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">rs</span><span class="p">,</span><span class="n">rr</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>代价估计在真正的数据分布上未用任何的统计。它依赖于由front-end或其它优化器提供的ROWS属性。它只是使用了一些启发式代价估计器。然而，它保证空的结果会被ROWS=0标记，如果估计是精确的，否则它假设至少一个结果行。这个属性使安全传递代价估计的结果到减少代码的EMPTYSET优化器成为可能。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB代价估计实现代码   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">cost</span> <span class="n">will</span> <span class="n">be</span> <span class="n">used</span> <span class="n">in</span> <span class="n">many</span> <span class="n">places</span> <span class="n">to</span> <span class="n">make</span> <span class="n">decisions</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Access</span> <span class="n">should</span> <span class="n">be</span> <span class="n">fast</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">The</span> <span class="n">SQL</span> <span class="n">front</span><span class="o">-</span><span class="n">end</span> <span class="n">also</span> <span class="n">makes</span> <span class="n">the</span> <span class="n">BAT</span> <span class="n">index</span> <span class="n">available</span> <span class="n">as</span> <span class="n">the</span>
</span><span class='line'> <span class="o">*</span> <span class="n">property</span> <span class="n">bid</span><span class="p">.</span> <span class="n">This</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">access</span> <span class="n">the</span> <span class="n">BAT</span> <span class="n">and</span> <span class="n">involve</span>
</span><span class='line'> <span class="o">*</span> <span class="n">more</span> <span class="n">properties</span> <span class="n">into</span> <span class="n">the</span> <span class="n">decision</span> <span class="n">procedure</span><span class="p">.</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Also</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">you</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">re</span><span class="o">-</span><span class="n">use</span> <span class="n">variables</span><span class="p">,</span> <span class="n">because</span> <span class="n">then</span> <span class="n">the</span>
</span><span class='line'> <span class="o">*</span> <span class="n">row</span> <span class="n">count</span> <span class="n">becomes</span> <span class="n">non</span><span class="o">-</span><span class="n">deterministic</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">OPTcostModelImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">wrd</span> <span class="n">k</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">sortrevRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sortReverse&quot;</span><span class="p">,</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">sortrevTailRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sortReverseTail&quot;</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">projectRef</span><span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;project&quot;</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">algebraRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markTRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">markHRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectNotNilRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortTailRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortrevRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sortrevTailRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">projectRef</span>  <span class="p">){</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">unionRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">kunionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span><span class="o">+</span><span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">kdifferenceRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="n">c2</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="n">c1</span><span class="o">:</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinPathRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* assume 1-1 joins */</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">c2</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* assume 1-1 semijoins */</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">c1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">c2</span><span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c2</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">uselectRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetaselectRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">thetauselectRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">100</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span><span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">crossRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,((</span><span class="n">log</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span> <span class="n">c1</span><span class="p">)</span> <span class="o">+</span> <span class="n">log</span><span class="p">((</span><span class="kt">double</span><span class="p">)</span> <span class="n">c2</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">log</span><span class="p">(</span><span class="n">INT_MAX</span><span class="p">)</span> <span class="o">?</span> <span class="n">INT_MAX</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">*</span> <span class="n">c2</span> <span class="o">+</span><span class="mi">1</span><span class="p">)),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">tuniqueRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">50</span> <span class="o">?</span> <span class="n">c1</span> <span class="o">:</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batcalcRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">ifthenelseRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batstrRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">batRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">reverseRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">setWriteModeRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">hashRef</span>  <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">mirrorRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">appendRef</span> <span class="o">||</span>
</span><span class='line'>               <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">insertRef</span> <span class="p">){</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * Updates are a little more complicated, because you have to</span>
</span><span class='line'><span class="cm">             * propagate changes in the expected size up the expression tree.</span>
</span><span class='line'><span class="cm">             * For example, the SQL snippet:</span>
</span><span class='line'><span class="cm">             *     _49:bat[:oid,:oid]{rows=0,bid=622}  := sql.bind_dbat(&quot;sys&quot;,&quot;example&quot;,3);</span>
</span><span class='line'><span class="cm">             *     _54 := bat.setWriteMode(_49);</span>
</span><span class='line'><span class="cm">             *     bat.append(_54,_47,true);</span>
</span><span class='line'><span class="cm">             * shows what is produced when it encounters a deletion. If a non-empty</span>
</span><span class='line'><span class="cm">             * append is not properly passed back to _49, the emptySet</span>
</span><span class='line'><span class="cm">             * optimizer might remove the complete deletion code.</span>
</span><span class='line'><span class="cm">             * The same holds for replacement operations, which add information to</span>
</span><span class='line'><span class="cm">             * an initially empty insertion BAT.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                <span class="cm">/* insert BAT */</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">+</span> <span class="n">c2</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="cm">/* insert scalars */</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">deleteRef</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>                <span class="cm">/* delete BAT */</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span> <span class="o">==</span><span class="mi">0</span><span class="o">?</span> <span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="o">-</span><span class="n">c2</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="cm">/* insert scalars */</span>
</span><span class='line'>                <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">c1</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span> <span class="n">c1</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">insertRef</span><span class="p">){</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span> <span class="cm">/* faked */</span>
</span><span class='line'>            <span class="n">OPTbackpropagate</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span><span class="n">groupRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span><span class="n">newRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,(</span> <span class="n">c1</span> <span class="o">/</span> <span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">aggrRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sumRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">minRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">maxRef</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">avgRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span> <span class="n">c1</span><span class="o">?</span><span class="n">c1</span><span class="o">:</span><span class="n">c1</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">countRef</span><span class="p">){</span>
</span><span class='line'>            <span class="n">newRows</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>        <span class="cm">/* copy the rows property */</span>
</span><span class='line'>        <span class="n">c1</span> <span class="o">=</span> <span class="n">getVarRows</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">c1</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">ValRecord</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">varSetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">rowsProp</span><span class="p">,</span> <span class="n">op_eq</span><span class="p">,</span> <span class="n">VALset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">v</span><span class="p">,</span> <span class="n">TYPE_wrd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">c1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_costModel: processed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>8.数据流优化器 ：</p>
<p>MAL程序很大程度上是执行计划的逻辑描述。至少它关注没有副影响的操作。对于这些子计划执行的顺序需要的不是一个固定的优先级而可能是数据流驱动的评估。甚至使用多核互不影响地工作在数据流图中。数据流优化器分析代码和为了数据流驱动执行用保护块包装健壮的代码。当然，这只是必要的如果你可以前端决定可能有多线程的运行。</p>
<p>对于运行，解析器根据可用处理器核的数量来初始化多线程。接下来，合格的指令被排序和被解析器线程解析。数据流块可能不是成堆的。因此，为内联代码产生的任何数据流块首先被去除。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB数据流优化器实现代码  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTdataflowImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">entries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">flowblock</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dumbcopy</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">init</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/* don&#39;t use dataflow on single processor systems */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">GDKnr_threads</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* inlined functions will get their dataflow control later */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="p">),</span><span class="n">inlineProp</span><span class="p">)</span><span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">span</span><span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">init</span><span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">init</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="o">+</span><span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">init</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="n">removeDataflow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">limit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* inject new dataflow barriers */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">FALSE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUnsafeFunction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="n">blockCntrl</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">dumbcopy</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="o">||</span> <span class="n">dflowAssignTest</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="cm">/* close old flow block */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                        <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                        <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                        <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>                <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>                <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">                   executed, either sequentially or in parallell */</span>
</span><span class='line'>                <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>                <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">dumbcopy</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">dumbcopy</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="cm">/* close old flow block */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                        <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                            <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                            <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                            <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                            <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                    <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">                       executed, either sequentially or in parallell */</span>
</span><span class='line'>                    <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dumbcopy</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dumbcopy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">assert</span><span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">flowblock</span> <span class="o">=</span> <span class="n">newTmpVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">TYPE_bit</span><span class="p">);</span>
</span><span class='line'>        <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/* check if the instruction can start a flow */</span>
</span><span class='line'>    <span class="cm">/* this should be a function call with multiple arguments */</span>
</span><span class='line'>    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">||</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">start</span><span class="p">)</span>
</span><span class='line'>                <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">dflowAssignTest</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">cnt</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">)</span>
</span><span class='line'>        <span class="n">entries</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* close old flow block */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">flowblock</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sf</span> <span class="o">=</span> <span class="n">simpleFlow</span><span class="p">(</span><span class="n">old</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">InstrPtr</span> <span class="n">r</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                <span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                <span class="n">init</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">k</span><span class="p">)]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">newFcnCall</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">languageRef</span><span class="p">,</span><span class="n">dataflowRef</span><span class="p">);</span>
</span><span class='line'>        <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">BARRIERsymbol</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* dataflow blocks are transparent, because they are always</span>
</span><span class='line'><span class="cm">           executed, either sequentially or in parallell */</span>
</span><span class='line'>        <span class="n">varSetProperty</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="s">&quot;transparent&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">start</span> <span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>            <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sf</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">entries</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>        <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span><span class="o">=</span> <span class="n">EXITsymbol</span><span class="p">;</span>
</span><span class='line'>        <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">flowblock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">entries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">flowblock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* take the remainder as is */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">init</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_dataflow: %d flow blocks created</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>9.去除无用代码</p>
<p>无用代码碎片通过赋值到不再使用的变量被识别。它可以被探测通过标记作为使用的参数作为相关的所有的变量。同时，我们建立应该在最后结果出现的一系列指令。新建的代码块在一次扫描中建立，去除无用的指令。指令对环境产生副影响，如，输出和更新BAT应该被考虑进来。这样（可能递归）函数应该被标记有一个（不安全）的属性。现在我们识别了几个重要的，否则，指令被标记为控制流指令应该被保留。一个说明性例子的MAL片段如下：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V10</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">V19</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V22</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V23</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V22</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">deadCodeRemoval</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>去除无用的代码使程序缩小到一下的短小的代码块：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;done&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>对无用代码的提炼来源与使用停止存在的参数因为行为被优化器做了。如，在下面的代码片段PUSHRANGES优化器可能得出变量V31变为空的和简单地通过去掉赋值语句注入一个‘无用’变量。这同时使其他代码无用。</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V30</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span> <span class="n">V7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="n">V31</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">V30</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="n">V32</span> <span class="o">:=</span> <span class="n">aggr</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">V31</span><span class="p">);</span>
</span><span class='line'><span class="n">io</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">V32</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB去除无用的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTdeadcodeImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">se</span><span class="p">,</span><span class="n">limit</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>     <span class="cm">/* to fool compilers */</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">clrDeclarations</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="n">chkDeclarations</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">se</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">se</span><span class="p">){</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">!=</span> <span class="n">NOOPsymbol</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">isVarUsed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">se</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">NOOPsymbol</span><span class="p">){</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">assertRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">isVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">1</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">se</span> <span class="o">||</span> <span class="n">hasSideEffects</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">)</span> <span class="o">||</span> <span class="n">isUpdateInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">isProcedure</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>  <span class="o">||</span>
</span><span class='line'>            <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">varGetProp</span><span class="p">(</span> <span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">unsafeProp</span> <span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="cm">/* ==side-effect */</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_deadcode: %d statements removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* we may have uncovered new use-less operations */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">+=</span> <span class="n">OPTdeadcodeImplementation</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="n">stk</span><span class="p">,</span> <span class="n">pci</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>10.去除空集：</p>
<p>在MAL优化期间其中最关键决定是估计产生和消耗的BAT的大小。两种情况对标志处理有兴趣。也就是，当一个BAT被知道没有包含元组和元组只有一个元素。这样的信息可能来自应用领域只是或者作为从标志评估另外的影响。这关联到作为属性被探测的程序。空集属性被呈现的消减算法使用。任何空集在程序中被传播到达一个更小和因此更快的评估。如，考虑接下来的MAL测试：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V10</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="n">V11</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">V10</span><span class="p">);</span>
</span><span class='line'><span class="n">V12</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">kdifference</span><span class="p">(</span><span class="n">V7</span><span class="p">,</span><span class="n">V11</span><span class="p">);</span>
</span><span class='line'><span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V12</span><span class="p">);</span>
</span><span class='line'><span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">costModel</span><span class="p">();</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">emptySet</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>调用优化器用接下来的程序片段取代上面的程序</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V10</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="kt">int</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="n">V11</span><span class="p">{</span><span class="n">rows</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V12</span> <span class="o">:=</span> <span class="n">V7</span><span class="p">;</span>
</span><span class='line'><span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V12</span><span class="p">);</span>
</span><span class='line'><span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这代码块可以使用别名传播和去除无用代码继续优化。最后的代码块如下：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">V1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V7</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">V16</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">markH</span><span class="p">(</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">V17</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">V16</span><span class="p">,</span><span class="n">V7</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">V1</span><span class="p">,</span><span class="n">V17</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在空集传播时，新的候选者可能出现。如，与空集进行交运算还是得到空集。它成为中间优化的目标。当前的实现是保守的。一个有限的指令集合被考虑。任何添加到MonetDB指令集调用评估它们的影响。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB去除空集的代码实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>  <span class="nf">ESevaluate</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">existRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;exist&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">uniqueRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;unique&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">suniqueRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sunique&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">intersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;intersect&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">sintersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;sintersect&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">kintersectRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;kintersect&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">fragmentRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;fragment&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">alias</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">runonce</span><span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">,</span> <span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">,</span> <span class="n">ctop</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">,</span> <span class="o">*</span><span class="n">constraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* get query property */</span>
</span><span class='line'><span class="n">runonce</span> <span class="o">=</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">runonceProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">constraints</span><span class="o">=</span> <span class="p">(</span><span class="n">InstrPtr</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">InstrPtr</span><span class="p">)</span><span class="o">*</span><span class="n">slimit</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">constraints</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">alias</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">alias</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span> <span class="o">=</span> <span class="n">limit</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span> <span class="o">=</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">constraints</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">alias</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Symbolic evaluation of the empty BAT variables */</span>
</span><span class='line'><span class="cm">/* by looking at empty BAT arguments */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>                <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argv</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">alias</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)];</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * The bulk of the intelligence lies in inspecting calling</span>
</span><span class='line'><span class="cm">     * sequences to filter and replace calls with empty arguments.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">sqlRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>       <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">bindidxRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">binddbatRef</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">InstrPtr</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * @-</span>
</span><span class='line'><span class="cm">         * The emptyset assertion is only needed once for relational insertions.</span>
</span><span class='line'><span class="cm">         * We assume here that string constants have been matched already.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">bindRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">runonce</span> <span class="o">==</span> <span class="n">FALSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span> <span class="n">j</span><span class="o">=</span><span class="n">ctop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>                <span class="n">q</span><span class="o">=</span> <span class="n">constraints</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">2</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">,</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">2</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">strcmp</span><span class="p">(</span><span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">3</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">,</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">3</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">sval</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="cm">/* no updates etc */</span>
</span><span class='line'>                    <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span> <span class="o">==</span> <span class="n">getVarConstant</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">5</span><span class="p">)).</span><span class="n">val</span><span class="p">.</span><span class="n">ival</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                    <span class="cm">/* don&#39;t generate the assertion */</span>
</span><span class='line'>                    <span class="k">goto</span> <span class="n">ignoreConstraint</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="n">newStmt1</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">constraintsRef</span><span class="p">,</span> <span class="s">&quot;emptySet&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">constraints</span><span class="p">[</span><span class="n">ctop</span><span class="o">++</span><span class="p">]</span><span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nl">ignoreConstraint:</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">)])</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* decode operations */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="n">existRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="cm">/* always false */</span>
</span><span class='line'>                    <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">=</span> <span class="n">ASSIGNsymbol</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushBit</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">selectRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">tuniqueRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">likeRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">sortRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">sortTailRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">sortHTRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">sortTHRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">uniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">suniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">kuniqueRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">intersectRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">semijoinRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">sintersectRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">kintersectRef</span>  <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">fragmentRef</span> <span class="p">){</span>
</span><span class='line'>
</span><span class='line'>                    <span class="cm">/* result is empty */</span>
</span><span class='line'>                    <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">differenceRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">kdifferenceRef</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">sunionRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">kunionRef</span> <span class="o">||</span>
</span><span class='line'>                     <span class="n">f</span> <span class="o">==</span> <span class="n">unionRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="cm">/* copy non-empty argument */</span>
</span><span class='line'>                    <span class="k">if</span><span class="p">(</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">propagate</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">propagate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">batRef</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">f</span> <span class="o">==</span> <span class="n">reverseRef</span> <span class="o">||</span> <span class="n">f</span> <span class="o">==</span> <span class="n">mirrorRef</span> <span class="p">){</span>
</span><span class='line'>                    <span class="n">empty</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * @-</span>
</span><span class='line'><span class="cm">             * If the target variable is empty and the function does not</span>
</span><span class='line'><span class="cm">             * have a side-effect, we can replace it with a construction</span>
</span><span class='line'><span class="cm">             * of the empty set. The dead-code optimizer will take care</span>
</span><span class='line'><span class="cm">             * of removal of superflous constructions.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="o">==</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ASSIGNsymbol</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="o">!</span><span class="n">isLinearFlow</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">))){</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">tpe</span><span class="o">=</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="n">clrFunction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>                <span class="n">setModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">batRef</span><span class="p">);</span>
</span><span class='line'>                <span class="n">setFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">newRef</span><span class="p">);</span>
</span><span class='line'>                <span class="n">p</span><span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">tpe</span><span class="p">)));</span>
</span><span class='line'>                <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">newTypeVariable</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">tpe</span><span class="p">)));</span>
</span><span class='line'>                <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_emptyset: %d empty sets statements removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'>    <span class="n">clrAllTypes</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>     <span class="cm">/* force a complete resolve */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">constraints</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">alias</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">We</span> <span class="n">first</span> <span class="n">have</span> <span class="n">to</span> <span class="n">find</span> <span class="n">all</span> <span class="n">candidates</span> <span class="k">for</span> <span class="n">empty</span> <span class="n">set</span> <span class="n">removal</span><span class="p">.</span>
</span><span class='line'>  <span class="n">They</span> <span class="n">are</span> <span class="n">recognized</span> <span class="n">by</span> <span class="n">an</span> <span class="n">estimated</span> <span class="n">zero</span> <span class="n">row</span> <span class="n">count</span> <span class="n">and</span> <span class="n">they</span>
</span><span class='line'>  <span class="n">are</span> <span class="n">not</span> <span class="n">the</span> <span class="n">target</span> <span class="n">of</span> <span class="n">an</span> <span class="n">update</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">OPTemptySetImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">empty</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">empty</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vsize</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">empty</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">getVarRows</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">OPTDEBUGemptySet</span>
</span><span class='line'>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#START emptyset optimizer %d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">empty</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">OPTDEBUGemptySet</span> <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">i</span><span class="o">=</span> <span class="n">ESevaluate</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">,</span> <span class="n">empty</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">empty</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>11.垃圾回收：</p>
<p>对临时的变量的垃圾回收，如字符串和BATs，在返回函数调用的时候发生。特别对于BATs这可能保留可观的资源锁定长于严格必要的时间。尽管程序员可以影响它们的生命周期通过给它们赋值NIL，从而触发垃圾会后，依靠优化器去注入这样的语句更加恰当。因为它使程序更加短小和有一个更好的代码优化的目标。OPTIMIZER.GARBAGECOLLECTOR()操作去除所有结束生命周期的BAT为新的提供空间。这特别被调用为优化的最后一步。垃圾回收影响的一小段代码：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">t1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">t2</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">132000</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">t3</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">t4</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="n">t5</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'><span class="n">t6</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'><span class="n">t7</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'><span class="n">optimizer</span><span class="p">.</span><span class="n">garbageCollector</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>被转换为以下的代码块</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">t1</span> <span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="n">t2</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">132000</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">t3</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">t4</span> <span class="o">:=</span> <span class="n">array</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10560</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="n">t5</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t4</span><span class="p">);</span>
</span><span class='line'><span class="n">t6</span> <span class="o">:=</span> <span class="n">batcalc</span><span class="p">.</span><span class="n">oid</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t5</span><span class="p">);</span>
</span><span class='line'><span class="n">t7</span> <span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">t6</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t6</span><span class="p">);</span>
</span><span class='line'><span class="n">bat</span><span class="p">.</span><span class="n">setGarbage</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当前的算法是直接的。在每一条指令后，我们检查在未来其BAT参数是否需要。如果不需要，我们注入垃圾回收语句去释放她们呢，如果没有其它理由去保留它。这应该小心地去做，因为指令可能是循环的一部分。如果变量在循环里定义，那么我们可以安全地去掉它。</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB垃圾回收代码实现   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Keeping</span> <span class="n">variables</span> <span class="n">around</span> <span class="n">beyond</span> <span class="n">their</span> <span class="n">end</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">life</span><span class="o">-</span><span class="n">span</span>
</span><span class='line'> <span class="n">can</span> <span class="n">be</span> <span class="n">marked</span> <span class="n">with</span> <span class="n">the</span> <span class="n">proper</span> <span class="err">&#39;</span><span class="n">keep</span><span class="err">&#39;</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">OPTgarbageCollectorImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">pci</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">vlimit</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">actions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">Lifespan</span> <span class="n">span</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pci</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">span</span> <span class="o">=</span> <span class="n">setLifespan</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">span</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">limit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="n">vlimit</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">gc</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span>  <span class="o">~</span><span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">barrier</span> <span class="o">==</span> <span class="n">RETURNsymbol</span><span class="p">){</span>
</span><span class='line'>        <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blockStart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">==</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">isaBatType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">var</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">eolife</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">blockExit</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="cm">/* force garbage collection of all within upper block */</span>
</span><span class='line'>        <span class="n">depth</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">vlimit</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">==</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">isaBatType</span><span class="p">(</span><span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>                <span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">keepProp</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">=</span> <span class="n">newAssignment</span><span class="p">(</span><span class="n">mb</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">setVarUDFtype</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">setVarFixed</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">=</span> <span class="n">pushNil</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span> <span class="n">getVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">var</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">eolife</span> <span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">assert</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="n">assert</span><span class="p">(</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">token</span> <span class="o">==</span> <span class="n">ENDsymbol</span><span class="p">);</span>
</span><span class='line'><span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">gc</span> <span class="o">|=</span> <span class="n">GARBAGECONTROL</span><span class="p">;</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">OPTDEBUGgarbageCollector</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;#Garbage collected BAT variables </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">vlimit</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;%10s eolife %3d  begin %3d lastupd %3d end %3d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">getVarName</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">var</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">eolife</span><span class="p">,</span>
</span><span class='line'>        <span class="n">getBeginLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">getLastUpdate</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">),</span> <span class="n">getEndLifespan</span><span class="p">(</span><span class="n">span</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="s">&quot;End of GCoptimizer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">span</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_garbagecollector: %d variables reset</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><p>13.连接路径：</p>
<p>任务OPTIMIZER.JOINPATH()浏览代码寻找连接操作和级联它们到多连接路径。为了说明，考虑：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="nl">b:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="nl">c:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">j2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">j1</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">j3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">j4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">j3</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>优化器首先会通过它们连接的顺序替代所有的参数。下面的指令留给去除无用代码优化器优化</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">a</span><span class="o">:=</span> <span class="n">bat</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="o">:</span><span class="n">oid</span><span class="p">,</span><span class="o">:</span><span class="n">oid</span><span class="p">);</span>
</span><span class='line'><span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">j2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">j3:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">j4:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在原则上，连接路径可能包含改善性能的公共的子路径。SQL front-end 经常产生以下代码片段：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">t1</span><span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="nl">z1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">t2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">t2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>连接路径合并成：</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">z1</span><span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinPath</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>由启发式寻找最先的两个参数控制和重用实质的连接</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_13</span><span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">z1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">_13</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nl">z2:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">_13</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一个替代是公共重新使用的路径重识别到连接路径主体继承的部分</p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">x3</span><span class="o">:=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">r3:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">x3</span><span class="p">);</span>
</span><span class='line'><span class="nl">j1:</span><span class="o">=</span> <span class="n">join</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">r3</span><span class="p">);</span>
</span><span class='line'><span class="nl">rb:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="nl">ra:</span><span class="o">=</span> <span class="n">bat</span><span class="p">.</span><span class="n">reverse</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="nl">j1:</span><span class="o">=</span> <span class="n">algebra</span><span class="p">.</span><span class="n">joinpath</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">rb</span><span class="p">,</span><span class="n">ra</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MonetDB连接路径优化代码的实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">OPTjoinPathImplementation</span><span class="p">(</span><span class="n">Client</span> <span class="n">cntxt</span><span class="p">,</span> <span class="n">MalBlkPtr</span> <span class="n">mb</span><span class="p">,</span> <span class="n">MalStkPtr</span> <span class="n">stk</span><span class="p">,</span> <span class="n">InstrPtr</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span> <span class="n">actions</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">pc</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span> <span class="n">joinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;joinPath&quot;</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">leftjoinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;leftjoinPath&quot;</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'><span class="n">str</span> <span class="n">semijoinPathRef</span> <span class="o">=</span> <span class="n">putName</span><span class="p">(</span><span class="s">&quot;semijoinPath&quot;</span><span class="p">,</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="n">q</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="n">InstrPtr</span> <span class="o">*</span><span class="n">old</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">varcnt</span><span class="p">;</span>        <span class="cm">/* use count */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">limit</span><span class="p">,</span><span class="n">slimit</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">cntxt</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">stk</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varGetProp</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">inlineProp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">old</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stmt</span><span class="p">;</span>
</span><span class='line'><span class="n">limit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="p">;</span>
</span><span class='line'><span class="n">slimit</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="n">newMalBlkStmt</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ssize</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* beware, new variables and instructions are introduced */</span>
</span><span class='line'><span class="n">pc</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span> <span class="cm">/* to find last assignment */</span>
</span><span class='line'><span class="n">varcnt</span><span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">GDKzalloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">vtop</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">pc</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">varcnt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pc</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">pc</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">varcnt</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">varcnt</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * @-</span>
</span><span class='line'><span class="cm"> * Count the variable use as arguments first.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">limit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span> <span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="n">getModuleId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">==</span> <span class="n">joinRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span> <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">)){</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * @-</span>
</span><span class='line'><span class="cm">         * Try to expand its argument list with what we have found so far.</span>
</span><span class='line'><span class="cm">         * This creates a series of join paths, many of which will be removed during deadcode elimination.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">q</span><span class="o">=</span> <span class="n">copyInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">r</span><span class="o">=</span> <span class="n">getInstrPtr</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">pc</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]);</span>
</span><span class='line'>            <span class="cm">/*</span>
</span><span class='line'><span class="cm">             * @-</span>
</span><span class='line'><span class="cm">             * Don&#39;t inject a pattern when it is used more than once.</span>
</span><span class='line'><span class="cm">             */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>                <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#double use %d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">),</span> <span class="n">varcnt</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]);</span>
</span><span class='line'>                    <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#expand list </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>                <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">joinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">joinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                    <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">leftjoinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">leftjoinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                    <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="n">r</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getModuleId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">algebraRef</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">semijoinRef</span>  <span class="o">||</span> <span class="n">getFunctionId</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">==</span> <span class="n">semijoinPathRef</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>                    <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span> <span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">k</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">r</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">k</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>                    <span class="n">q</span> <span class="o">=</span> <span class="n">pushArgument</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">OPTDEBUGjoinPath</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">chkTypes</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span> <span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nspace</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span><span class="n">TRUE</span><span class="p">);</span>
</span><span class='line'>            <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#new [left]joinPath instruction</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">printInstruction</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="n">mb</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">LIST_MAL_ALL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="p">){</span>
</span><span class='line'>            <span class="cm">/* no change */</span>
</span><span class='line'>            <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>            <span class="k">goto</span> <span class="n">wrapup</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * @-</span>
</span><span class='line'><span class="cm">         * Final type check and hardwire the result type, because that  can not be inferred directly from the signature</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span> <span class="o">!=</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="o">!</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_oid</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_void</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="o">!</span><span class="p">(</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_void</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>            <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">j</span><span class="p">))</span><span class="o">==</span> <span class="n">TYPE_oid</span><span class="p">)){</span>
</span><span class='line'>            <span class="cm">/* don&#39;t use it */</span>
</span><span class='line'>                <span class="n">freeInstruction</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>                <span class="k">goto</span> <span class="n">wrapup</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* fix the type */</span>
</span><span class='line'>        <span class="n">setVarUDFtype</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>        <span class="n">setVarType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span> <span class="n">getArg</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">newBatType</span><span class="p">(</span> <span class="n">getHeadType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">)),</span> <span class="n">getTailType</span><span class="p">(</span><span class="n">getArgType</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">))));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">joinRef</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">joinPathRef</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">3</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftjoinRef</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">leftjoinPathRef</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">argc</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>  <span class="n">getFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">==</span> <span class="n">semijoinRef</span><span class="p">)</span>
</span><span class='line'>            <span class="n">setFunctionId</span><span class="p">(</span><span class="n">q</span><span class="p">,</span><span class="n">semijoinPathRef</span><span class="p">);</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nl">wrapup:</span>
</span><span class='line'>    <span class="n">pushInstruction</span><span class="p">(</span><span class="n">mb</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">retc</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">pc</span><span class="p">[</span><span class="n">getArg</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">=</span> <span class="n">mb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">stop</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span><span class="p">(;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">slimit</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>        <span class="n">freeInstruction</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="cm">/* perform the second phase, try out */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">actions</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">actions</span> <span class="o">+=</span> <span class="n">OPTjoinSubPath</span><span class="p">(</span><span class="n">cntxt</span><span class="p">,</span> <span class="n">mb</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="n">GDKfree</span><span class="p">(</span><span class="n">pc</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">varcnt</span> <span class="p">)</span> <span class="n">GDKfree</span><span class="p">(</span><span class="n">varcnt</span><span class="p">);</span>
</span><span class='line'><span class="n">DEBUGoptimizers</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">cntxt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fdout</span><span class="p">,</span><span class="s">&quot;#opt_joinpath: %d statements glued</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">actions</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">actions</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB 内存映射mmap]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/29/monetdbs-memory/"/>
    <updated>2013-03-29T23:47:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/29/monetdbs-memory</id>
    <content type="html"><![CDATA[<blockquote><p><p>在学计算机组成原理时，了解到为了平衡CPU的高速与内存慢速，在CPU与内存之间增加了L1 cache，L2 cache，以加快CPU对内存数据的访问。但同时了解到进程可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区和访问大于可用物理内存地址的缓冲区（可与磁盘之间切换）。虚拟地址通过TLB转化为物理地址，若物理地址属于内存空间，即直接访问，若不在，即需要进行磁盘切换。层级的内存架构图：</p>
<!-- more -->
<img src="/assets/images/memory.jpg" alt="&quot;memory&quot;" />
mmap将文件或者其它对象映射到内存。当从内存中读写时，就相当于读写文件中相应的字节。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mmap函数声明  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">mman</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">addr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">,</span><span class="kt">int</span> <span class="n">fileds</span><span class="p">,</span> <span class="kt">off_t</span> <span class="n">off</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
图示说明mmap：
<img src="/assets/images/mmap.png" alt="&quot;mmap&quot;" />
MonetDB使用mmap实现大内存块的分配和大文件的内存映射,这样有利于数据的快速查找。因为数据不在内存，直接进行磁盘切换（虚拟地址->物理地址）。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Linux大内存的分配  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">MT_vmalloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">maxsize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MMAP_OPEN_DEV_ZERO</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="o">*</span><span class="n">maxsize</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">,</span> <span class="n">PROT_NONE</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_NORESERVE</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">mmap</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">MMAP_FLAGS</span><span class="p">(</span><span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_FIXED</span><span class="p">),</span> <span class="n">MMAP_FD</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">MMAP_CLOSE_DEV_ZERO</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="n">q</span> <span class="o">==</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">)</span> <span class="o">?</span> <span class="nb">NULL</span> <span class="o">:</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Windows大内存的分配  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">MT_vmalloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">maxsize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">MT_PAGESIZE</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">MT_SEGSIZE</span><span class="p">(</span><span class="o">*</span><span class="n">maxsize</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1000000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mode</span> <span class="o">=</span> <span class="n">MEM_TOP_DOWN</span><span class="p">;</span>    <span class="cm">/* help NT in keeping memory defragmented */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">MT_mmap_lock</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">maxsize</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">VirtualAlloc</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">maxsize</span><span class="p">,</span> <span class="n">MEM_RESERVE</span> <span class="o">|</span> <span class="n">mode</span><span class="p">,</span> <span class="n">PAGE_NOACCESS</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">maxsize</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">VirtualAlloc</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">MEM_COMMIT</span> <span class="o">|</span> <span class="n">mode</span><span class="p">,</span> <span class="n">PAGE_READWRITE</span><span class="p">);</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">MT_mmap_lock</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mnstr_printf</span><span class="p">(</span><span class="n">GDKstdout</span><span class="p">,</span> <span class="s">&quot;#VirtualAlloc(&quot;</span> <span class="n">PTRFMT</span> <span class="s">&quot;,&quot;</span> <span class="n">SZFMT</span> <span class="s">&quot;,MEM_COMMIT,PAGE_READWRITE): failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">PTRFMTCAST</span> <span class="n">a</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>MonetDB直接使用系统的mmap，由它来进行内存与磁盘的交互。而在这基础上，在进行内存分配管理。譬如在MonetDB中有使用sql_allocator建立内存缓冲区，当缓冲区内存不够时，才向系统申请。这样能加快内存申请速度和方便管理。此种方式是使用指针数组的管理内存，而没有使用链表。这与C++STL库的空间分配器类似，对于MonetDB内部数据结构，如list，hashtable，都是使用sql_allocator来管理其申请的内存。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sql_allocator结构体  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="k">typedef</span> <span class="k">struct</span> <span class="n">sql_allocator</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">nr</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">**</span><span class="n">blks</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">used</span><span class="p">;</span>    <span class="cm">/* memory used in last block */</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">usedmem</span><span class="p">;</span> <span class="cm">/* used memory */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">sql_allocator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
具体的分配分三种情况处理，一：大于sz > SA_BLOCK,直接调用系统的GDKmalloc来分配；二：剩下来的内存不够分配sz > (SA_BLOCK-sa->used) 三：内存足够，只需进行必要的处理。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sa_alloc函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="err">#</span><span class="n">define</span> <span class="n">round16</span><span class="p">(</span><span class="n">sz</span><span class="p">)</span> <span class="p">((</span><span class="n">sz</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">~</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sa_alloc</span><span class="p">(</span> <span class="n">sql_allocator</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sa</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">sz</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="n">sz</span> <span class="o">=</span> <span class="n">round16</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sz</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">SA_BLOCK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">sz</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span> <span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span> <span class="o">=</span> <span class="n">RENEW_ARRAY</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">,</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sz</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">(</span><span class="n">SA_BLOCK</span><span class="o">-</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">used</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">GDKmalloc</span><span class="p">(</span><span class="n">SA_BLOCK</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span> <span class="o">*=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span> <span class="o">=</span> <span class="n">RENEW_ARRAY</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">,</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">,</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">used</span> <span class="o">=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">blks</span><span class="p">[</span><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nr</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">used</span><span class="p">;</span>
</span><span class='line'><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">used</span> <span class="o">+=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'><span class="n">sa</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">usedmem</span> <span class="o">+=</span> <span class="n">sz</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonetDB 捕捉信号]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/28/catch-signal-in-monetdb/"/>
    <updated>2013-03-28T23:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/28/catch-signal-in-monetdb</id>
    <content type="html"><![CDATA[<blockquote><p><p>MonetDB运行在Unix系统上，就需要进行一些系统的捕捉和处理。下列是常见的几种信号：</p>
<!-- more -->
<table border="1">
<tr><td>SIGCHLD:</td><td>在一个进程终止或停止时，将SIGCHLD信号发送给父进程。信号捕捉函数中通常要调用一种wait函数取得子进程ID和其终止的状态。</td></tr>
<tr><td>SIGHUP:</td><td>通常此信号通知守护进程，以重新读取它们的配置文件。</td></tr>
<tr><td>SIGINT:</td><td>当用户按中断键(一般是DELETE或Ctrl+C)时，终端驱动程序产生此信号并送至前台进程组中的每一个进程。</td></tr>
<tr><td>SIGKILL:</td><td>这是不能被捕捉或忽略的信号之一。它向系统管理员提供了一种可以杀死任一进程的可靠方法。</td></tr>
<tr><td>SIGQUIT:</td><td>当用户在终端上按退出键（Ctrl+)时，产生此信号，并送至前台进程组中的所有进程。此信号不仅会终止前台进程组，同时还会产生一个core文件。</td></tr>
</table>
UNIX的处理信号集的操作：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigemptyset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigfillset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigaddset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigdelset</span><span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigismember</span><span class="p">(</span><span class="n">sonct</span> <span class="n">sigset_T</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span><span class="kt">int</span> <span class="n">signo</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
UNIX sigaction函数的功能是检查和修改与指定信号相关联的处理动作。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sigaction</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sigaction</span><span class="o">*</span> <span class="kr">restrict</span> <span class="n">act</span><span class="p">,</span>
</span><span class='line'>                                <span class="k">struct</span> <span class="n">sigaction</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">oact</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">sigaction</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">sa_handler</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>     <span class="cm">/*addr of signal handler*/</span>
</span><span class='line'>    <span class="n">sigset_t</span> <span class="n">sa_mask</span><span class="p">;</span>            <span class="cm">/*or SIG_IGN,or SIG_DFL*/</span>
</span><span class='line'>    <span class="kt">int</span>     <span class="n">sa_flags</span><span class="p">;</span>            <span class="cm">/*signal options*/</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">sa_sigaction</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="n">siginfo_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>     <span class="cm">/*alternate handler*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
下面是MonetDB捕捉SIGINT，SIGQUIT，SIGTERM信号的代码，处理的是handler函数
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'><span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">handler</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span><span class='line'>        <span class="n">sigaction</span><span class="p">(</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>    <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Handler</span> <span class="k">for</span> <span class="n">SIGINT</span><span class="p">,</span> <span class="n">SIGTERM</span> <span class="n">and</span> <span class="n">SIGQUIT</span><span class="p">.</span>  <span class="n">This</span> <span class="n">starts</span> <span class="n">a</span> <span class="n">graceful</span>
</span><span class='line'> <span class="o">*</span> <span class="n">shutdown</span> <span class="n">of</span> <span class="n">merovingian</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span>  <span class="n">handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">signame</span> <span class="o">=</span> <span class="n">sigtostr</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">signame</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;caught signal %d, starting shutdown sequence</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;caught %s, starting shutdown sequence</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">signame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">_mero_keep_listening</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
捕捉SIGHUP信号，处理是huphandler函数，重新读取配置文件
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'><span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">sa</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">huphandler</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGHUP</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>    <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Handler</span> <span class="k">for</span> <span class="n">SIGHUP</span><span class="p">,</span> <span class="n">causes</span> <span class="n">a</span> <span class="n">re</span><span class="o">-</span><span class="n">read</span> <span class="n">of</span> <span class="n">the</span> <span class="p">.</span><span class="n">merovingian_properties</span>
</span><span class='line'> <span class="o">*</span> <span class="n">file</span> <span class="n">and</span> <span class="n">the</span> <span class="n">logfile</span> <span class="n">to</span> <span class="n">be</span> <span class="n">reopened</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span> <span class="n">huphandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="kt">time_t</span> <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">tm</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">localtime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">now</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">mytime</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span class='line'><span class="n">confkeyval</span> <span class="o">*</span><span class="n">kv</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* re-read properties, we&#39;re in our dbfarm */</span>
</span><span class='line'><span class="n">readProps</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* check and trim the hash-algo from the passphrase for easy use</span>
</span><span class='line'><span class="cm"> * lateron */</span>
</span><span class='line'><span class="n">kv</span> <span class="o">=</span> <span class="n">findConfKey</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;passphrase&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">kv</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">h</span> <span class="o">=</span> <span class="n">kv</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">val</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">f</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="sc">&#39;}&#39;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">MONETDB5_PASSWDHASH</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">setConfVal</span><span class="p">(</span><span class="n">kv</span><span class="p">,</span> <span class="n">f</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* have to make sure the logger is not logging anything */</span>
</span><span class='line'><span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">strftime</span><span class="p">(</span><span class="n">mytime</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">mytime</span><span class="p">),</span> <span class="s">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="p">,</span> <span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">getConfVal</span><span class="p">(</span><span class="n">_mero_props</span><span class="p">,</span> <span class="s">&quot;logfile&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* reopen (or open new) file */</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_APPEND</span> <span class="o">|</span> <span class="n">O_CREAT</span><span class="p">,</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;forced to ignore SIGHUP: unable to open &quot;</span>
</span><span class='line'>            <span class="s">&quot;&#39;%s&#39;: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">,</span> <span class="s">&quot;%s END merovingian[&quot;</span> <span class="n">LLFMT</span> <span class="s">&quot;]: &quot;</span>
</span><span class='line'>            <span class="s">&quot;caught SIGHUP, closing logfile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">mytime</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">_mero_topdp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fflush</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">);</span>
</span><span class='line'>    <span class="n">_mero_topdp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">out</span> <span class="o">=</span> <span class="n">_mero_topdp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">err</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_mero_logfile</span> <span class="o">=</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="s">&quot;a&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">_mero_logfile</span><span class="p">,</span> <span class="s">&quot;%s BEG merovingian[&quot;</span> <span class="n">LLFMT</span> <span class="s">&quot;]: &quot;</span>
</span><span class='line'>            <span class="s">&quot;reopening logfile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">mytime</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">_mero_topdp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* logger go ahead! */</span>
</span><span class='line'><span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>捕捉SIGCHLD信号，处理childhandler，处理释放子进程的资源和清理。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_SIGINFO</span><span class="p">;</span>
</span><span class='line'><span class="n">sigemptyset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
</span><span class='line'><span class="n">sa</span><span class="p">.</span><span class="n">sa_sigaction</span> <span class="o">=</span> <span class="n">childhandler</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">sigaction</span><span class="p">(</span><span class="n">SIGCHLD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sa</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Mfprintf</span><span class="p">(</span><span class="n">oerr</span><span class="p">,</span> <span class="s">&quot;%s: FATAL: unable to create signal handlers: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>    <span class="n">MERO_EXIT</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span> <span class="n">Handles</span> <span class="n">SIGCHLD</span> <span class="n">signals</span><span class="p">,</span> <span class="n">that</span> <span class="n">is</span><span class="p">,</span> <span class="n">signals</span> <span class="n">that</span> <span class="n">a</span> <span class="n">parent</span> <span class="n">receives</span>
</span><span class='line'> <span class="o">*</span> <span class="n">about</span> <span class="n">its</span> <span class="n">children</span><span class="p">.</span>  <span class="n">This</span> <span class="n">handler</span> <span class="n">deals</span> <span class="n">with</span> <span class="n">terminated</span> <span class="n">children</span><span class="p">,</span> <span class="n">by</span>
</span><span class='line'> <span class="o">*</span> <span class="n">deregistering</span> <span class="n">them</span> <span class="n">from</span> <span class="n">the</span> <span class="n">internal</span> <span class="n">administration</span> <span class="p">(</span><span class="n">_mero_topdp</span><span class="p">)</span>
</span><span class='line'> <span class="o">*</span> <span class="n">with</span> <span class="n">the</span> <span class="n">necessary</span> <span class="n">cleanup</span><span class="p">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">void</span>  <span class="n">childhandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">,</span> <span class="n">siginfo_t</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">si</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">unused</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dpair</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">unused</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* wait for the child to get properly terminated, hopefully filling</span>
</span><span class='line'><span class="cm"> * in the siginfo struct on FreeBSD */</span>
</span><span class='line'><span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_EXITED</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_KILLED</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">!=</span> <span class="n">CLD_DUMPED</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* ignore traps, stops and continues, we only want terminations</span>
</span><span class='line'><span class="cm">     * of the client process */</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* get the pid from the former child, and locate it in our list */</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">_mero_topdp</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span> <span class="o">==</span> <span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_pid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* log everything that&#39;s still in the pipes */</span>
</span><span class='line'>        <span class="n">logFD</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">out</span><span class="p">,</span> <span class="s">&quot;MSG&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">,</span> <span class="n">_mero_logfile</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* remove from the list */</span>
</span><span class='line'>        <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* close the descriptors */</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">err</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_EXITED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) has exited with &quot;</span>
</span><span class='line'>                    <span class="s">&quot;exit status %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">,</span> <span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_KILLED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="o">*</span><span class="n">sigstr</span> <span class="o">=</span> <span class="n">sigtostr</span><span class="p">(</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">signum</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">sigstr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">snprintf</span><span class="p">(</span><span class="n">signum</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_status</span><span class="p">);</span>
</span><span class='line'>                <span class="n">sigstr</span> <span class="o">=</span> <span class="n">signum</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) was killed by signal &quot;</span>
</span><span class='line'>                    <span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">,</span> <span class="n">sigstr</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_code</span> <span class="o">==</span> <span class="n">CLD_DUMPED</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;database &#39;%s&#39; (%lld) has crashed &quot;</span>
</span><span class='line'>                    <span class="s">&quot;(dumped core)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">,</span>
</span><span class='line'>                    <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">pid</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">)</span>
</span><span class='line'>            <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">dbname</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">_mero_topdp_lock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Mfprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;received SIGCHLD from unknown child with pid %lld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span><span class="n">si</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">si_pid</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
