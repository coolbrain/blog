<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2014-03-07T23:26:28+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL 处理]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/28/sql-proccessing/"/>
    <updated>2013-04-28T23:45:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/28/sql-proccessing</id>
    <content type="html"><![CDATA[<blockquote><p><p>查询处理步骤：1.语法分析与翻译 2.优化  3.执行 如图：</p>
<p>用于执行一个查询的原语的操作序列称为<strong>查询执行计划</strong>（query-excution plan）或查询计算计划（query-evaluation plan）。查询执行计划引擎（query-execution engine）接受一个查询执行计划，。执行该计划并把结果返回给查询。</p>
<!-- more -->
<img src="/assets/images/sqlprocess.jpg" alt="&quot;sqlprocess&quot;" />
<p><strong>SQL运算处理的实现方法：</strong></p>
<p><strong>1.选择运算</strong>（select operation）：<p>
<p>A1（线性搜索） A2（二分搜索） A3（主索引，码属性等值比较） </p>
<p><strong>2.连接运算</strong>(join operation):</p>
<p>1.嵌套循环连接 2.块嵌套循环连接（若连接的结果大小几乎与两个关系的笛卡尔积相当） 3.<strong>索引嵌套循环连接</strong>（若存在索引） 4.<strong>归并连接</strong>（若关系已排序，则归并连接比较可取） 5.<strong>散列连接</strong>（把关系划分多个部分，是每个部分都能被内存所容纳。划分过程是通过连接属性的散列函数来进行，这样，相应的划分对可以独立地进行连接）如图：</p>
<img src="/assets/images/hashjoin.jpg" alt="&quot;hashjoin&quot;" />
<p><strong>3.去除重复：</strong>1.归并排序完，将相邻相同的去除，只保留一个 2.建立内存散列索引，只有不在索引的元组才插入；否则，元组被抛弃。</p>
<p><strong>4.集合运算：</strong>(union，intersection，except）</p>
<p>r∪s: 1. 对Hri建立内存散列索引  2.把Hsi中的元组加入散列索引中，条件是该元组不再散列索引中 3.把散列索引中的元组加入结果中</p>
<p>r∩s:  1. 对Hri建立内存散列索引  2.对Hsi的每个元组，检查散列索引，仅当它出现在散列索引中时将元组写到结果中。</p>
<p>r-s:  1. 对Hri建立内存散列索引  2.对Hsi的每个元组，检查散列索引，若它出现在散列索引中则将之从散列索引中删除。 3. 把散列索引中剩余的元组加入结果中 </p>
<p><strong>5.聚集运算:</strong>（min，max，count,avg,group by） 如去除重复，可以用排序和散列的方法。  </p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL 文法参考]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/26/sql-reference/"/>
    <updated>2013-04-26T21:46:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/26/sql-reference</id>
    <content type="html"><![CDATA[<blockquote><p><p>如果编译原理学得不错的话，根据sql的文法就可以写个程序来解析了,最简单的莫过于自顶向下递归解析。</p>
<p>sql数据定义:表定义，更改语句，删除语句和模式定义</p>
<!-- more -->
{% codeblock sql创建语句 lang:sql %}
create_statement:
 create {role_def | table_def | view_def | type_def | func_def | index_def | trigger_def | sequence_def}
{% endcodeblock %}
{% codeblock sql表定义的文法 lang:sql %}
table_def:
  CREATE [ TEMPORARY | LOCAL TEMPORARY | GLOBAL TEMPORARY ] TABLE table_name'(' table_content_source ')'
   [ ON COMMIT DELETE ROWS | ON COMMIT PRESERVE ROWS | ON COMMIT DROP ]</p></blockquote>

<p>table_content_source:
   table_element ',' ... | column_name ',' ... AS select_query [WITH NO DATA | WITH DATA]</p>

<p>table_element:</p>

<pre><code>column_name data_type [column_option ...]
</code></pre>

<p>  | CONSTRAINT constraint_name table_constraint_type
  | column_name WITH OPTIONS '(' column_option ','... ')'
  | LIKE table_name
  | column_name SERIAL
  | column_name BIGSERIAL</p>

<p>table_constraint_type:</p>

<pre><code>UNIQUE '(' column_name ',' ... ')' 
</code></pre>

<p>   | PRIMARY KEY '(' column_name ',' ... ')'
   | FOREIGN KEY '(' column_name ',' ... ')' REFERENCES table_name ['(' column_name ',' ... ')'] [ match_options ] [ ref_actions ]</p>

<p>column_option:</p>

<pre><code>DEFAULT default_value 
</code></pre>

<p>   | [ constraint_name ] column_constraint_type
   | GENERATED ALWAYS AS IDENTITY [ '(' serial_parameters ')' ]
   | AUTO_INCREMENT</p>

<p>column_constraint_type:</p>

<pre><code>NOT NULL | NULL | UNIQUE | PRIMARY KEY 
</code></pre>

<p>  | REFERENCES table_name [ '(' column_name ',' ... ')' ] [ match_options ] [ ref_actions ]</p>

<p>serial_parameters:</p>

<pre><code>[START WITH nonzero] 
</code></pre>

<p>  | [RESTART | RESTART WITH subquery
  | RESTART WITH nonzero]
  | [INCREMENT BY nonzero]
  | [MINVALUE nonzero | NOMINVALUE] | [MAXVALUE nonzero | NOMAXVALUE ] | [CACHE nonzero ] | [CYCLE | NONCYCLE]</p>

<p>match_options:</p>

<pre><code>MATCH { FULL | PARTIAL | SIMPLE }
</code></pre>

<p>ref_actions:</p>

<pre><code>ON UPDATE { NO ACTION | CASCADE | RESTRICT | SET NULL | SET DEFAULT }
</code></pre>

<p>  | ON DELETE { NO ACTION | CASCADE | RESTRICT | SET NULL | SET DEFAULT }
  | { ON DELETE | ON UPDATE } { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
  | { ON UPDATE | ON DELETE } { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表的标识列 lang:sql %}
CREATE TABLE table_name table_content_source</p></blockquote>

<p>table_content_source:</p>

<pre><code>'(' table_element ',' ... ')'
</code></pre>

<p>  | ['('column_name ',' ...')'] AS select_query [WITH NO DATA | WITH DATA]</p>

<p>table_element:</p>

<pre><code> column_name data_type [ column_option ...] 
</code></pre>

<p>   | column_name WITH OPTIONS '(' column_option ',' ... ')'</p>

<p>column_option:</p>

<pre><code> DEFAULT default_value 
</code></pre>

<p>   | GENERATED ALWAYS AS IDENTITY [ '(' serial_parameters ')' ]
   | AUTO_INCREMENT</p>

<p>serial_parameters:</p>

<pre><code> [ START WITH nonzero ] 
</code></pre>

<p>   | [ RESTART | RESTART WITH subquery
   | RESTART WITH nonzero ]
   | [INCREMENT BY nonzero ]
   | [MINVALUE nonzero | NOMINVALUE]
   | [MAXVALUE nonzero | NOMAXVALUE ]
   | [CACHE nonzero ]
   | [CYCLE | NONCYCLE]
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表的限制 lang:sql %}</p></blockquote>

<p>CREATE TABLE table_name table_content_source</p>

<p>table_content_source:
   '('  table_element ',' ...  ')'</p>

<p>table_element:</p>

<pre><code> column_name data_type [ column_option ... ]
</code></pre>

<p>   | CONSTRAINT constraint_name table_constraint_type
   | column_name WITH OPTIONS ( column_option ',' ... )</p>

<p>table_constraint_type:</p>

<pre><code> UNIQUE ( column_name ',' ...)
</code></pre>

<p>   | PRIMARY KEY '(' column_name ','  ... ')'
   | FOREIGN KEY '(' column_name ','  ... ')' REFERENCES table_name
   [ '(' column_name ',' ...')'] [ match_options ] [ ref_actions ]</p>

<p>column_option:
   [ constraint_name ] column_constraint_type</p>

<p>column_constraint_type:</p>

<pre><code> NOT NULL
</code></pre>

<p>   | NULL
   | UNIQUE
   | PRIMARY KEY
   | REFERENCES table_name [ '(' column_name ',' ...')' ] [match_options] [ ref_actions ]</p>

<p>match_options:</p>

<pre><code> MATCH { FULL | PARTIAL | SIMPLE }
</code></pre>

<p>ref_actions:</p>

<pre><code> ON UPDATE { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
</code></pre>

<p>   | ON DELETE { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
   | { ON DELETE | ON UPDATE } { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
   | { ON UPDATE | ON DELETE } { NO ACTION | CASCASDE | RESTRICT | SET NULL | SET DEFAULT }
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql创建表索引 lang:sql %}
index_def:</p>

<pre><code>[ UNIQUE | CLUSTERED ] INDEX ident ON qname '(' ident ','... ')' 
</code></pre>

<p>   | CLUSTER ident ON qname '(' ident ','... ')
{% endcodeblock %}
{% codeblock sql创建表的视图 lang:sql %}
view_def: CREATE VIEW view_name ['(' column_name ',' ...')'] AS select_query [WITH CHECK OPTION]
{% endcodeblock %}
{% codeblock sql更改语句 lang:sql %}
alter_statement:</p>

<pre><code> ALTER TABLE qname ADD [ COLUMN ] add_table_element 
</code></pre>

<p>   | ALTER TABLE qname ALTER alter_table_element
   | ALTER TABLE qname DROP drop_table_element
   | ALTER TABLE qname SET READ ONLY
   | ALTER USER ident passwd_schema
   | ALTER USER ident RENAME TO ident
   | ALTER USER SET</p>

<pre><code> [ ENCRYPTED | UNENCRYPTED ] PASSWORD string USING OLD PASSWORD string 
</code></pre>

<p>   | ALTER SEQUENCE name</p>

<pre><code> [ RESTART [ WITH [ poslng | subqeury ] ] ] 
 [ INCREMENT BY nonzerolng ] 
 [ MINVALUE nonzerolng | NO MINVALUE ]
 [ MAXVALUE nonzerolng | NO MAXVALUE ]
 [ CACHE nonzerolng ]
 [ [ NO ] CYCLE ] 
</code></pre>

<p>   | ALTER SEQUENCE qname opt_alt_seq_params</p></blockquote>

<p>alter_table_element: [ COLUMN ] ident SET [ NOT ] NULL | [ COLUMN ] ident SET DEFAULT [ default_value ]</p>

<p>drop_table_element: [ COLUMN ] ident [ RESTRICT | CASCADE ] | CONSTRAINT ident drop_action</p>

<p>constraint_type:</p>

<pre><code> UNIQUE '(' column_name ',' ...')' 
</code></pre>

<p>   | PRIMARY KEY '('column_name ',' ...')'
   | FOREIGN KEY '('column_name ','...')' PEFERENCES table_name ['('column_name','...')']</p>

<pre><code>  [MATCH [ FULL | PARTIAL | SIMPLE ] ] [ ref_action ] 
</code></pre>

<p>   | CHECK '(' search_condition ')'</p>

<p>ref_action: ON {DELETE | UPDATE} {NO ACTION | CASCADE | RESTRICT | SET NULL | SET DEFAULT}</p>

<p>passwd_schema: SET SCHEMA ident | WITH [ ENCRYPTED | UNENCRYPTED ] PASSWORD string [ SET SCHEMA ident ]
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql删除语句 lang:sql %}
drop_statement:</p>

<pre><code> DROP TABLE qname [ RESTRICT | CASCADE ]
</code></pre>

<p>   | DROP FUNCTION qname '(' [ data_type ','... ] ')' [ RESTRICT | CASCADE ]
   | DROP PROCEDURE qname '(' [ data_type ','... ] ')' [ RESTRICT | CASCADE ]
   | DROP ALL FUNCTION qname [ RESTRICT | CASCADE ]
   | DROP ALL PROCEDURE qname [ RESTRICT | CASCADE ]
   | DROP VIEW qname [ RESTRICT | CASCADE ]
   | DROP ROLE qname
   | DROP USER ident
   | DROP INDEX qname
   | DROP CLUSTER qname
   | DROP TRIGGER qname
   | DROP SEQUENCE qname
{% endcodeblock %}
{% codeblock sql创建模式 lang:sql %}
schema:
   CREATE SCHEMA schema_name_clause
  [ DEFAULT CHARACTER SET ident ]
  [ PATH schema_name ','... ]
  [ schema_element ... ]
| DROP SCHEMA qname drop_action</p></blockquote>

<p>schema_name_clause: ident | [ ident ] AUTHORIZATION</p>

<p>ident schema_element: grant | revoke | create_statement | drop_statement | alter_statement
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql用户验证 lang:sql %}
user_stmt:</p>

<pre><code>CREATE USER "user_name" WITH PASSWORD 'user_password' NAME 'name' SCHEMA "schema_name"
</code></pre>

<p>  | ALTER USER "user_name" [ WITH [ ENCRYPTED | UNENCRYPYED ] PASSWORD 'user_password' ]  [ SET SCHEMA "new_schema_name" ]
  | ALTER USER SET [ ENCRYPTED | UNENCRYPYED ] PASSWORD 'new_password' USING OLD PASSWORD 'cur_password'
  | DROP USER "user_name"
  | ALTER USER "user_name" RENAME TO "new_user_name"
{% endcodeblock %}
{% codeblock sql角色 lang:sql %}
role_def:</p>

<pre><code>ROLE qname [ WITH ADMIN grantor ] 
</code></pre>

<p>   | USER ident WITH [ ENCRYPTED | UNENCRYPTED ] PASSWORD string NAME string SCHEMA ident</p></blockquote>

<p>grantor: CURRENT_USER | CURRENT_ROLE
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql授权 lang:sql %}
grant:</p>

<pre><code>GRANT privileges TO grantees [ WITH GRANT OPTION ] [ WITH ADMIN grantor ] 
</code></pre>

<p>  | GRANT authid_list TO grantees [ WITH ADMIN OPTION ] [ WITH ADMIN grantor ]</p></blockquote>

<p>revoke:</p>

<pre><code>REVOKE [ GRANT OPTION FOR ] privileges FROM grantees [ FROM grantor ] 
</code></pre>

<p>  | REVOKE [ ADMIN OPTION FOR ] authid ','... FROM grantees [ FROM grantor ]</p>

<p>grantor: CURRENT_USER | CURRENT_ROLE</p>

<p>privileges: object_privileges ON TABLE [ ident | ident ]</p>

<p>object_privileges: ALL [ PRIVILEGES ] | operation ','...</p>

<p>operation: INSERT | DELETE | [ UPDATE | SELECT | REFERENCES ] opt_column_list</p>

<pre><code>| EXECUTE grantees: [ PUBLIC | authid ] ','...
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p><p>数据操作：1.表更新 2.表操作 3.批量输入输出</p>
{% codeblock sql表更新 lang:sql %}
INSERT INTO table_name [ '(' column_name ',' ... ')' ] [ VALUES '('value_expression','...')' ',' ... | select_query ]</p></blockquote>

<p>UPDATE table_name SET assignment ',' ... [WHERE search_condition ]</p>

<p>assignment : column_name '='  ( scalar_exp  | search_condition | NULL )</p>

<p>DELETE FROM table_name [WHERE search_condition ]
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表join操作 lang:sql %}
table_reference: simple_table</p>

<pre><code>| '(' select_query ')' [AS] table_name [ '(' column_name ',' ... ')' ] 
| '(' select_query ')' 
| joined_table | '(' joined_table ')' [AS] table_name [ '(' column_name ',' ... ')' ]
</code></pre></blockquote>

<p>joined_table: '(' joined_table ')'</p>

<pre><code>| table_reference { CROSS | NATURAL } JOIN table_reference
| table_reference { JOIN | UNIONJOIN} table_reference join_spec 
| table_reference join_type JOIN table_reference join_spec 
| table_reference NATURAL join_type JOIN table_reference
</code></pre>

<p>join_spec : ON search_condition | USING '(colunm_name ',' ...' )'</p>

<p>join_type: INNER | { LEFT | RIGHT | FULL } [OUTER]
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表select操作 lang:sql %}
select_query:</p>

<pre><code>SELECT [ ALL | DISTINCT ]  ( '*' | column_name ',' ... ) [ INTO column_name ',' ... ] 
[ FROM table_name ',' ... ]
[ WHERE search_condition ]
[ GROUP BY column_name ',' ... ]
[ HAVING search_condition]
[ ORDER BY ordering_spec ',' ... ]
[ LIMIT posint ] [ OFFSET posint ]
</code></pre>

<p>{% endcodeblock %}
{% codeblock sql表with操作 lang:sql %}
with_clause :  WITH with_element ',' ... select_query</p></blockquote>

<p>with_element: table_name '(' column_name ',' ... ')' AS '(' select_query ')'
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表各种其他类型的操作 lang:sql %}
predicate:</p>

<pre><code>comparison_predicate 
| between_predicate 
| like_predicate 
| test_for_null 
| in_predicate 
| all_or_any_predicate 
| existence_test 
| '(' predicate ')'
</code></pre></blockquote>

<p>comparison_predicate:</p>

<pre><code>pred_expr COMPARISON pred_expr 
| pred_expr = pred_exp between_predicate: 
pred_expr [NOT] BETWEEN [SYMMETRIC | ASYMMETRIC] pred_expr AND pred_expr like_predicate: 
pred_expr [NOT] LIKE atom_expr
</code></pre>

<p>test_for_null:</p>

<pre><code>column_name IS [NOT] NULL
</code></pre>

<p>in_predicate:</p>

<pre><code>pred_expr [NOT] IN '(' element_name ',' ... ')' all_or_any_predicate : 
pred_expr COMPARISON { ANY | ALL | SOME } subquery
</code></pre>

<p>existence_test:</p>

<pre><code>[NOT] EXISTS subquery pred_expr: 
scalar_expr 
| predicate
</code></pre>

<p>atom_expr:</p>

<pre><code>['('] atom [')'] 
| ['('] atom [')'] ESCAPE string 
| '?'
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql表string类型的操作 lang:sql %}
string_funcs:</p>

<pre><code>  SUBSTRING ( scalar_expr FROM scalar_expr FOR scalar_expr ')' 
| SUBSTRING '(' scalar_expr ',' scalar_expr ',' scalar_expr ')'
| SUBSTRING '(' scalar_exprFROM scalar_expr ')'
| SUBSTRING '(' scalar_expr ',' scalar_expr ')'
| SUBSTRING '(' scalar_expr int_value scalar_expr ')'
| scalar_expr '||' scalar_expr
</code></pre>

<p>{% endcodeblock %}
{% codeblock sql过程定义 lang:sql %}
func_def:</p>

<pre><code> CREATE PROCEDURE qname '(' [ paramlist] ')' EXTERNAL NAME external_function_name 
 | CREATE PROCEDURE qname '(' [ paramlist] ')' routine_body 
</code></pre>

<p>routine_body:</p>

<pre><code>  procedure_statement 
 | BEGIN procedure_statement_list END 
 | BEGIN ATOMIC procedure_statement_list END
</code></pre></blockquote>

<p>procedure_statement:</p>

<pre><code>   transaction_statement 
 | update_statement 
 | schema 
 | grant 
 | revoke 
 | create_statement 
 | drop_statement 
 | alter_statement 
 | declare_statement 
 | set_statement 
 | control_statement
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p><p>sql程序模块定义：1.过程定义 2.函数定义 3.触发器定义 4.变量定义 5.控制流</p>
{% codeblock sql函数定义 lang:sql %}
unc_def:</p>

<pre><code> FUNCTION qname '(' [ paramlist] ')' RETURNS func_data_type EXTERNAL NAME external_function_name
</code></pre>

<p>   | FUNCTION qname '(' [ paramlist ] ')' RETURNS func_data_type routine_body
   | AGGREGATE qname '(' [ paramlist ] ')' RETURNS func_data_type EXTERNAL NAME external_function_name</p></blockquote>

<p>func_data_type:</p>

<pre><code>  TABLE '(' column data_type ','... ')' 
| data_type type_def: TYPE qname EXTERNAL NAME ident
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql触发器定义 lang:sql %}</p></blockquote>

<p>trigger_def: TRIGGER qname trigger_action_time trigger_event ON ident opt_referencing_list triggered_action</p>

<p>trigger_action_time: BEFORE | AFTER</p>

<p>trigger_event: INSERT | DELETE | UPDATE | UPDATE OF ident ','...</p>

<p>opt_referencing_list: [ REFERENCING old_or_new_values_alias ... ]</p>

<p>old_or_new_values_alias:</p>

<pre><code>  OLD [ ROW ] [ AS ] ident | NEW [ ROW ] [ AS ] ident 
| OLD TABLE [ AS ] ident | NEW TABLE [ AS ] ident
</code></pre>

<p>triggered_action: opt_for_each  [ WHEN search_condition ] triggered_statement</p>

<p>opt_for_each: /<em>default for each statement</em>/ | FOR EACH ROW | FOR EACH STATEMENT</p>

<p>triggered_statement:</p>

<pre><code> trigger_procedure_statement 
</code></pre>

<p>   | BEGIN ATOMIC trigger_procedure_statement_list END</p>

<p>trigger_procedure_statement: transaction_statement | update_statement | grant | revoke | declare_statement | set_statement | control_statement | select_statement_single_row
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql变量定义 lang:sql %}
declare_statement:</p>

<pre><code> DECLARE 
</code></pre>

<p>   | DECLARE table_def</p></blockquote>

<p>variable_list:</p>

<pre><code> ident ','... data_type
</code></pre>

<p>   | variable_list ',' ident ','... data_type</p>

<p>set_statement:</p>

<pre><code> SET ident '=' simple_atom
</code></pre>

<p>   | SET SESSION AUTHORIZATION ident
   | SET SCHEMA ident
   | SET user '=' ident
   | SET ROLE ident
   | SET TIME ZONE LOCAL
   | SET TIME ZONE interval_expression</p>

<p>user: [ USER | SESSION_USER | CURRENT_USER ]
{% endcodeblock %}</p>

<blockquote><p>{% codeblock sql控制流 lang:sql %}
control_statement:</p>

<pre><code> CALL func_ref 
</code></pre>

<p>   | CALL routine_name '(' argument_list ')'
   | while_statement
   | if_statement
   | case_statement
   | RETURN return_value</p></blockquote>

<p>case_statement:</p>

<pre><code>CASE scalar_exp when_statement... [ ELSE procedure_statement_list ] END CASE
</code></pre>

<p>  | CASE when_search_statement... [ ELSE procedure_statement_list ] END CASE</p>

<p>when_statement: WHEN scalar_exp THEN procedure_statement_list</p>

<p>when_search_statement: WHEN search_condition THEN procedure_statement_list</p>

<p>if_statement: IF search_condition THEN procedure_statement_list if_opt_else END IF</p>

<p>if_opt_else:</p>

<pre><code>  /* empty */
</code></pre>

<p>   | ELSE procedure_statement_list
   | ELSEIF search_condition THEN procedure_statement_list if_opt_else</p>

<p>while_statement:</p>

<pre><code>[ ident ':' ] WHILE search_condition DO procedure_statement_list END WHILE [ ident ]
</code></pre>

<p>return_statement: RETURN return_value</p>

<p>return_value:</p>

<pre><code>  select_no_parens_orderby 
| search_condition 
| TABLE '(' select_no_parens_orderby ')' | NULL
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p><p>SQL标准定义了三种弱一致性级别以及一致性的可串行化级别。违反可串行性的三种现象：不可重复读、读脏数据和读幻想。定义如下：</p>
<p><strong>不可重复读</strong>（nonrepeatable read)。一个事务在执行过程中对同一对象读两次。第二次得到不同的值，尽管在此期间该事务并没有改变其值。</p>
<p><strong>读脏数据</strong>（dirty read）。事务读由另一个尚未提交的事务所写的值。</p>
<p><strong>读幻象</strong>（phantom read）。事务重新执行返回结果为满足某搜索条件的行集合的查询，发现满足条件的行集合已经改变，这是因为令一个事务最近提交了。<p>
<p>四种标准SQL隔离级别的定义:</p>
<table border="1">
<tr><th>隔离级别        |</th><th>读脏数据      |</th><th>不可重复读       |</th><th>幻象        </th></tr>
<tr><td>读未提交        |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>读已提交        |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>重复读       |</td><td>可能    </td><td>可能 </td><td>可能 </td></tr>
<tr><td>可串行化        |</td><td>不可能 </td><td>不可能  </td><td>不可能  </td></tr>
</table></p></blockquote>
]]></content>
  </entry>
  
</feed>
