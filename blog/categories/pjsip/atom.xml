<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pjsip | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/pjsip/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2014-03-07T23:26:28+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pjsip状态机]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine/"/>
    <updated>2013-09-26T23:38:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/26/pjsip-state-machine</id>
    <content type="html"><![CDATA[<blockquote><p><p>近期在voip skeleton上增加了一个简单的状态机，分别是当前的状态（current state），事件（event），新的状态（new state），操作（action），使用的是list链表的方式管理，实现动态注册状态的处理。在pjsip 事务（transation state machine）状态机使用的是用数组的方式来实现，数组的下标为状态，内容为操作handle。</p>
<!-- more -->
<p>pjsip的事务状态用枚举定义：</p>
{% codeblock transation状态声明 lang:c %}
/<em>*
 * This enumeration represents transaction state.
 </em>/
typedef enum pjsip_tsx_state_e
{</p>

<pre><code>PJSIP_TSX_STATE_NULL,   /**&lt; For UAC, before any message is sent.   */
PJSIP_TSX_STATE_CALLING,    /**&lt; For UAC, just after request is sent.   */
PJSIP_TSX_STATE_TRYING, /**&lt; For UAS, just after request is received.*/
PJSIP_TSX_STATE_PROCEEDING, /**&lt; For UAS/UAC, after provisional response.*/
PJSIP_TSX_STATE_COMPLETED,  /**&lt; For UAS/UAC, after final response.     */
PJSIP_TSX_STATE_CONFIRMED,  /**&lt; For UAS, after ACK is received.        */
PJSIP_TSX_STATE_TERMINATED, /**&lt; For UAS/UAC, before it's destroyed.    */
PJSIP_TSX_STATE_DESTROYED,  /**&lt; For UAS/UAC, will be destroyed now.    */
PJSIP_TSX_STATE_MAX     /**&lt; Number of states.              */
</code></pre>

<p>} pjsip_tsx_state_e;
{% endcodeblock %}
<p>pjsip状态处理函数的定义：</p>
{% codeblock transation状态处理函数声明 lang:c %}
static pj_status_t tsx_on_state_null(       pjsip_transaction *tsx,</p>

<pre><code>                            pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_calling(    pjsip_transaction *tsx,</p>

<pre><code>                            pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_trying(     pjsip_transaction *tsx,</p>

<pre><code>                            pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_proceeding_uas( pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_proceeding_uac( pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_completed_uas(  pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_completed_uac(  pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_confirmed(  pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_terminated( pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>static pj_status_t tsx_on_state_destroyed(  pjsip_transaction *tsx,</p>

<pre><code>                        pjsip_event *event);
</code></pre>

<p>{% endcodeblock %}
<p>pjsip状态机的注册：</p>
{% codeblock transation 状态注册 lang:c %}
/<em> State handlers for UAC, indexed by state </em>/
static int  (<em>tsx_state_handler_uac[PJSIP_TSX_STATE_MAX])(pjsip_transaction </em>,</p>

<pre><code>                          pjsip_event *) = 
</code></pre>

<p>{</p>

<pre><code>&amp;tsx_on_state_null,
&amp;tsx_on_state_calling,
NULL,
&amp;tsx_on_state_proceeding_uac,
&amp;tsx_on_state_completed_uac,
&amp;tsx_on_state_confirmed,
&amp;tsx_on_state_terminated,
&amp;tsx_on_state_destroyed,
</code></pre>

<p>};</p></blockquote>

<p>/<em> State handlers for UAS </em>/
static int  (<em>tsx_state_handler_uas[PJSIP_TSX_STATE_MAX])(pjsip_transaction </em>,</p>

<pre><code>                          pjsip_event *) = 
</code></pre>

<p>{</p>

<pre><code>&amp;tsx_on_state_null,
NULL,
&amp;tsx_on_state_trying,
&amp;tsx_on_state_proceeding_uas,
&amp;tsx_on_state_completed_uas,
&amp;tsx_on_state_confirmed,
&amp;tsx_on_state_terminated,
&amp;tsx_on_state_destroyed,
</code></pre>

<p>};
{% endcodeblock %}</p>

<blockquote><p><p>当相应的事件来临时，就调用相应的处理函数handle和改变自身的状态，如ack来临，或者超时重传：</p>
{% codeblock transation调用相应的处理函数 lang:c %}
/<em>
 * State Calling is for UAC after it sends request but before any responses
 * is received.
 </em>/
static pj_status_t tsx_on_state_calling( pjsip_transaction *tsx,</p>

<pre><code>                     pjsip_event *event )
</code></pre>

<p>{</p>

<pre><code>pj_assert(tsx-&gt;state == PJSIP_TSX_STATE_CALLING);
pj_assert(tsx-&gt;role == PJSIP_ROLE_UAC);
</code></pre></blockquote>

<pre><code>if (event-&gt;type == PJSIP_EVENT_TIMER &amp;&amp; 
event-&gt;body.timer.entry == &amp;tsx-&gt;retransmit_timer) 
{
    pj_status_t status;

/* Retransmit the request. */
    status = tsx_retransmit( tsx, 1 );
if (status != PJ_SUCCESS) {
    return status;
}

} else if (event-&gt;type == PJSIP_EVENT_TIMER &amp;&amp; 
       event-&gt;body.timer.entry == &amp;tsx-&gt;timeout_timer) 
{

/* Cancel retransmission timer. */
if (tsx-&gt;retransmit_timer.id != 0) {
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;retransmit_timer);
    tsx-&gt;retransmit_timer.id = 0;
}
tsx-&gt;transport_flag &amp;= ~(TSX_HAS_PENDING_RESCHED);

/* Set status code */
tsx_set_status_code(tsx, PJSIP_SC_TSX_TIMEOUT, NULL);

/* Inform TU. */
tsx_set_state( tsx, PJSIP_TSX_STATE_TERMINATED, 
                   PJSIP_EVENT_TIMER, &amp;tsx-&gt;timeout_timer);

/* Transaction is destroyed */
//return PJSIP_ETSXDESTROYED;

} else if (event-&gt;type == PJSIP_EVENT_RX_MSG) {
pjsip_msg *msg;
int code;

/* Get message instance */
msg = event-&gt;body.rx_msg.rdata-&gt;msg_info.msg;

/* Better be a response message. */
if (msg-&gt;type != PJSIP_RESPONSE_MSG)
    return PJSIP_ENOTRESPONSEMSG;

code = msg-&gt;line.status.code;

/* If the response is final, cancel both retransmission and timeout
 * timer.
 */
if (code &gt;= 200) {
    if (tsx-&gt;retransmit_timer.id != 0) {
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;retransmit_timer);
    tsx-&gt;retransmit_timer.id = 0;
    }

    if (tsx-&gt;timeout_timer.id != 0) {
    lock_timer(tsx);
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;timeout_timer);
    tsx-&gt;timeout_timer.id = 0;
    unlock_timer(tsx);
    }

} else {
    /* Cancel retransmit timer (for non-INVITE transaction, the
     * retransmit timer will be rescheduled at T2.
     */
    if (tsx-&gt;retransmit_timer.id != 0) {
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;retransmit_timer);
    tsx-&gt;retransmit_timer.id = 0;
    }

    /* For provisional response, only cancel retransmit when this
     * is an INVITE transaction. For non-INVITE, section 17.1.2.1
     * of RFC 3261 says that:
     *  - retransmit timer is set to T2
     *  - timeout timer F is not deleted.
     */
    if (tsx-&gt;method.id == PJSIP_INVITE_METHOD) {

    /* Cancel timeout timer */
    lock_timer(tsx);
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;timeout_timer);
    unlock_timer(tsx);

    } else {
    if (!tsx-&gt;is_reliable) {
        tsx-&gt;retransmit_timer.id = TIMER_ACTIVE;
        pjsip_endpt_schedule_timer(tsx-&gt;endpt, 
                       &amp;tsx-&gt;retransmit_timer,
                       &amp;t2_timer_val);
    }
    }
}

tsx-&gt;transport_flag &amp;= ~(TSX_HAS_PENDING_RESCHED);


/* Discard retransmission message if it is not INVITE.
 * The INVITE tdata is needed in case we have to generate ACK for
 * the final response.
 */
/* Keep last_tx for authorization. */
//blp: always keep last_tx until transaction is destroyed
//code = msg-&gt;line.status.code;
//if (tsx-&gt;method.id != PJSIP_INVITE_METHOD &amp;&amp; code!=401 &amp;&amp; code!=407) {
//    pjsip_tx_data_dec_ref(tsx-&gt;last_tx);
//    tsx-&gt;last_tx = NULL;
//}

/* Processing is similar to state Proceeding. */
tsx_on_state_proceeding_uac( tsx, event);

} else {
pj_assert(!"Unexpected event");
    return PJ_EBUG;
}

return PJ_SUCCESS;
</code></pre>

<p>}
{% endcodeblock %}</p>

<blockquote><p><p>pjsip 事务相应状态改变函数：</p>
{% codeblock transation状态改变和改变相应处理函数 lang:c %}
/<em>
 * Set transaction state, and inform TU about the transaction state change.
 </em>/
static void tsx_set_state( pjsip_transaction *tsx,</p>

<pre><code>           pjsip_tsx_state_e state,
           pjsip_event_id_e event_src_type,
                       void *event_src )
</code></pre>

<p>{</p>

<pre><code>pjsip_tsx_state_e prev_state = tsx-&gt;state;
</code></pre></blockquote>

<pre><code>/* New state must be greater than previous state */
pj_assert(state &gt;= tsx-&gt;state);

PJ_LOG(5, (tsx-&gt;obj_name, "State changed from %s to %s, event=%s",
       state_str[tsx-&gt;state], state_str[state], 
           pjsip_event_str(event_src_type)));
pj_log_push_indent();

/* Change state. */
tsx-&gt;state = state;

/* Update the state handlers. */
if (tsx-&gt;role == PJSIP_ROLE_UAC) {
tsx-&gt;state_handler = tsx_state_handler_uac[state];
} else {
tsx-&gt;state_handler = tsx_state_handler_uas[state];
}

/* Before informing TU about state changed, inform TU about
 * rx event.
 */
if (event_src_type==PJSIP_EVENT_RX_MSG &amp;&amp; tsx-&gt;tsx_user) {
pjsip_rx_data *rdata = (pjsip_rx_data*) event_src;

pj_assert(rdata != NULL);

if (rdata-&gt;msg_info.msg-&gt;type == PJSIP_RESPONSE_MSG &amp;&amp;
       tsx-&gt;tsx_user-&gt;on_rx_response)
{
    (*tsx-&gt;tsx_user-&gt;on_rx_response)(rdata);
}

}

/* Inform TU about state changed. */
if (tsx-&gt;tsx_user &amp;&amp; tsx-&gt;tsx_user-&gt;on_tsx_state) {
pjsip_event e;
PJSIP_EVENT_INIT_TSX_STATE(e, tsx, event_src_type, event_src,
               prev_state);
(*tsx-&gt;tsx_user-&gt;on_tsx_state)(tsx, &amp;e);
}


/* When the transaction is terminated, release transport, and free the
 * saved last transmitted message.
 */
if (state == PJSIP_TSX_STATE_TERMINATED) {
pj_time_val timeout = {0, 0};

/* If we're still waiting for a message to be sent.. */
if (tsx-&gt;transport_flag &amp; TSX_HAS_PENDING_TRANSPORT) {
    /* Disassociate ourselves from the outstanding transmit data
     * so that when the send callback is called we will be able
     * to ignore that (otherwise we'll get assertion, see
     * http://trac.pjsip.org/repos/ticket/1033)
     */
    if (tsx-&gt;pending_tx) {
    tsx-&gt;pending_tx-&gt;mod_data[mod_tsx_layer.mod.id] = NULL;
    tsx-&gt;pending_tx = NULL;
    }
    tsx-&gt;transport_flag &amp;= ~(TSX_HAS_PENDING_TRANSPORT);
}

lock_timer(tsx);

/* Cancel timeout timer. */
if (tsx-&gt;timeout_timer.id != 0) {
    pjsip_endpt_cancel_timer(tsx-&gt;endpt, &amp;tsx-&gt;timeout_timer);
    tsx-&gt;timeout_timer.id = 0;
}

tsx-&gt;timeout_timer.id = TIMER_ACTIVE;
pjsip_endpt_schedule_timer( tsx-&gt;endpt, &amp;tsx-&gt;timeout_timer,
                &amp;timeout);

unlock_timer(tsx);

} else if (state == PJSIP_TSX_STATE_DESTROYED) {

/* Unregister transaction. */
mod_tsx_layer_unregister_tsx(tsx);

/* Destroy transaction. */
tsx_destroy(tsx);
}

pj_log_pop_indent();
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pjsip 初步分析]]></title>
    <link href="http://coolbrain.github.com/blog/2013/09/22/internet/"/>
    <updated>2013-09-22T19:43:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/09/22/internet</id>
    <content type="html"><![CDATA[<blockquote><p><p>pjsip是实现sip的协议栈。相对于其它的sip协议栈，pjsip实现相对稳定且跨平台。首先分析pjlib基本库，其这些库的实现都比较精湛，是深入学习编程的好材料。并且设计了很多的测试用例，对函数的接口进行测试。<p>
<!-- more -->
<p>pjlib库包含操作系统的抽象，具体是可移植性的线程，锁，信号量，事件，高精度时间等；网络I/O,具体为socket抽象，网络地址解析，select I/O复用；时间管理；多种数据结构，字符串的操作，数组帮助，哈希表，链表，红黑树等；内存池管理的实现较为精湛。
<p>如红黑树的代码实现：</p>
{% codeblock rbtree.h lang:c %}
/<em>*
 * @file rbtree.h
 * @brief Red/Black Tree
 </em>/</p></blockquote>

<h1>include &lt;pj/types.h></h1>

<p>PJ_BEGIN_DECL</p>

<p>/<strong>
 * @defgroup PJ_RBTREE Red/Black Balanced Tree
 * @ingroup PJ_DS
 * @brief
 * Red/Black tree is the variant of balanced tree, where the search, insert,
 * and delete operation is \b guaranteed to take at most \a O( lg(n) ).
 * @{
 */
/</strong>
 * Color type for Red-Black tree.
 */
typedef enum pj_rbcolor_t
{</p>

<pre><code>PJ_RBCOLOR_BLACK,
PJ_RBCOLOR_RED
</code></pre>

<p>} pj_rbcolor_t;</p>

<p>/<em>*
 * The type of the node of the R/B Tree.
 </em>/
typedef struct pj_rbtree_node
{</p>

<pre><code>/** Pointers to the node's parent, and left and right siblings. */
struct pj_rbtree_node *parent, *left, *right;

/** Key associated with the node. */
const void *key;

/** User data associated with the node. */
void *user_data;

/** The R/B Tree node color. */
pj_rbcolor_t color;
</code></pre>

<p>} pj_rbtree_node;</p>

<p>/<em><em>
 * The type of function use to compare key value of tree node.
 * @return
 *  0 if the keys are equal
 * <0 if key1 is lower than key2
 * >0 if key1 is greater than key2.
 </em>/
typedef int pj_rbtree_comp(const void </em>key1, const void *key2);</p>

<p>/<em>*
 * Declaration of a red-black tree. All elements in the tree must have UNIQUE
 * key.
 * A red black tree always maintains the balance of the tree, so that the
 * tree height will not be greater than lg(N). Insert, search, and delete
 * operation will take lg(N) on the worst case. But for insert and delete,
 * there is additional time needed to maintain the balance of the tree.
 </em>/
typedef struct pj_rbtree
{</p>

<pre><code>pj_rbtree_node null_node;   /**&lt; Constant to indicate NULL node.    */
pj_rbtree_node *null;       /**&lt; Constant to indicate NULL node.    */
pj_rbtree_node *root;       /**&lt; Root tree node.                    */
unsigned size;              /**&lt; Number of elements in the tree.    */
pj_rbtree_comp *comp;       /**&lt; Key comparison function.           */
</code></pre>

<p>} pj_rbtree;</p>

<p>/<em>*
 * Guidance on how much memory required for each of the node.
 </em>/</p>

<h1>define PJ_RBTREE_NODE_SIZE     (sizeof(pj_rbtree_node))</h1>

<p>/<em>*
 * Guidance on memory required for the tree.
 </em>/</p>

<h1>define PJ_RBTREE_SIZE          (sizeof(pj_rbtree))</h1>

<p>/<em><em>
 * Initialize the tree.
 * @param tree the tree to be initialized.
 * @param comp key comparison function to be used for this tree.
 </em>/
void pj_rbtree_init( pj_rbtree </em>tree, pj_rbtree_comp *comp);</p>

<p>/<em><em>
 * Get the first element in the tree.
 * The first element always has the least value for the key, according to
 * the comparison function.
 * @param tree the tree.
 * @return the tree node, or NULL if the tree has no element.
 </em>/
pj_rbtree_node</em> pj_rbtree_first( pj_rbtree *tree );</p>

<p>/<em><em>
 * Get the last element in the tree.
 * The last element always has the greatest key value, according to the
 * comparison function defined for the tree.
 * @param tree the tree.
 * @return the tree node, or NULL if the tree has no element.
 </em>/
pj_rbtree_node</em> pj_rbtree_last( pj_rbtree *tree );</p>

<p>/<em><em>
 * Get the successive element for the specified node.
 * The successive element is an element with greater key value.
 * @param tree the tree.
 * @param node the node.
 * @return the successive node, or NULL if the node has no successor.
 </em>/
pj_rbtree_node</em> pj_rbtree_next( pj_rbtree *tree,</p>

<pre><code>                 pj_rbtree_node *node );
</code></pre>

<p>/<em><em>
 * The the previous node for the specified node.
 * The previous node is an element with less key value.
 * @param tree the tree.
 * @param node the node.
 * @return the previous node, or NULL if the node has no previous node.
 </em>/
pj_rbtree_node</em> pj_rbtree_prev( pj_rbtree *tree,</p>

<pre><code>                 pj_rbtree_node *node );
</code></pre>

<p>/<em><em>
 * Insert a new node.
 * The node will be inserted at sorted location. The key of the node must
 * be UNIQUE, i.e. it hasn't existed in the tree.
 * @param tree the tree.
 * @param node the node to be inserted.
 * @return zero on success, or -1 if the key already exist.
 </em>/
int pj_rbtree_insert( pj_rbtree </em>tree,</p>

<pre><code>               pj_rbtree_node *node );
</code></pre>

<p>/<em><em>
 * Find a node which has the specified key.
 * @param tree the tree.
 * @param key the key to search.
 * @return the tree node with the specified key, or NULL if the key can not
 *         be found.
 </em>/
pj_rbtree_node</em> pj_rbtree_find( pj_rbtree *tree,</p>

<pre><code>                 const void *key );
</code></pre>

<p>/<em><em>
 * Erase a node from the tree.
 * @param tree the tree.
 * @param node the node to be erased.
 * @return the tree node itself.
 </em>/
pj_rbtree_node</em> pj_rbtree_erase( pj_rbtree *tree,</p>

<pre><code>                  pj_rbtree_node *node );
</code></pre>

<p>/<em><em>
 * Get the maximum tree height from the specified node.
 * @param tree the tree.
 * @param node the node, or NULL to get the root of the tree.
 * @return the maximum height, which should be at most lg(N)
 </em>/
unsigned pj_rbtree_max_height( pj_rbtree </em>tree,</p>

<pre><code>                pj_rbtree_node *node );
</code></pre>

<p>/<em><em>
 * Get the minumum tree height from the specified node.
 * @param tree the tree.
 * @param node the node, or NULL to get the root of the tree.
 * @return the height
 </em>/
unsigned pj_rbtree_min_height( pj_rbtree </em>tree,</p>

<pre><code>                pj_rbtree_node *node );
</code></pre>

<p>{% endcodeblock %}</p>

<blockquote><p><p>红黑树的具体实现：</p>
{% codeblock rbtree.c lang:c %}
static void left_rotate( pj_rbtree <em>tree, pj_rbtree_node </em>node )
{</p>

<pre><code>pj_rbtree_node *rnode, *parent;
</code></pre></blockquote>

<pre><code>PJ_CHECK_STACK();

rnode = node-&gt;right;
if (rnode == tree-&gt;null)
    return;

node-&gt;right = rnode-&gt;left;
if (rnode-&gt;left != tree-&gt;null)
    rnode-&gt;left-&gt;parent = node;
parent = node-&gt;parent;
rnode-&gt;parent = parent;
if (parent != tree-&gt;null) {
    if (parent-&gt;left == node)
   parent-&gt;left = rnode;
    else
   parent-&gt;right = rnode;
} else {
    tree-&gt;root = rnode;
}
rnode-&gt;left = node;
node-&gt;parent = rnode;
</code></pre>

<p>}</p>

<p>static void right_rotate( pj_rbtree <em>tree, pj_rbtree_node </em>node )
{</p>

<pre><code>pj_rbtree_node *lnode, *parent;

PJ_CHECK_STACK();

lnode = node-&gt;left;
if (lnode == tree-&gt;null)
    return;

node-&gt;left = lnode-&gt;right;
if (lnode-&gt;right != tree-&gt;null)
lnode-&gt;right-&gt;parent = node;
parent = node-&gt;parent;
lnode-&gt;parent = parent;

if (parent != tree-&gt;null) {
    if (parent-&gt;left == node)
    parent-&gt;left = lnode;
else
    parent-&gt;right = lnode;
} else {
    tree-&gt;root = lnode;
}
lnode-&gt;right = node;
node-&gt;parent = lnode;
</code></pre>

<p>}</p>

<p>static void insert_fixup( pj_rbtree <em>tree, pj_rbtree_node </em>node )
{</p>

<pre><code>pj_rbtree_node *temp, *parent;

PJ_CHECK_STACK();

while (node != tree-&gt;root &amp;&amp; node-&gt;parent-&gt;color == PJ_RBCOLOR_RED) {
    parent = node-&gt;parent;
    if (parent == parent-&gt;parent-&gt;left) {
    temp = parent-&gt;parent-&gt;right;
    if (temp-&gt;color == PJ_RBCOLOR_RED) {
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        node = parent;
        node-&gt;color = PJ_RBCOLOR_BLACK;
        node = node-&gt;parent;
        node-&gt;color = PJ_RBCOLOR_RED;
    } else {
        if (node == parent-&gt;right) {
       node = parent;
       left_rotate(tree, node);
        }
        temp = node-&gt;parent;
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        temp = temp-&gt;parent;
        temp-&gt;color = PJ_RBCOLOR_RED;
        right_rotate( tree, temp);
    }
    } else {
    temp = parent-&gt;parent-&gt;left;
    if (temp-&gt;color == PJ_RBCOLOR_RED) {
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        node = parent;
        node-&gt;color = PJ_RBCOLOR_BLACK;
        node = node-&gt;parent;
        node-&gt;color = PJ_RBCOLOR_RED;
    } else {
        if (node == parent-&gt;left) {
        node = parent;
        right_rotate(tree, node);
        }
        temp = node-&gt;parent;
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        temp = temp-&gt;parent;
        temp-&gt;color = PJ_RBCOLOR_RED;
        left_rotate(tree, temp);
   }
    }
}

tree-&gt;root-&gt;color = PJ_RBCOLOR_BLACK;
</code></pre>

<p>}</p>

<p>static void delete_fixup( pj_rbtree <em>tree, pj_rbtree_node </em>node )
{</p>

<pre><code>pj_rbtree_node *temp;

PJ_CHECK_STACK();

while (node != tree-&gt;root &amp;&amp; node-&gt;color == PJ_RBCOLOR_BLACK) {
    if (node-&gt;parent-&gt;left == node) {
    temp = node-&gt;parent-&gt;right;
    if (temp-&gt;color == PJ_RBCOLOR_RED) {
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        node-&gt;parent-&gt;color = PJ_RBCOLOR_RED;
        left_rotate(tree, node-&gt;parent);
        temp = node-&gt;parent-&gt;right;
    }
    if (temp-&gt;left-&gt;color == PJ_RBCOLOR_BLACK &amp;&amp; 
        temp-&gt;right-&gt;color == PJ_RBCOLOR_BLACK) 
    {
        temp-&gt;color = PJ_RBCOLOR_RED;
        node = node-&gt;parent;
    } else {
        if (temp-&gt;right-&gt;color == PJ_RBCOLOR_BLACK) {
        temp-&gt;left-&gt;color = PJ_RBCOLOR_BLACK;
        temp-&gt;color = PJ_RBCOLOR_RED;
        right_rotate( tree, temp);
        temp = node-&gt;parent-&gt;right;
        }
        temp-&gt;color = node-&gt;parent-&gt;color;
        temp-&gt;right-&gt;color = PJ_RBCOLOR_BLACK;
        node-&gt;parent-&gt;color = PJ_RBCOLOR_BLACK;
        left_rotate(tree, node-&gt;parent);
        node = tree-&gt;root;
    }
    } else {
    temp = node-&gt;parent-&gt;left;
    if (temp-&gt;color == PJ_RBCOLOR_RED) {
        temp-&gt;color = PJ_RBCOLOR_BLACK;
        node-&gt;parent-&gt;color = PJ_RBCOLOR_RED;
        right_rotate( tree, node-&gt;parent);
        temp = node-&gt;parent-&gt;left;
    }
    if (temp-&gt;right-&gt;color == PJ_RBCOLOR_BLACK &amp;&amp; 
    temp-&gt;left-&gt;color == PJ_RBCOLOR_BLACK) 
    {
        temp-&gt;color = PJ_RBCOLOR_RED;
        node = node-&gt;parent;
    } else {
        if (temp-&gt;left-&gt;color == PJ_RBCOLOR_BLACK) {
        temp-&gt;right-&gt;color = PJ_RBCOLOR_BLACK;
        temp-&gt;color = PJ_RBCOLOR_RED;
        left_rotate( tree, temp);
        temp = node-&gt;parent-&gt;left;
        }
        temp-&gt;color = node-&gt;parent-&gt;color;
        node-&gt;parent-&gt;color = PJ_RBCOLOR_BLACK;
        temp-&gt;left-&gt;color = PJ_RBCOLOR_BLACK;
        right_rotate(tree, node-&gt;parent);
        node = tree-&gt;root;
    }
    }
}

node-&gt;color = PJ_RBCOLOR_BLACK;
</code></pre>

<p>}</p>

<p>void pj_rbtree_init( pj_rbtree <em>tree, pj_rbtree_comp </em>comp )
{</p>

<pre><code>PJ_CHECK_STACK();

tree-&gt;null = tree-&gt;root = &amp;tree-&gt;null_node;
tree-&gt;null-&gt;key = NULL;
tree-&gt;null-&gt;user_data = NULL;
tree-&gt;size = 0;
tree-&gt;null-&gt;left = tree-&gt;null-&gt;right = tree-&gt;null-&gt;parent = tree-&gt;null;
tree-&gt;null-&gt;color = PJ_RBCOLOR_BLACK;
tree-&gt;comp = comp;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_first( pj_rbtree </em>tree )
{</p>

<pre><code>register pj_rbtree_node *node = tree-&gt;root;
register pj_rbtree_node *null = tree-&gt;null;

PJ_CHECK_STACK();

while (node-&gt;left != null)
node = node-&gt;left;
return node != null ? node : NULL;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_last( pj_rbtree </em>tree )
{</p>

<pre><code>register pj_rbtree_node *node = tree-&gt;root;
register pj_rbtree_node *null = tree-&gt;null;

PJ_CHECK_STACK();

while (node-&gt;right != null)
node = node-&gt;right;
return node != null ? node : NULL;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_next( pj_rbtree </em>tree,</p>

<pre><code>                register pj_rbtree_node *node )
</code></pre>

<p>{</p>

<pre><code>register pj_rbtree_node *null = tree-&gt;null;

PJ_CHECK_STACK();

if (node-&gt;right != null) {
for (node=node-&gt;right; node-&gt;left!=null; node = node-&gt;left)
    /* void */;
} else {
    register pj_rbtree_node *temp = node-&gt;parent;
    while (temp!=null &amp;&amp; temp-&gt;right==node) {
    node = temp;
    temp = temp-&gt;parent;
}
node = temp;
}    
return node != null ? node : NULL;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_prev( pj_rbtree </em>tree,</p>

<pre><code>                register pj_rbtree_node *node )
</code></pre>

<p>{</p>

<pre><code>register pj_rbtree_node *null = tree-&gt;null;

PJ_CHECK_STACK();

if (node-&gt;left != null) {
    for (node=node-&gt;left; node-&gt;right!=null; node=node-&gt;right)
   /* void */;
} else {
    register pj_rbtree_node *temp = node-&gt;parent;
    while (temp!=null &amp;&amp; temp-&gt;left==node) {
    node = temp;
    temp = temp-&gt;parent;
    }
    node = temp;
}    
return node != null ? node : NULL;
</code></pre>

<p>}</p>

<p>int pj_rbtree_insert( pj_rbtree *tree,</p>

<pre><code>              pj_rbtree_node *element )
</code></pre>

<p>{</p>

<pre><code>int rv = 0;
pj_rbtree_node *node, *parent = tree-&gt;null, 
       *null = tree-&gt;null;
pj_rbtree_comp *comp = tree-&gt;comp;

PJ_CHECK_STACK();

node = tree-&gt;root;  
while (node != null) {
    rv = (*comp)(element-&gt;key, node-&gt;key);
    if (rv == 0) {
    /* found match, i.e. entry with equal key already exist */
    return -1;
}    
parent = node;
    node = rv &lt; 0 ? node-&gt;left : node-&gt;right;
}

element-&gt;color = PJ_RBCOLOR_RED;
element-&gt;left = element-&gt;right = null;

node = element;
if (parent != null) {
    node-&gt;parent = parent;
    if (rv &lt; 0)
   parent-&gt;left = node;
    else
   parent-&gt;right = node;
    insert_fixup( tree, node);
} else {
    tree-&gt;root = node;
    node-&gt;parent = null;
    node-&gt;color = PJ_RBCOLOR_BLACK;
}

++tree-&gt;size;
return 0;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_find( pj_rbtree </em>tree,</p>

<pre><code>                const void *key )
</code></pre>

<p>{</p>

<pre><code>int rv;
pj_rbtree_node *node = tree-&gt;root;
pj_rbtree_node *null = tree-&gt;null;
pj_rbtree_comp *comp = tree-&gt;comp;

while (node != null) {
    rv = (*comp)(key, node-&gt;key);
    if (rv == 0)
    return node;
    node = rv &lt; 0 ? node-&gt;left : node-&gt;right;
}
return node != null ? node : NULL;
</code></pre>

<p>}</p>

<p>pj_rbtree_node<em> pj_rbtree_erase( pj_rbtree </em>tree,</p>

<pre><code>                 pj_rbtree_node *node )
</code></pre>

<p>{</p>

<pre><code>pj_rbtree_node *succ;
pj_rbtree_node *null = tree-&gt;null;
pj_rbtree_node *child;
pj_rbtree_node *parent;

PJ_CHECK_STACK();

if (node-&gt;left == null || node-&gt;right == null) {
    succ = node;
} else {
    for (succ=node-&gt;right; succ-&gt;left!=null; succ=succ-&gt;left)
   /* void */;
}

child = succ-&gt;left != null ? succ-&gt;left : succ-&gt;right;
parent = succ-&gt;parent;
child-&gt;parent = parent;

if (parent != null) {
if (parent-&gt;left == succ)
    parent-&gt;left = child;
    else
   parent-&gt;right = child;
} else
    tree-&gt;root = child;

if (succ != node) {
    succ-&gt;parent = node-&gt;parent;
    succ-&gt;left = node-&gt;left;
    succ-&gt;right = node-&gt;right;
    succ-&gt;color = node-&gt;color;

    parent = node-&gt;parent;
    if (parent != null) {
   if (parent-&gt;left==node)
        parent-&gt;left=succ;
   else
    parent-&gt;right=succ;
    }
    if (node-&gt;left != null)
   node-&gt;left-&gt;parent = succ;;
    if (node-&gt;right != null)
    node-&gt;right-&gt;parent = succ;

    if (tree-&gt;root == node)
   tree-&gt;root = succ;
}

if (succ-&gt;color == PJ_RBCOLOR_BLACK) {
if (child != null) 
    delete_fixup(tree, child);
    tree-&gt;null-&gt;color = PJ_RBCOLOR_BLACK;
}

--tree-&gt;size;
return node;
</code></pre>

<p>}</p>

<p>unsigned pj_rbtree_max_height( pj_rbtree *tree,</p>

<pre><code>                   pj_rbtree_node *node )
</code></pre>

<p>{</p>

<pre><code>unsigned l, r;

PJ_CHECK_STACK();

if (node==NULL) 
node = tree-&gt;root;

l = node-&gt;left != tree-&gt;null ? pj_rbtree_max_height(tree,node-&gt;left)+1 : 0;
r = node-&gt;right != tree-&gt;null ? pj_rbtree_max_height(tree,node-&gt;right)+1 : 0;
return l &gt; r ? l : r;
</code></pre>

<p>}</p>

<p>unsigned pj_rbtree_min_height( pj_rbtree *tree,</p>

<pre><code>                   pj_rbtree_node *node )
</code></pre>

<p>{</p>

<pre><code>unsigned l, r;

PJ_CHECK_STACK();

if (node==NULL) 
node=tree-&gt;root;

l = (node-&gt;left != tree-&gt;null) ? pj_rbtree_max_height(tree,node-&gt;left)+1 : 0;
r = (node-&gt;right != tree-&gt;null) ? pj_rbtree_max_height(tree,node-&gt;right)+1 : 0;
return l &gt; r ? r : l;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
