<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tp-link | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/tp-link/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-08-06T00:39:45+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[南柯黄粱梦终醒 人生恰似一浮萍]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/06/sixteenth-day/"/>
    <updated>2013-08-06T00:23:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/06/sixteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>早上的以太网基础，硬件知识，迷迷糊糊已经睡着了，因为都不懂的，本来是安排给硬件工程师，又叫软件工程师来了解下，方知一点摸不着头脑，反而赐予了两个小时的吹眠时间。睡醒后，还飘飘然的感觉，一点羞耻之感够没有。</p>
<!-- more -->
<p>编程实现了进程间共享存储的信号互斥，使用的sem_open函数，之前找来找去都不知道用什么来实现，原来是用Posix的信号灯。规整化了时间的输出，还加了Delog输出的类型。就这样时间就无声无色地过去了。</p>
<p>没有实现的要求是，在模块系统的时候，输入参数初始化，方知道我是用动态链接库的，都不知道怎样进行初始化，所以又卡在这里了。看来我的效率很低，今天才做了那么一点点事情。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手高眼低 迎刃而解]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/02/fifteenth-day/"/>
    <updated>2013-08-02T23:14:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/02/fifteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天主要是把之前写的DebugLog模块转变为可以多进程调用的共享模块，基本上测试成功，但还不知道怎样对共享内存区域进行加锁。另外，还要尝试将DebugLog模块做成内核模块，就如printf函数一样的模块。好多知识要学，踏实点，不要眼高手低。</p>
<!-- more -->
<p>将DebugLog模块编译成动态链接库，各个进程使用是独立的，包括模块中的全局变量，只有内存映射才是公共的，但各个进程来说，其地址又是不一样的，因为是进程使用的虚拟地址，所以存储在共享内存的数据,包含链表，都只能使用相对的地址，所有的操作都是利用指针进行相对地址的操作。</p>
<p>今天有个关于MIPS架构的讲座，讲师很厉害，不过我也有几个不明白的地方，一：大小端问题，二：字节对齐问题 三：cache问题，以后还要慢慢弄懂这些问题，不要犯一些低级错误。如近期经常在while，或for循环后面加个“；”，其后面的代码根本就发挥不了作用，只执行了仅仅一次，就退出了。</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感激涕零 不知所云]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/fourteenth-day/"/>
    <updated>2013-08-01T23:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/fourteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天没有training,arrange time by ourselves. 发现之前写的代码太没水平了，找素数的居然筛选法比传统方法还要慢，重复赋值太多和没有利用CPU的流水线。模式替换，发现自己居然整数选择时没有用switch代替if-else语句。memmove内存复制的字节对齐理解错误，是地址，而不是长度，一般用汇编写比较能提高效率，且可以利用流水线加速。每一条编程题都有改进的空间。</p>
<!-- more -->
<p>I spent two hours learning how to write Makefile. 懂得如何递归地执行Makefile文件和递归地删除目标文件，学习的时候需要带着问题去学习，这样效果会比较好。</p>
<p>晚上回来还是不断地查找关于共享库全局变量的问题，原来每个进程执行的时候都有自己的副本。关于链接库，共享内存实现的机制，还有虚拟存储的理解又加深了，还要继续深究这些问题，因为还没有弄明白究竟是怎么一回事，不能糊里糊涂地让其过去。我受不了还没有理解，我受不了效率这么低。</p>
<p><strong>PS:感谢张韵婷同学对我的help。同时自己要积极进取，努力去解决问题。keep optimistic and working hard to solve the facing problem.</strong></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[麻雀虽小 五脏俱全]]></title>
    <link href="http://coolbrain.github.com/blog/2013/08/01/thirteenth-day/"/>
    <updated>2013-08-01T00:24:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/08/01/thirteenth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天有个讲座是IAD硬件基础，其实IAD是Integrated Access Device(综合接入设备），包含ADSL，route, VoIP(网络电话），USB，无线wifi。重点是说了网络IP电话（VOIP）技术，音频的编码，语音的控制（SIP协议），语音的传输（RTP，底层还是使用UDP协议），语音质量的保证（消除回声）等。</p>
<!-- more -->
<p>这些功能都整合到路由器上，可惜中国都法定规定不允许使用IP电话，不然打电话就便宜了。这产品是外销到外国的。但从其配置上看，比较复杂，需要专业人士，不过外国人接触的东西比较多，按照说明书的指示，应该还是能够配置成功。其配置中可以通过传统的PSTN电信的通信网通信，也可以通过互联网（VOIP）语音聊天，就是语音质量会比传统的PSTN稍微差一些。增加了一个语音模块，就增加了五个芯片，布线也变得复杂，接口也增加了好几个。</p>
<p>下午还是编程，主要是把代码改成符合编程规范，写单元测试用例，继续优化代码。还跟导师讨论了多进程的通信问题，引起了我的兴趣，我不断地看这进程通信，有很多东西还没理解，如mmap的实现机制是怎样的，如何正确地使用。</p>
<p>要学如何写Makefile文件，不然怎么对得起自己呢？</p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[循序渐进 步步为营]]></title>
    <link href="http://coolbrain.github.com/blog/2013/07/31/twelveth-day/"/>
    <updated>2013-07-31T00:08:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/07/31/twelveth-day</id>
    <content type="html"><![CDATA[<blockquote><p><p>今天写了memmove这样的函数，首先要检测内存覆盖问题，然后是考虑怎样加快移动的效率.因为传统的做法是以char一个字节的传送，而现在可以通过四个字节对齐的方式，通过int整型一次四个字节的传送。可以大大地加快了传送的效率，因为一次传送一个字节和一次传送四个字节是一样的。</p>
<!-- more -->
<p>另外是一个debuglog的模块，用链表实现，之前思路一直都不正确，之前写代码的经验又少，弄了好久才写出一个基本模型，以后要多多训练一下了，这么简单的问题都纠结了这么久，效率实在太低了。</p>
<p>我要狂练代码。</p></p></blockquote>
]]></content>
  </entry>
  
</feed>
