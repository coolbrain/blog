<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Intern | ForgeBrain]]></title>
  <link href="http://coolbrain.github.com/blog/categories/intern/atom.xml" rel="self"/>
  <link href="http://coolbrain.github.com/"/>
  <updated>2013-07-05T18:30:25+08:00</updated>
  <id>http://coolbrain.github.com/</id>
  <author>
    <name><![CDATA[ForgeBrain]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bugs]]></title>
    <link href="http://coolbrain.github.com/blog/2013/04/10/bugs/"/>
    <updated>2013-04-10T21:36:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/04/10/bugs</id>
    <content type="html"><![CDATA[<blockquote><p><p>写完程序，接下来测试，尽可能地去发现程序中的bugs。我负责一个解析终端协议模块，与同事的业务模块合并在一起。之前，我们就进行过不少的测试，出现最多的的是段错误，SIGSEGV信号，即无效的内存引用。</p>
<!-- more -->
<p>1.由于同事改了之前我定义数组的长度，导致程序中的数组越界，同时我也没有进行越界检测，程序被迫退出。</p>
<p>2.当只声明对象指针，却没有给予分配内存，引用对象指针内容或对其里面内容赋值时，也出现段错误。</p>
<p>3.由于自己编程习惯不是很好，调用close函数关闭socket文件描述符的时候，我在不同的地方调用了两次释放同样一个描述符，导致内部调用两次free()函数出错</p>
<p>4.客户端在传送数据时突然关闭，服务端就突然无故退出。后来用gdb调试，才发现SIGPIPE信号，因为在客户端关闭后，服务端还在给客户端在send（）数据，当管道已经破坏。当时解决是：忽略SIGPIPE信号，调用signal(SIGPIPE,SIG_IGN),且检测管道损坏后，不再往管道发送数据。</p>
<p>5.本来是浮点型，直接乘以1000，转换为长整型，数值失真。后来通过floor函数来解决</p>
对函数的使用不太熟悉，如recv函数
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>recv函数  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">ssize_t</span> <span class="n">recv</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">nbytes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>6.recv的返回值有正数，0，-1，-2，每一种返回都有其含义，整数代表接收到数据的长度，0代表断开连接，-1代表超时，-2代表错误。对于每一种的返回有其相应的处理。因为当时有个线程没有退出，是因为少考虑了一种情况。其实这个函数有更多的返回。</p>
<p>7.网络上传输的数据不能用strlen函数来得出长度，而应该根据recv函数返回的长度.</p>
<p>8.使用inet_addr()函数是把IP地址转化为网络序，而不是主机序长整形。自己实现函数转换，熟悉位操作。</p>
<p>9.strcpy函数是已经对目标字符串加了'\0',与字符相关的函数操作strlen，strcmp，strcpy都会用到'\0'判断字符的结束。同时memcpy函数是不加'\0'的，这个是通用的数据复制函数。不单单支持char类型。</p>
<p>10.使用osip库中的API的时候，当出现问题时，要懂得看源码，弄懂它的实现机制。如用两个线程绑定不同的IP的5060端口，在eXosip库是不可以的，因为它的实现里用到一个全局的结构体，后面的会覆盖前面的设置，只有一个IP的5060有效。可能需要两个进程解决，但同时又要解决两个进程的通信问题了。</p>
<p>11.eXosip_call_ack函数发送的ack总是收不到，用wireshark抓包也抓不到，仔细检查过代码后，还是觉得没问题，后来百度了一下，有人提到是网络不通，后来同事辛辛苦苦弄出来了，原来同事的虚拟机安装了virbird的服务，导致网络不通。具体的原因我现在还没清楚，可能同事也是看源码弄清楚,还是挺欣赏同事从库的源代码找思路解决问题的。</p>
<p>12.1 这两天我们的程序又出现破坏堆中内存分配的信息数据的信息：</p>
<p>    glibc detected * free(): invalid pointer: </p>
<p>    glibc detected * malloc(): memory corruption:</p>
<p>    glibc detected * double free or corruption (out): 0x005c18a0 <em>**</p>
<p>    glibc detected * corrupted double-linked list: 0x005ab150 </em></p>
<p>12.2 如果破坏了自己的其它对象的内存空间，就可能诱发coredump的错误。</p>
<p>12.3一般出现这些内存问题的原因：</p>
<p> a.使用未初始化的内存（using uninitialized memory.未初始化的内存的垃圾值可能会导致不可预测的错误）</p>
<p> b.内存泄漏，分配的内存忘了释放 ；内存重复释放，出现double free；（faulty heap memory management：内存泄漏，释放空指针或释放未分配的内存）</p>
<p> c.内存越界使用，使用了不该使用的内存（Using beyond allocated memory缓冲溢出，栈保护）</p>
<p> d.使用了无效的指针 （Using un-owned memory，null指针和悬挂或野指针。如多线程中某一动态分配的对象同时被两个线程使用。一个线程释放了该对象，而另一线程还对该对象进行操作）</p>
<p> e.空指针，对一个空指针进行操作 </p>
<p>12.4 排查的原则，首先保证能重现错误。根据错误估计可能的环节，逐步裁剪代码，缩小排查空间检查所有的内存操作函数，检查内存越界的可能性。常用的内存操作函数：</p>
<p>字符串输出：sprintf snprintf vsprintf vsnprintf </p>
<p>字符串操作：strcpy strncpy strcat </p>
<p>内存操作：memcpy memmove memset bcopy</p>
<p>12.5排查的工具：gdb（调试器），Purify，Valgrind，Insure++,AddressSanitizer</p>
<p>13.程序中出现：glibc detected * free(): invalid pointer，原来是sip库里函数实现有free，但却无知地传入个数组。应该动态申请内存。</p>
<p><a href="http://en.wikipedia.org/wiki/Memory_corruption">Reference wiki：memory corruption</a></p></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIP Application]]></title>
    <link href="http://coolbrain.github.com/blog/2013/03/27/sip-introduction/"/>
    <updated>2013-03-27T23:58:00+08:00</updated>
    <id>http://coolbrain.github.com/blog/2013/03/27/sip-introduction</id>
    <content type="html"><![CDATA[<blockquote><p><p>实习期间，接触到SIP，对其略有所闻。SIP（Session Initiation Protocol) 协议是类似于http的基于文本的协议，应用层的信令控制协议。用于创建，修改和释放一个或多个参与者的会话。主要用于IP电话,视频等。</p>
<!-- more -->
<p>SIP协议支持TCP和UDP，端口5060.也可以穿越防火墙（NAT).SIP协议为用户两端建立连接，然后使用RTP协议进行两端的语音通信。两端建立连接，类似于TCP的三次握手；两端通话结束，要断开连接，goodbye确认。</p>
此图显示一个sip的具体例子：
<p>INVITE sip:user2@there.com
  To:sip:user2@there.com
  From:sip:user1@here.com
.....（user1's SDP not shown)</p>
<img src="/assets/images/sip.png" alt="&quot;SIP&quot;" />
<p>现成已经有实现SIP协议解析的库，比较短小精悍的osip和其扩展的Exosip。我们的项目就是基于Exosip的基础上进行开发的。</p>
osip比较重要的一个数据结构osip_message,用于封装发送和接受的数据。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>osip_message  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">osip_message</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">sip_version</span><span class="p">;</span>
</span><span class='line'><span class="n">osip_uri_t</span> <span class="o">*</span><span class="n">req_uri</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">sip_method</span><span class="p">;</span>           <span class="cm">/**&amp;lt;METHOD(SIP request only)*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">statue_code</span><span class="p">;</span>            <span class="cm">/**&amp;lt;status Code(SIP answer only)*/</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">reason_phrase</span><span class="p">;</span>        <span class="cm">/**&amp;lt;Reason Phrase(SIP answer only)*/</span>
</span><span class='line'><span class="n">osip_from_t</span> <span class="o">*</span><span class="n">from</span><span class="p">;</span>          <span class="cm">/**&amp;lt;From header **/</span>
</span><span class='line'><span class="n">osip_to_t</span>   <span class="o">*</span><span class="n">to</span><span class="p">;</span>            <span class="cm">/**&amp;lt;To header**/</span>
</span><span class='line'><span class="p">......</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
EXoisp扩展库支持事件类型的数据结构，用于识别状态的转移，到什么状态。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>osip_event  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">eXosip_event</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">eXosip_event_type_t</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span>    <span class="n">textinfo</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span><span class="o">*</span>   <span class="n">external_reference</span><span class="p">;</span>
</span><span class='line'><span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">request</span><span class="p">;</span>
</span><span class='line'><span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">response</span><span class="p">;</span>
</span><span class='line'><span class="n">osip_message_t</span> <span class="o">*</span> <span class="n">ack</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">tid</span><span class="p">;</span>        <span class="cm">/**unique id for transations(to be used for answers)**/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">did</span><span class="p">;</span>        <span class="cm">/**unique id for SIP dialogs**/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">rid</span><span class="p">;</span>        <span class="cm">/**unique id for registration**/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cid</span><span class="p">;</span>        <span class="cm">/**unique id for calls(but multiple dialogs!)**/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">sid</span><span class="p">;</span>        <span class="cm">/**unique id for outgoing subscriptions*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">nid</span><span class="p">;</span>        <span class="cm">/**unique id for incoming subscription*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ss_status</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ss_reason</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>库的使用：初始化eXosip  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">eXosip2</span><span class="o">/</span><span class="n">eXosip</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">eXosip_t</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ctx</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">port</span><span class="o">=</span><span class="mi">5060</span><span class="p">;</span>
</span><span class='line'><span class="n">TRACE_INITIALIZE</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">ctx</span> <span class="o">=</span> <span class="n">eXosip_malloc</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ctx</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span><span class="o">=</span><span class="n">eXosip_init</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">eXosip_listen_addr</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">IPPROTO_UDP</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">AF_INET</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span><span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Open</span> <span class="n">a</span> <span class="n">UDP</span> <span class="n">socket</span> <span class="k">for</span> <span class="n">signalling</span><span class="err">*/</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">eXosip_quit</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">fprintf</span> <span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;could not initialize transport layer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>处理eXosip2事件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">eXosip_event_t</span> <span class="o">*</span><span class="n">evt</span><span class="p">;</span>                          <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(;;)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">evt</span> <span class="o">=</span> <span class="n">eXosip_event_wait</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'><span class="n">eXosip_lock</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">eXosip_automatic_action</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="n">eXosip_unlock</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">evt</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="k">continue</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_NEW</span><span class="p">)</span>  <span class="cm">/**Answer 180 Ringing to an incoming INVITE**/</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">eXosip_lock</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eXosip_call_send_answer</span> <span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">evt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">tid</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">eXosip_unlock</span> <span class="p">(</span><span class="n">ctx</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_ACK</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">evt</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">type</span> <span class="o">==</span> <span class="n">EXOSIP_CALL_ANSWERED</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="p">....</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">.....</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="n">eXosip_event_free</span><span class="p">(</span><span class="n">evt</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>
]]></content>
  </entry>
  
</feed>
